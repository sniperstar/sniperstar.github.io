<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++语言STL中sort函数的使用方法</title>
    <url>/2021/09/27/C-%E8%AF%AD%E8%A8%80STL%E4%B8%ADsort%E5%87%BD%E6%95%B0%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>首先，想要使用C++中的sort函数需要包含以下头文件：</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>sort函数的用法如下：</p>
<h4 id="一、对基本类型数组从小到大排序"><a href="#一、对基本类型数组从小到大排序" class="headerlink" title="一、对基本类型数组从小到大排序"></a>一、对基本类型数组从小到大排序</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a, a + n);</span><br></pre></td></tr></table></figure>

<p>排序的区间是[a,a+n)，第一个参数是要排序的区间首地址，第二个参数是区间尾地址的下一地址。简单来说，有一个数组int a[100]，要对从 a[0] 到 a[99] 的元素进行排序，只要写sort( a, a+100)就行了，默认的排序方式是升序。如果要对向量v排序，就是：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(v.<span class="built_in">begin</span>(),v.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>



<h4 id="二、对元素类型为T的基本类型数组通过第三个参数控制排序方式"><a href="#二、对元素类型为T的基本类型数组通过第三个参数控制排序方式" class="headerlink" title="二、对元素类型为T的基本类型数组通过第三个参数控制排序方式"></a>二、对元素类型为T的基本类型数组通过第三个参数控制排序方式</h4><p>从小到大排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sort(a, a + n, less&lt;T&gt;())</span><br></pre></td></tr></table></figure>

<p>从大到小排序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a, a + n, greater&lt;T&gt;());</span><br></pre></td></tr></table></figure>

<p>如果不加第三个参数，则是默认从小到大排序</p>
<h4 id="三、自定义排序规则"><a href="#三、自定义排序规则" class="headerlink" title="三、自定义排序规则"></a>三、自定义排序规则</h4><p>我们可以加入一个比较函数compare来控制排序规则。比较函数是一个自己定义的函数，返回值是bool型，它规定了什么样的关系才是“小于”。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a, a + n, compare);</span><br></pre></td></tr></table></figure>

<p>例如我们想对一个有若干成员变量的结构体数组排序：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>&#123;</span></span><br><span class="line">	<span class="keyword">int</span> a; </span><br><span class="line">	<span class="keyword">int</span> b; </span><br><span class="line">	<span class="keyword">int</span> c; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">cin &gt;&gt; n; <span class="comment">//输入数组长度</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">T</span>* <span class="title">p</span> =</span> <span class="keyword">new</span> struct T[n];</span><br></pre></td></tr></table></figure>

<p>如果要求的排序规则如下：</p>
<ol>
<li>先按a值降序排列；</li>
<li>如果a值相同，再按b值降序排列；</li>
<li>如果b还相同，就按c值升序排列；<br>那么比较函数如下：</li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (t1.a != t2.a)</span><br><span class="line">		<span class="keyword">return</span> t1.a &gt; t2.a;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (t1.b != t2.b)</span><br><span class="line">		<span class="keyword">return</span> t1.b &gt; t2.b;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> t1.c &lt; t2.c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果只要求对a值降序排列，则比较函数为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t1.a &gt; t2.a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>排序代码为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(p, p + n, compare);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>C++语言string类型用法总结</title>
    <url>/2021/09/27/C-%E8%AF%AD%E8%A8%80string%E7%B1%BB%E5%9E%8B%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>首先，为了在我们的程序中使用string类型，我们必须包含以下头文件 :</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br></pre></td></tr></table></figure>

<p>接下来声明一个C++string类型字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str;</span><br></pre></td></tr></table></figure>

<p>这样我们就声明了一个字符串变量，但既然是一个类，就有构造函数和析构函数。上面的声明没有传入参数，所以就直接使用了string的默认的构造函数，这个函数所做的就是把str初始化为一个空字符串。</p>
<h4 id="string类的构造函数和析构函数："><a href="#string类的构造函数和析构函数：" class="headerlink" title="string类的构造函数和析构函数："></a>string类的构造函数和析构函数：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span>(<span class="keyword">const</span> <span class="keyword">char</span> *s);    <span class="comment">//用c字符串s初始化</span></span><br><span class="line"><span class="built_in">string</span>(<span class="keyword">int</span> n,<span class="keyword">char</span> c);     <span class="comment">//用n个字符c初始化</span></span><br><span class="line">string s;    <span class="comment">//生成一个空字符串s</span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(str)</span> <span class="comment">//拷贝构造函数 生成str的复制品</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(str,stridx)</span> <span class="comment">//将字符串str内“始于位置stridx”的部分当作字符串的初值</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(str,stridx,strlen)</span> <span class="comment">//将字符串str内“始于stridx且长度顶多strlen”的部分作为字符串的初值</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(cstr)</span> <span class="comment">//将C字符串作为s的初值</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(chars,chars_len)</span> <span class="comment">//将C字符串前chars_len个字符作为字符串s的初值。</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(num,c)</span> <span class="comment">//生成一个字符串，包含num个c字符</span></span></span><br><span class="line"><span class="function">string <span class="title">s</span><span class="params">(beg,end)</span> <span class="comment">//以区间beg;end(不包含end)内的字符作为字符串s的初值</span></span></span><br><span class="line"><span class="function">s.~<span class="title">string</span><span class="params">()</span> <span class="comment">//销毁所有字符，释放内存</span></span></span><br></pre></td></tr></table></figure>

<p>此外，string类还支持默认构造函数和复制构造函数，如string s1；string s2=“hello”；都是正确的写法。当构造的string太长而无法表达时会抛出length_error异常</p>
<h4 id="string类的字符操作："><a href="#string类的字符操作：" class="headerlink" title="string类的字符操作："></a>string类的字符操作：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n)<span class="keyword">const</span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> n)</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">char</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> n);</span><br><span class="line"><span class="function"><span class="keyword">char</span> &amp;<span class="title">at</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure>

<p>operator[]和at()均返回当前字符串中第n个字符的位置，但at函数提供范围检查，当越界时会抛出out_of_range异常，下标运算符[]不提供检查访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">data</span><span class="params">()</span><span class="keyword">const</span></span>;<span class="comment">//返回一个非null终止的c字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="title">c_str</span><span class="params">()</span><span class="keyword">const</span></span>;<span class="comment">//返回一个以null终止的c字符串</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> n, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//把当前串中以pos开始的n个字符拷贝到以s为起始位置的字符数组中，返回实际拷贝的数目</span></span><br></pre></td></tr></table></figure>

<h4 id="string的特性描述"><a href="#string的特性描述" class="headerlink" title="string的特性描述:"></a>string的特性描述:</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">capacity</span><span class="params">()</span><span class="keyword">const</span></span>;    <span class="comment">//返回当前容量（即string中不必增加内存即可存放的元素个数）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max_size</span><span class="params">()</span><span class="keyword">const</span></span>;    <span class="comment">//返回string对象中可存放的最大字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span><span class="keyword">const</span></span>;        <span class="comment">//返回当前字符串的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span><span class="keyword">const</span></span>;       <span class="comment">//返回当前字符串的长度</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span><span class="keyword">const</span></span>;        <span class="comment">//当前字符串是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> len,<span class="keyword">char</span> c)</span></span>;<span class="comment">//把字符串当前大小置为len，并用字符c填充不足的部分</span></span><br></pre></td></tr></table></figure>

<h4 id="string类的输入输出操作"><a href="#string类的输入输出操作" class="headerlink" title="string类的输入输出操作:"></a>string类的输入输出操作:</h4><p>string类重载运算符operator&gt;&gt;用于输入，同样重载运算符operator&lt;&lt;用于输出操作。<br>函数getline(istream &amp;in,string &amp;s);用于从输入流in中读取字符串到s中，以换行符’\n’分开。</p>
<h4 id="string的赋值："><a href="#string的赋值：" class="headerlink" title="string的赋值："></a>string的赋值：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> string &amp;s);<span class="comment">//把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;<span class="comment">//用c类型字符串s赋值</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>;<span class="comment">//用c字符串s开始的n个字符赋值</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> string &amp;s)</span></span>;<span class="comment">//把字符串s赋给当前字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> c)</span></span>;<span class="comment">//用n个字符c赋值给当前字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> start,<span class="keyword">int</span> n)</span></span>;<span class="comment">//把字符串s中从start开始的n个字符赋给当前字符串</span></span><br><span class="line"><span class="function">string &amp;<span class="title">assign</span><span class="params">(const_iterator first,const_itertor last)</span></span>;<span class="comment">//把first和last迭代器之间的部分赋给字符串</span></span><br></pre></td></tr></table></figure>

<h4 id="string的连接："><a href="#string的连接：" class="headerlink" title="string的连接："></a>string的连接：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string &amp;<span class="keyword">operator</span>+=(<span class="keyword">const</span> string &amp;s);<span class="comment">//把字符串s连接到当前字符串的结尾 </span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;            <span class="comment">//把c类型字符串s连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s,<span class="keyword">int</span> n)</span></span>;<span class="comment">//把c类型字符串s的前n个字符连接到当前字符串结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> string &amp;s)</span></span>;    <span class="comment">//同operator+=()</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos,<span class="keyword">int</span> n)</span></span>;<span class="comment">//把字符串s中从pos开始的n个字符连接到当前字符串的结尾</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> c)</span></span>;        <span class="comment">//在当前字符串结尾添加n个字符c</span></span><br><span class="line"><span class="function">string &amp;<span class="title">append</span><span class="params">(const_iterator first,const_iterator last)</span></span>;<span class="comment">//把迭代器first和last之间的部分连接到当前字符串的结尾 </span></span><br></pre></td></tr></table></figure>

<h4 id="string的比较："><a href="#string的比较：" class="headerlink" title="string的比较："></a>string的比较：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> string &amp;s1,<span class="keyword">const</span> string &amp;s2)<span class="keyword">const</span>;<span class="comment">//比较两个字符串是否相等</span></span><br></pre></td></tr></table></figure>

<p>运算符”&gt;”,”&lt;”,”&gt;=”,”&lt;=”,”!=”均被重载用于字符串的比较；</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> string &amp;s)</span> <span class="keyword">const</span></span>;<span class="comment">//比较当前字符串和s的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> string &amp;s)</span><span class="keyword">const</span></span>;<span class="comment">//比较当前字符串从pos开始的n个字符组成的字符串与s的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos2,<span class="keyword">int</span> n2)</span><span class="keyword">const</span></span>;<span class="comment">//比较当前字符串从pos开始的n个字符组成的字符串与s中pos2开始的n2个字符组成的字符串的大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> n,<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos2)</span> <span class="keyword">const</span></span>;</span><br></pre></td></tr></table></figure>

<p>compare函数在&gt;时返回1，&lt;时返回-1，==时返回0</p>
<h4 id="string的子串："><a href="#string的子串：" class="headerlink" title="string的子串："></a>string的子串：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">substr</span><span class="params">(<span class="keyword">int</span> pos = <span class="number">0</span>,<span class="keyword">int</span> n = npos)</span> <span class="keyword">const</span></span>;<span class="comment">//返回pos开始的n个字符组成的字符串</span></span><br></pre></td></tr></table></figure>

<h4 id="string的交换："><a href="#string的交换：" class="headerlink" title="string的交换："></a>string的交换：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(string &amp;s2)</span></span>;    <span class="comment">//交换当前字符串与s2的值</span></span><br></pre></td></tr></table></figure>

<h4 id="string类的查找函数："><a href="#string类的查找函数：" class="headerlink" title="string类的查找函数："></a>string类的查找函数：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//从pos开始查找字符c在当前字符串的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//从pos开始查找字符串s在当前串中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;<span class="comment">//从pos开始查找字符串s中前n个字符在当前串中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">const</span> string &amp;s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//从pos开始查找字符串s在当前串中的位置</span></span><br><span class="line"><span class="comment">//查找成功时返回所在位置，失败返回string::npos的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;<span class="comment">//从pos开始从后向前查找字符c在当前串中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rfind</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">//从pos开始从后向前查找字符串s中前n个字符组成的字符串在当前串中的位置，成功返回所在位置，失败时返回string::npos的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;<span class="comment">//从pos开始查找字符c第一次出现的位置</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_of</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">//从pos开始查找当前串中第一个在s的前n个字符组成的数组里的字符的位置。查找失败返回string::npos</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos,<span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_first_not_of</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos = <span class="number">0</span>)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">//从当前串中查找第一个不在串s中的字符出现的位置，失败返回string::npos</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_of</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> pos,  <span class="keyword">int</span> n)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find_last_not_of</span><span class="params">(<span class="keyword">const</span> string &amp;s,<span class="keyword">int</span> pos = npos)</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="comment">//find_last_of和find_last_not_of与find_first_of和find_first_not_of相似，只不过是从后向前查找</span></span><br></pre></td></tr></table></figure>

<h4 id="string类的替换函数："><a href="#string类的替换函数：" class="headerlink" title="string类的替换函数："></a>string类的替换函数：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;<span class="comment">//删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;<span class="comment">//删除p0开始的n0个字符，然后在p0处插入字符串s的前n个字符</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> string &amp;s)</span></span>;<span class="comment">//删除从p0开始的n0个字符，然后在p0处插入串s</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">const</span> string &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>;<span class="comment">//删除p0开始的n0个字符，然后在p0处插入串s中从pos开始的n个字符</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n0,<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;<span class="comment">//删除p0开始的n0个字符，然后在p0处插入n个字符c</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;<span class="comment">//把[first0，last0）之间的部分替换为字符串s</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;<span class="comment">//把[first0，last0）之间的部分替换为s的前n个字符</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">const</span> string &amp;s)</span></span>;<span class="comment">//把[first0，last0）之间的部分替换为串s</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,<span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;<span class="comment">//把[first0，last0）之间的部分替换为n个字符c</span></span><br><span class="line"><span class="function">string &amp;<span class="title">replace</span><span class="params">(iterator first0, iterator last0,const_iterator first, const_iterator last)</span></span>;<span class="comment">//把[first0，last0）之间的部分替换成[first，last）之间的字符串</span></span><br></pre></td></tr></table></figure>

<h4 id="string类的插入函数："><a href="#string类的插入函数：" class="headerlink" title="string类的插入函数："></a>string类的插入函数：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="keyword">char</span> *s)</span></span>;</span><br><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">const</span> <span class="keyword">char</span> *s, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0,<span class="keyword">const</span> string &amp;s)</span></span>;</span><br><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0,<span class="keyword">const</span> string &amp;s, <span class="keyword">int</span> pos, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="comment">//前4个函数在p0位置插入字符串s中pos开始的前n个字符</span></span><br><span class="line"><span class="function">string &amp;<span class="title">insert</span><span class="params">(<span class="keyword">int</span> p0, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;<span class="comment">//此函数在p0处插入n个字符c</span></span><br><span class="line"><span class="function">iterator <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">char</span> c)</span></span>;<span class="comment">//在it处插入字符c，返回插入后迭代器的位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator it, const_iterator first, const_iterator last)</span></span>;<span class="comment">//在it处插入[first，last）之间的字符</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(iterator it, <span class="keyword">int</span> n, <span class="keyword">char</span> c)</span></span>;<span class="comment">//在it处插入n个字符c</span></span><br><span class="line">s.<span class="built_in">push_back</span>(‘a<span class="number">&#x27;</span>);<span class="comment">//这个函数只能增加单个字符对STL熟悉的理解起来很简单</span></span><br></pre></td></tr></table></figure>

<h4 id="string类的删除函数："><a href="#string类的删除函数：" class="headerlink" title="string类的删除函数："></a>string类的删除函数：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator first, iterator last)</span></span>;<span class="comment">//删除[first，last）之间的所有字符，返回删除后迭代器的位置</span></span><br><span class="line"><span class="function">iterator <span class="title">erase</span><span class="params">(iterator it)</span></span>;<span class="comment">//删除it指向的字符，返回删除后迭代器的位置</span></span><br><span class="line"><span class="function">string &amp;<span class="title">erase</span><span class="params">(<span class="keyword">int</span> pos = <span class="number">0</span>, <span class="keyword">int</span> n = npos)</span></span>;<span class="comment">//删除pos开始的n个字符，返回修改后的字符串</span></span><br></pre></td></tr></table></figure>

<p>把字符串清空的方法有三个：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str=<span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">str=<span class="string">&quot;&quot;</span>;</span><br><span class="line">str.<span class="built_in">clear</span>();</span><br><span class="line">str.<span class="built_in">erase</span>();</span><br></pre></td></tr></table></figure>

<h4 id="string类的迭代器处理："><a href="#string类的迭代器处理：" class="headerlink" title="string类的迭代器处理："></a>string类的迭代器处理：</h4><p>string类提供了向前和向后遍历的迭代器iterator，迭代器提供了访问各个字符的语法，类似于指针操作，迭代器不检查范围。</p>
<p>用string::iterator或string::const_iterator声明迭代器变量，const_iterator不允许改变迭代的内容。常用迭代器函数有：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">const_iterator <span class="title">begin</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">begin</span><span class="params">()</span></span>;                <span class="comment">//返回string的起始位置</span></span><br><span class="line"><span class="function">const_iterator <span class="title">end</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">end</span><span class="params">()</span></span>;                    <span class="comment">//返回string的最后一个字符后面的位置</span></span><br><span class="line"><span class="function">const_iterator <span class="title">rbegin</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">rbegin</span><span class="params">()</span></span>;                <span class="comment">//返回string的最后一个字符的位置</span></span><br><span class="line"><span class="function">const_iterator <span class="title">rend</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="function">iterator <span class="title">rend</span><span class="params">()</span></span>;                    <span class="comment">//返回string第一个字符位置的前面</span></span><br></pre></td></tr></table></figure>

<p>rbegin和rend用于从后向前的迭代访问，通过设置迭代器string::reverse_iterator,string::const_reverse_iterator实现</p>
<h4 id="字符串流处理："><a href="#字符串流处理：" class="headerlink" title="字符串流处理："></a>字符串流处理：</h4><p>通过定义ostringstream和istringstream变量实现，头文件中<br>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">string <span class="title">input</span><span class="params">(<span class="string">&quot;hello,this is a test&quot;</span>)</span></span>;</span><br><span class="line"><span class="function">istringstream <span class="title">is</span><span class="params">(input)</span></span>;</span><br><span class="line">string s1,s2,s3,s4;</span><br><span class="line">is&gt;&gt;s1&gt;&gt;s2&gt;&gt;s3&gt;&gt;s4;<span class="comment">//s1=&quot;hello,this&quot;,s2=&quot;is&quot;,s3=&quot;a&quot;,s4=&quot;test&quot;</span></span><br><span class="line">ostringstream os;</span><br><span class="line">os&lt;&lt;s1&lt;&lt;s2&lt;&lt;s3&lt;&lt;s4;</span><br><span class="line">cout&lt;&lt;os.<span class="built_in">str</span>();</span><br></pre></td></tr></table></figure>

<h4 id="C-中要从string中删除所有某个特定字符-可用如下代码："><a href="#C-中要从string中删除所有某个特定字符-可用如下代码：" class="headerlink" title="C++中要从string中删除所有某个特定字符, 可用如下代码："></a>C++中要从string中删除所有某个特定字符, 可用如下代码：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> <span class="comment">//要包含这个头文件</span></span></span><br><span class="line">str.<span class="built_in">erase</span>(std::<span class="built_in">remove</span>(str.<span class="built_in">begin</span>(), str.<span class="built_in">end</span>(), <span class="string">&#x27;a&#x27;</span>), str.<span class="built_in">end</span>());</span><br></pre></td></tr></table></figure>

<h4 id="string类型转为int类型："><a href="#string类型转为int类型：" class="headerlink" title="string类型转为int类型："></a>string类型转为int类型：</h4><p>1.使用标准库中的atoi函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string str=<span class="string">&#x27;111&#x27;</span></span><br><span class="line">number = <span class="built_in">atoi</span>(str.<span class="built_in">c_str</span>());</span><br></pre></td></tr></table></figure>

<p>对于其他类型也都有相应的标准库函数，比如浮点型atof()，long型atol()</p>
<p>2.采用sstream头文件中定义的字符串流对象来实现转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">istringstream <span class="title">is</span><span class="params">(<span class="string">&quot;12&quot;</span>)</span></span>; <span class="comment">//构造输入字符串流，流的内容初始化为“12”的字符串 </span></span><br><span class="line"><span class="keyword">int</span> i; </span><br><span class="line">is &gt;&gt; i; <span class="comment">//从is流中读入一个int整数存入i中</span></span><br></pre></td></tr></table></figure>

<h4 id="int类型转为string类型："><a href="#int类型转为string类型：" class="headerlink" title="int类型转为string类型："></a>int类型转为string类型：</h4><p>1.采用标准库中的to_string函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">12</span>; </span><br><span class="line">cout &lt;&lt; std::<span class="built_in">to_string</span>(i) &lt;&lt; endl; </span><br></pre></td></tr></table></figure>

<p>2.采用sstream中定义的字符串流对象来实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ostringstream os; <span class="comment">//构造一个输出字符串流，流内容为空 </span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">12</span>; </span><br><span class="line">os &lt;&lt; i; <span class="comment">//向输出字符串流中输出int整数i的内容 </span></span><br><span class="line">cout &lt;&lt; os.<span class="built_in">str</span>() &lt;&lt; endl; <span class="comment">//利用字符串流的str函数获取流中的内容 </span></span><br></pre></td></tr></table></figure>

<p>字符串流对象的str函数对于istringstream和ostringstream都适用，都可以获取流中的内容。</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言--螺旋矩阵--蛇形矩阵--数独</title>
    <url>/2020/11/12/C%E8%AF%AD%E8%A8%80-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5-%E8%9B%87%E5%BD%A2%E7%9F%A9%E9%98%B5-%E6%95%B0%E7%8B%AC/</url>
    <content><![CDATA[<h2 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h2><h4 id="一、在n×n矩阵里填入1-2-3-…-n-n，要求："><a href="#一、在n×n矩阵里填入1-2-3-…-n-n，要求：" class="headerlink" title="一、在n×n矩阵里填入1,2,3,…,n*n，要求："></a>一、在n×n矩阵里填入1,2,3,…,n*n，要求：</h4><span id="more"></span>

<h5 id="1-填成螺旋矩阵"><a href="#1-填成螺旋矩阵" class="headerlink" title="1.填成螺旋矩阵"></a>1.填成螺旋矩阵</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">2</span>   <span class="number">3</span>    <span class="number">4</span></span><br><span class="line"><span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span>   <span class="number">5</span></span><br><span class="line"><span class="number">11</span>  <span class="number">16</span>  <span class="number">15</span>   <span class="number">6</span></span><br><span class="line"><span class="number">10</span>  <span class="number">9</span>   <span class="number">8</span>    <span class="number">7</span></span><br></pre></td></tr></table></figure>

<h5 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="comment">//输入行列数</span></span><br><span class="line">	<span class="comment">//动态申请n行n列的二维数组，如果觉得麻烦根据题目要求申请足够大的也行</span></span><br><span class="line">	<span class="keyword">int</span>** num = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		num[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">	<span class="comment">//我们接下来的思路就是一圈一圈往中心填数字，数字是逐渐递增的，用count来表示，初始值为1，结束时为n*n</span></span><br><span class="line">	<span class="keyword">int</span> start = <span class="number">0</span>, finish = n - <span class="number">1</span>, count = <span class="number">1</span>; <span class="comment">//start指当前行列最小值，finish指当前行列最大值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (count &lt;= n * n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//找到题目里1开始的位置，我们开始，根据count增加的方向走</span></span><br><span class="line">		<span class="comment">//每一圈的规律都是一样的，结束的标志就是count达到了指定的大小</span></span><br><span class="line">		<span class="keyword">for</span> (j = start; j &lt;= finish; j++) <span class="comment">//从左向右，列增行不变</span></span><br><span class="line">			num[start][j] = count++;</span><br><span class="line">		<span class="keyword">for</span> (i = start + <span class="number">1</span>; i &lt;= finish; i++) <span class="comment">//从上到下，行增列不变</span></span><br><span class="line">			num[i][finish] = count++;</span><br><span class="line">		<span class="keyword">for</span> (j = finish - <span class="number">1</span>; j &gt;= start; j--) <span class="comment">//从右往左，列减行不变</span></span><br><span class="line">			num[finish][j] = count++;</span><br><span class="line">		<span class="keyword">for</span> (i = finish - <span class="number">1</span>; i &gt;= start + <span class="number">1</span>; i--) <span class="comment">//从下向上，行减列不变</span></span><br><span class="line">			num[i][start] = count++;</span><br><span class="line">		start++; finish--; <span class="comment">//缩圈，行列的最小值加1，最大值减1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//输出</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-5d&quot;</span>, num[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//最后记得释放掉申请的内存</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">free</span>(num[i]);</span><br><span class="line">	<span class="built_in">free</span>(num);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2-填成蛇形矩阵"><a href="#2-填成蛇形矩阵" class="headerlink" title="2.填成蛇形矩阵"></a>2.填成蛇形矩阵</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>   <span class="number">2</span>   <span class="number">6</span>   <span class="number">7</span></span><br><span class="line"><span class="number">3</span>   <span class="number">5</span>   <span class="number">8</span>   <span class="number">13</span></span><br><span class="line"><span class="number">4</span>   <span class="number">9</span>   <span class="number">12</span>  <span class="number">14</span></span><br><span class="line"><span class="number">10</span>  <span class="number">11</span>  <span class="number">15</span>  <span class="number">16</span></span><br></pre></td></tr></table></figure>

<h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, count = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>** num = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		num[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">	i = j = <span class="number">0</span>;</span><br><span class="line">	num[i][j] = count++;<span class="comment">//为num[0][0]赋值1</span></span><br><span class="line">	<span class="keyword">while</span> (count &lt;= n * n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//if-else语句判断是横着走一个还是竖着走一个，并赋值</span></span><br><span class="line">		<span class="keyword">if</span> (j &lt; n - <span class="number">1</span>) j++;</span><br><span class="line">		<span class="keyword">else</span> i++;</span><br><span class="line">		num[i][j] = count++;</span><br><span class="line">		<span class="keyword">while</span> (i &lt; n - <span class="number">1</span> &amp;&amp; j&gt;<span class="number">0</span>)<span class="comment">//斜向下走，直到走到头</span></span><br><span class="line">		&#123;</span><br><span class="line">			i++;</span><br><span class="line">			j--;</span><br><span class="line">			num[i][j] = count++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//if-else语句判断是横着走还是竖着走，并赋值</span></span><br><span class="line">		<span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) i++;</span><br><span class="line">		<span class="keyword">else</span> j++;</span><br><span class="line">		num[i][j] = count++;</span><br><span class="line">		<span class="keyword">while</span> (i &gt; <span class="number">0</span> &amp;&amp; j &lt; n - <span class="number">1</span>)<span class="comment">//斜向上走，走到头</span></span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">			j++;</span><br><span class="line">			num[i][j] = count++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-5d&quot;</span>, num[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">free</span>(num[i]);</span><br><span class="line">	<span class="built_in">free</span>(num);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-将要求1中的螺旋矩阵顺时针旋转90度"><a href="#3-将要求1中的螺旋矩阵顺时针旋转90度" class="headerlink" title="3.将要求1中的螺旋矩阵顺时针旋转90度"></a>3.将要求1中的螺旋矩阵顺时针旋转90度</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">1</span></span><br><span class="line"><span class="number">9</span>   <span class="number">16</span>  <span class="number">13</span>  <span class="number">2</span></span><br><span class="line"><span class="number">8</span>   <span class="number">15</span>  <span class="number">14</span>  <span class="number">3</span></span><br><span class="line"><span class="number">7</span>   <span class="number">6</span>   <span class="number">5</span>   <span class="number">4</span> </span><br></pre></td></tr></table></figure>

<h5 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n); <span class="comment">//输入行列数</span></span><br><span class="line">	<span class="comment">//动态申请n行n列的二维数组，如果觉得麻烦根据题目要求申请足够大的也行</span></span><br><span class="line">	<span class="keyword">int</span>** num = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		num[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">	<span class="comment">//我们接下来的思路就是一圈一圈往中心填数字，数字是逐渐递增的，用count来表示，初始值为1，结束时为n*n</span></span><br><span class="line">	<span class="keyword">int</span> start = <span class="number">0</span>, finish = n - <span class="number">1</span>, count = <span class="number">1</span>; <span class="comment">//start指当前行列最小值，finish指当前行列最大值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (count &lt;= n * n)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//找到题目里1开始的位置，我们开始，根据count增加的方向走</span></span><br><span class="line">		<span class="comment">//每一圈的规律都是一样的，结束的标志就是count达到了指定的大小</span></span><br><span class="line">		<span class="keyword">for</span> (i = start; i &lt;= finish; i++) <span class="comment">//从上到下，行增列不变</span></span><br><span class="line">			num[i][finish] = count++;</span><br><span class="line">		<span class="keyword">for</span> (j = finish - <span class="number">1</span>; j &gt;= start; j--) <span class="comment">//从右往左，列减行不变</span></span><br><span class="line">			num[finish][j] = count++;</span><br><span class="line">		<span class="keyword">for</span> (i = finish - <span class="number">1</span>; i &gt;= start + <span class="number">1</span>; i--) <span class="comment">//从下向上，行减列不变</span></span><br><span class="line">			num[i][start] = count++;</span><br><span class="line">		<span class="keyword">for</span> (j = start; j &lt;= finish - <span class="number">1</span>; j++) <span class="comment">//从左向右，列增行不变</span></span><br><span class="line">			num[start][j] = count++;</span><br><span class="line">		start++; finish--; <span class="comment">//缩圈，行列的最小值加1，最大值减1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//输出</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-5d&quot;</span>, num[i][j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//最后记得释放掉申请的内存</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">free</span>(num[i]);</span><br><span class="line">	<span class="built_in">free</span>(num);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="二、将1-n×n-填入n行n列的方阵中，要求每行每列每条对角线上的数值求和相等（保证n一定为奇数）。"><a href="#二、将1-n×n-填入n行n列的方阵中，要求每行每列每条对角线上的数值求和相等（保证n一定为奇数）。" class="headerlink" title="二、将1-n×n 填入n行n列的方阵中，要求每行每列每条对角线上的数值求和相等（保证n一定为奇数）。"></a>二、将1-n×n 填入n行n列的方阵中，要求每行每列每条对角线上的数值求和相等（保证n一定为奇数）。</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, s = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(n * n * <span class="number">4</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			*(p + i * n + j) = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	s = <span class="number">1</span>;</span><br><span class="line">	i = <span class="number">0</span>;</span><br><span class="line">	j = (n - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">	*(p + i * n + j) = s;</span><br><span class="line">	<span class="keyword">for</span> (s = <span class="number">2</span>; s &lt;= n * n; s++)</span><br><span class="line">	&#123;</span><br><span class="line">		i--; j++;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; <span class="number">0</span> &amp;&amp; j &lt;= n - <span class="number">1</span>)<span class="comment">//越过上边界，且没有超过右边界</span></span><br><span class="line">		&#123;</span><br><span class="line">			i = n - <span class="number">1</span>; *(p + i * n + j) = s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (j &gt; n - <span class="number">1</span> &amp;&amp; i &gt;= <span class="number">0</span>)<span class="comment">//超过右边界，且没有超过上边界</span></span><br><span class="line">		&#123;</span><br><span class="line">			j = <span class="number">0</span>; *(p + i * n + j) = s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> &lt;= i &amp;&amp; i &lt;= n - <span class="number">1</span> &amp;&amp; <span class="number">0</span> &lt;= j &amp;&amp; j &lt;= n - <span class="number">1</span> &amp;&amp; *(p + i * n + j) != <span class="number">0</span>)<span class="comment">//在数组之内，且右上角有值</span></span><br><span class="line">		&#123;</span><br><span class="line">			i = i + <span class="number">2</span>; j--; *(p + i * n + j) = s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i &lt; <span class="number">0</span> &amp;&amp; j&gt;n - <span class="number">1</span>)<span class="comment">//既越过上边界，也越过右边界</span></span><br><span class="line">		&#123;</span><br><span class="line">			i = i + <span class="number">2</span>; j--; *(p + i * n + j) = s;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			*(p + i * n + j) = s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-5d&quot;</span>, *(p + i * n + j));</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/09/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>堆栈的链式表示和实现</title>
    <url>/2021/11/12/%E5%A0%86%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="栈的链式表示和实现："><a href="#栈的链式表示和实现：" class="headerlink" title="栈的链式表示和实现："></a>栈的链式表示和实现：</h4><p>编写一个程序实现链栈（带头节点）的各种基本运算，并在此基础上设计一个主程序，完成如下功能：</p>
<ol>
<li>初始化链栈</li>
<li>入栈</li>
<li>出栈</li>
<li>判断栈是否为空</li>
<li>获取链栈长度</li>
<li>取栈顶元素</li>
<li>遍历链栈</li>
<li>链栈置空</li>
</ol>
<span id="more"></span>

<h4 id="代码（C语言）："><a href="#代码（C语言）：" class="headerlink" title="代码（C语言）："></a>代码（C语言）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*链栈的实现及常用操作测试*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*链栈的数据结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; Node, * LinkStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明列表*/</span></span><br><span class="line"><span class="function">LinkStack <span class="title">InitLinkStack</span><span class="params">()</span></span>;                       <span class="comment">//1 初始化链栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(LinkStack S)</span></span>;                     <span class="comment">//2 判断链栈是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(LinkStack S)</span></span>;                    <span class="comment">//3 获取链栈长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PushLinkStack</span><span class="params">(LinkStack S, ElemType e)</span></span>;      <span class="comment">//4 入栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PopLinkStack</span><span class="params">(LinkStack S, ElemType* e)</span></span>;      <span class="comment">//5 出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLinkStack</span><span class="params">(LinkStack S)</span></span>;                <span class="comment">//6 遍历栈（从栈顶到栈底）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearLinkStack</span><span class="params">(LinkStack S)</span></span>;                <span class="comment">//7 链栈置空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTopLinkStack</span><span class="params">(LinkStack S, ElemType* e)</span></span>;   <span class="comment">//8 取栈顶元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	ElemType e;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;初始化链栈成功！\n&quot;</span>);</span><br><span class="line">	LinkStack S = InitLinkStack();</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n执行9次入栈操作！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		PushLinkStack(S, i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;执行完毕！当前栈长度为：%d\n打印当前栈：&quot;</span>, StackLength(S));</span><br><span class="line">	PrintLinkStack(S);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n执行4次出栈操作！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		PopLinkStack(S, &amp;e);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%d次：栈顶元素%d出栈成功！\n&quot;</span>, i + <span class="number">1</span>, e);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;执行完毕！当前栈长度为：%d\n打印当前栈：&quot;</span>, StackLength(S));</span><br><span class="line">	PrintLinkStack(S);</span><br><span class="line">	GetTopLinkStack(S, &amp;e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n执行取栈顶元素操作：当前栈顶元素为：%d\n&quot;</span>, e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n执行清空栈操作！\n&quot;</span>);</span><br><span class="line">	ClearLinkStack(S);</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="built_in">printf</span>(<span class="string">&quot;执行完毕！当前栈为空！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;清空栈失败！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数实现部分*/</span></span><br><span class="line"><span class="comment">/*【功能1 初始化链栈（带头结点的链栈）】*/</span></span><br><span class="line"><span class="function">LinkStack <span class="title">InitLinkStack</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkStack S = (LinkStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	S-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能2 判断链栈是否为空】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(LinkStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> S-&gt;next == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能3 获取链栈长度】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(LinkStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Node* p = S-&gt;next;	<span class="comment">// 带头结点的链栈要先移动一下</span></span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		len++;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能4 入栈】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PushLinkStack</span><span class="params">(LinkStack S, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">// 分配入栈结点</span></span><br><span class="line">	Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!newNode) <span class="keyword">return</span> <span class="number">0</span>;		<span class="comment">// 结点分配失败</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 跟单链表一样使用头插法</span></span><br><span class="line">	newNode-&gt;data = e;</span><br><span class="line">	newNode-&gt;next = S-&gt;next;</span><br><span class="line">	S-&gt;next = newNode;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//入栈成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能5 出栈】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">PopLinkStack</span><span class="params">(LinkStack S, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//栈空则出栈失败</span></span><br><span class="line">	Node* top = S-&gt;next;	<span class="comment">//访问栈顶结点</span></span><br><span class="line">	*e = top-&gt;data;	        <span class="comment">//取出栈顶元素</span></span><br><span class="line">	S-&gt;next = top-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(top);			    <span class="comment">//释放栈顶空间</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;               <span class="comment">//出栈成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能6 遍历栈（从栈顶到栈底）】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintLinkStack</span><span class="params">(LinkStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node* p = S-&gt;next; <span class="comment">//遍历时从首元素节点开始</span></span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能7 链栈置空】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearLinkStack</span><span class="params">(LinkStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node* p = S-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		Node* q = p;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		<span class="built_in">free</span>(q);</span><br><span class="line">	&#125;</span><br><span class="line">	S-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能8 取栈顶元素】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTopLinkStack</span><span class="params">(LinkStack S, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (StackEmpty(S)) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果为空栈则返回0，代表取栈顶元素失败</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		*e = S-&gt;next-&gt;data;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//返回1代表取栈顶元素成功，栈顶元素保存在e中</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>堆栈的顺序表示和实现</title>
    <url>/2021/11/11/%E5%A0%86%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="栈的顺序表示和实现："><a href="#栈的顺序表示和实现：" class="headerlink" title="栈的顺序表示和实现："></a>栈的顺序表示和实现：</h4><p>编写一个程序实现顺序栈（可动态增长容量）的各种基本运算，并在此基础上设计一个主程序，完成如下功能：</p>
<ol>
<li>初始化顺序栈</li>
<li>入栈</li>
<li>出栈</li>
<li>取栈顶元素</li>
<li>遍历顺序栈</li>
<li>清空顺序栈</li>
<li>销毁栈</li>
<li>判断栈空</li>
<li>求栈的长度</li>
<li>利用栈实现进制转换</li>
</ol>
<span id="more"></span>

<h4 id="代码（C语言）："><a href="#代码（C语言）：" class="headerlink" title="代码（C语言）："></a>代码（C语言）：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*顺序栈的实现及常用操作测试*/</span></span><br><span class="line"><span class="comment">/*top为指针且指向栈顶元素的下一个位置*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREMENT 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*栈的数据结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SqStack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* base; <span class="comment">//栈底指针</span></span><br><span class="line">	ElemType* top;  <span class="comment">//栈顶指针</span></span><br><span class="line">	<span class="keyword">int</span> StackSize;  <span class="comment">//栈的容量</span></span><br><span class="line">&#125; SqStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitStack</span><span class="params">(SqStack* S)</span></span>;               <span class="comment">//1  栈的初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryStack</span><span class="params">(SqStack* S)</span></span>;           <span class="comment">//2  销毁栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(SqStack* S)</span></span>;             <span class="comment">//3  清空栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>;               <span class="comment">//4  判断是否栈空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span>;              <span class="comment">//5  获取栈的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTopStack</span><span class="params">(SqStack S, ElemType* e)</span></span>; <span class="comment">//6  获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SqStack* S, ElemType e)</span></span>;        <span class="comment">//7  入栈</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack* S, ElemType* e)</span></span>;        <span class="comment">//8  出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintStack</span><span class="params">(SqStack S)</span></span>;              <span class="comment">//9  遍历并输出栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Conversion</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> r)</span></span>;           <span class="comment">//10 利用栈实现进制转换</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	ElemType e;</span><br><span class="line">	<span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">InitStack</span>(&amp;S); <span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;初始化成功！\n执行10次入栈操作：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		e = <span class="built_in">rand</span>() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%-2d次：元素%d入栈\n&quot;</span>, i + <span class="number">1</span>, e);</span><br><span class="line">		<span class="built_in">Push</span>(&amp;S, e); <span class="comment">//入栈</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n打印当前栈：&quot;</span>);</span><br><span class="line">	<span class="built_in">PrintStack</span>(S); <span class="comment">//遍历并打印</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n执行5次出栈操作：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">Pop</span>(&amp;S, &amp;e) == <span class="number">1</span>) <span class="comment">//出栈</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;第%d次：出栈元素是%d\t打印当前栈：&quot;</span>, i + <span class="number">1</span>, e);</span><br><span class="line">			<span class="built_in">PrintStack</span>(S); <span class="comment">//遍历并打印</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">GetTopStack</span>(S, &amp;e); <span class="comment">//取栈顶元素</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n取栈顶元素，当前栈顶元素为%d\n&quot;</span>, e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前栈长度为%d\n&quot;</span>, <span class="built_in">StackLength</span>(S));</span><br><span class="line">	<span class="built_in">DestoryStack</span>(&amp;S);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;销毁栈后S.top=%p  S.base=%p  S.StackSize=%d\n&quot;</span>, S.top, S.base, S.StackSize);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n栈的应用——进制转换测试：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> N = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入要转换的十进制整数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入要转换到的数制：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;r);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;转换后为：&quot;</span>);</span><br><span class="line">	<span class="built_in">Conversion</span>(N, r);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数实现部分*/</span></span><br><span class="line"><span class="comment">/*【功能1 栈的初始化】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S-&gt;base = (ElemType*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(ElemType) * INITSIZE);</span><br><span class="line">	<span class="keyword">if</span> (!S-&gt;base) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//存储分配失败则返回0</span></span><br><span class="line">	S-&gt;top = S-&gt;base;</span><br><span class="line">	S-&gt;StackSize = INITSIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//分配成功返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能2 销毁栈】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">free</span>(S-&gt;base); <span class="comment">//释放栈</span></span><br><span class="line">		S-&gt;top = S-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">		S-&gt;StackSize = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能3 清空栈】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearStack</span><span class="params">(SqStack* S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S-&gt;top = S-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能4 判断是否栈空】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能5 获取栈的长度】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StackLength</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((S.base != <span class="literal">NULL</span>) &amp;&amp; (S.top != <span class="literal">NULL</span>)) <span class="keyword">return</span> S.top - S.base;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能6 获取栈顶元素】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetTopStack</span><span class="params">(SqStack S, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (S.top &gt; S.base)</span><br><span class="line">	&#123;</span><br><span class="line">		*e = *(S.top - <span class="number">1</span>); <span class="comment">//用*e接收栈顶元素的值</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//成功则返回1</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//失败则返回0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能7 入栈】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Push</span><span class="params">(SqStack* S, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//首先 判断栈满没有  如果满了就增量分配</span></span><br><span class="line">	<span class="keyword">if</span> (S-&gt;top - S-&gt;base &gt;= S-&gt;StackSize)</span><br><span class="line">	&#123;</span><br><span class="line">		S-&gt;base = (ElemType*)<span class="built_in">realloc</span>(S-&gt;base, (S-&gt;StackSize + INCREMENT) * <span class="built_in"><span class="keyword">sizeof</span></span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!S-&gt;base) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//增量分配失败则返回0</span></span><br><span class="line">		S-&gt;top = S-&gt;base + S-&gt;StackSize; <span class="comment">//修改栈顶指针</span></span><br><span class="line">		S-&gt;StackSize += INCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	*(S-&gt;top++) = e;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//入栈成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能8 出栈】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Pop</span><span class="params">(SqStack* S, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//首先，判断栈是不是空的，如果是空的则返回0</span></span><br><span class="line">	<span class="keyword">if</span> (S-&gt;top == S-&gt;base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	*e = *(--S-&gt;top); <span class="comment">//将栈顶元素赋给e，栈顶指针下移</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//出栈成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能9 遍历并输出栈（从栈顶到栈底）】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintStack</span><span class="params">(SqStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (S.top &gt; S.base) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(--S.top));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能10 利用栈实现进制转换】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Conversion</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqStack S;</span><br><span class="line">	ElemType x;</span><br><span class="line">	<span class="built_in">InitStack</span>(&amp;S);</span><br><span class="line">	<span class="keyword">while</span> (N)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Push</span>(&amp;S, N % r);</span><br><span class="line">		N = N / r;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!<span class="built_in">StackEmpty</span>(S))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">Pop</span>(&amp;S, &amp;x);</span><br><span class="line">		<span class="keyword">if</span> (x &gt;= <span class="number">10</span>) <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x + <span class="number">55</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>求一个正整数的因子个数</title>
    <url>/2021/09/27/%E6%B1%82%E4%B8%80%E4%B8%AA%E6%AD%A3%E6%95%B4%E6%95%B0%E7%9A%84%E5%9B%A0%E5%AD%90%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[<p>快速计算正整数N的因子个数：</p>
<span id="more"></span>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span> <span class="comment">//计算并返回正整数n的因子个数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i * i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			ans++;</span><br><span class="line">			<span class="keyword">if</span> (i * i != n) ans++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; N;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">f</span>(N) &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关例题："><a href="#相关例题：" class="headerlink" title="相关例题："></a>相关例题：</h4><p>给定正整数 N，求一共有多少组 (A,B,C) 满足 A×B+C=N。<br>其中 1≤A,B,C≤N 且为正整数，注意 (1,2,1) 和 (2,1,1) 不相同。<br>时间限制：300ms</p>
<h4 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h4><p>一行，一个正整数 N (1≤N≤10<sup>6</sup>)。</p>
<h4 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h4><p>一行，一个整数，表示答案。</p>
<h4 id="输入样例1："><a href="#输入样例1：" class="headerlink" title="输入样例1："></a>输入样例1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例1："><a href="#输出样例1：" class="headerlink" title="输出样例1："></a>输出样例1：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h4 id="输入样例2："><a href="#输入样例2：" class="headerlink" title="输入样例2："></a>输入样例2：</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure>

<h4 id="输出样例2："><a href="#输出样例2：" class="headerlink" title="输出样例2："></a>输出样例2：</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">473</span></span><br></pre></td></tr></table></figure>

<h4 id="题解："><a href="#题解：" class="headerlink" title="题解："></a>题解：</h4><h5 id="C语言实现："><a href="#C语言实现：" class="headerlink" title="C语言实现："></a>C语言实现：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0</span>, i = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line">    <span class="keyword">while</span> (N--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i * i &lt;= N; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (N % i == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                <span class="keyword">if</span> (i * i != N) ans++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更快的算法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,n,ans=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>; i&lt;n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		ans+=n/i;</span><br><span class="line">		<span class="keyword">if</span>(n%i==<span class="number">0</span>)</span><br><span class="line">			ans--;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>滕王阁序</title>
    <url>/2021/11/14/%E6%BB%95%E7%8E%8B%E9%98%81%E5%BA%8F/</url>
    <content><![CDATA[<p>　　豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</p>
<span id="more"></span>

<p>　　时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿；临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。</p>
<p>　　披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨；雁阵惊寒，声断衡阳之浦。</p>
<p>　　遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人？萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？</p>
<p>　　嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</p>
<p>　　勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p>
<p>　　呜乎！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔：</p>
<p>　　滕王高阁临江渚，佩玉鸣鸾罢歌舞。</p>
<p>　　画栋朝飞南浦云，珠帘暮卷西山雨。</p>
<p>　　闲云潭影日悠悠，物换星移几度秋。</p>
<p>　　阁中帝子今何在？槛外长江空自流。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>写给幸福</title>
    <url>/2021/11/13/%E7%88%B1%E6%83%85/</url>
    <content><![CDATA[<p>　　其实分别也没有这么可怕。65万个小时后，当我们氧化成风，就能变成同一杯啤酒上两朵相邻的泡沫，就能变成同一盏路灯下两粒依偎的尘埃。宇宙中的原子并不会湮灭，而我们，也终究会在一起。</p>
<span id="more"></span>

<h4 id="【翠鸟】"><a href="#【翠鸟】" class="headerlink" title="【翠鸟】"></a>【翠鸟】</h4><p>　　夏日午后，一只小翠鸟飞进了我的庭园，停在玫瑰花树上。我正在园里拔除杂草，因为有棵夜百合花挡在前面，所以小翠鸟没看见我，就放心大胆地啄食起那些玫瑰枝上刚刚长出的叶芽来了。</p>
<p>　　我被那一身碧绿光洁的羽毛震慑住了，屏息躲在树后，心里面轻轻地向小鸟说：”小翠鸟啊，请你尽量吃吧。只求你能多停留一会儿，只求你不要太快飞走。”</p>
<p>　　原来在片刻之前还是我最珍惜的那几棵玫瑰花树，现在已经变得毫不重要了。只因为，嫩芽以后还能再生长，而这只小翠鸟也许一生中只会飞来我的庭园一次。</p>
<p>　　面对起这一种绝对的美丽，我实在无力抗拒，我愿意献出我的一切来换得它片刻的停留。</p>
<p>　　对你，我也一直是如此。</p>
<h4 id="【喜鹊】"><a href="#【喜鹊】" class="headerlink" title="【喜鹊】"></a>【喜鹊】</h4><p>　　在素描教室上课的时候，我者见两只黑色的大鸟从窗前飞掠而过。</p>
<p>　　我问学生那是什么?他们回答我说：</p>
<p>　　“那不就是我们学校里的喜鹊吗?”</p>
<p>　　素描教室在美术馆的三楼，周围有好几棵高大的尤加利和木麻黄，茂密的枝叶里藏着很多鸟雀，那几只喜鹊也住在上面。</p>
<p>　　有好几年了，它们一直把我们的校园当成了自己的家。除了在高高的树梢上鸣叫飞旋之外，下雨天的时候，常会看见它们成双成对地在铺着绿草的田径场上慢步走着。好大的黑鸟，翅膀上镶着白色的边，走在地上脚步蹒跚、远远看去，竟然有点像是鸭子。</p>
<p>　　有一阵子，学校想重新规划校园，那些种了三十年的木麻黄与尤加利都在砍除之列。校工在每一课要砍掉的树干上都用粉笔画了记号。站在校园里，我像进入了阿里巴巴的童话之中，发现每一棵美丽的树上都被画上了印记，心里惶急无比，头一个问题就是：</p>
<p>　　“把这些树都砍掉了的话，要让喜鹊以后住在那里?”</p>
<p>　　幸好，计划并没有付诸实现，大家最后都同意，要把这些大树尽量保留起来。因此，在建造美术馆的时侯，所有沿墙的大树都被小心翼翼地留了下来，三层的大楼盖好之后，我们才能和所有的雀鸟们一起分享那些树梢上的阳光和雨露。</p>
<p>　　上课的时候，窗外的喜鹊不断展翅飞旋，窗内的师生彼此交换着会心的微笑。原来雀鸟的要求并不高，只要我们肯留下几棵树，只要我们不去给它们以无谓的惊扰，美丽的雀鸟就会安心地停留下来，停留在我们的身边。</p>
<p>　　而你呢?你也是这样的吗?</p>
<h4 id="【独木】"><a href="#【独木】" class="headerlink" title="【独木】"></a>【独木】</h4><p>　　喜欢坐火车，喜欢一站一站的慢慢南下或者北上，喜欢在旅途中间的我。</p>
<p>　　只因为，在旅途的中间，我就可以不属于起点或者终点，不属于任何地方和任何人，在这个单独的时刻里，我只需要属于我自己就够了。</p>
<p>　　所有该尽的义务，该背负的责任，所有该去争夺或是退让的事物，所有人世间的牵牵绊绊都被隔在铁轨的两端，而我，在车厢里的我是无所欲求的。在那个时刻里，我唯一要做也唯一可做的事，只是安静地坐在窗边，观看着窗外景物的交换而已。</p>
<p>　　窗外景物不断在变换，山峦与河谷绵延而过，我看见在那些成林的树丛里，每一棵树都长得又细又长，为了争取阳光，它们用尽一切委婉的方法来生长。走过一大片稻田，在田野的中间，我也看见了一棵孤独的树，因为孤独，所以能恣意地伸展着枝叶，长得像一把又大又粗又圆的伞。</p>
<p>　　在现实生活里，我知道，我应该学习迁就与忍让，就像那些密林中的树木一样。可是，在心灵的原野上，请让我，让我能长成为一棵广受日照的大树。</p>
<p>　　我也知道，在这之前，我必须先要学习独立，在心灵最深处，学习着不向任何人寻求依附。</p>
<h4 id="【白帆】"><a href="#【白帆】" class="headerlink" title="【白帆】"></a>【白帆】</h4><p>　　可是，我如何能做到呢?如何能不寻求依附?在我的心里，不是一直有着你吗?</p>
<p>　　你是一艘小小的张着白帆的船，停泊在我心中一个永不改变的港湾。</p>
<p>　　我对你永远有着一份期待和盼望。</p>
<p>　　在年轻的时候，在那些充满了阳光的长长的下午，我无所事事，也无所怕惧，只因为我知道，在我的生命里，有一种永远的等待。挫折会来，也会过去，热泪会流下，也会收起，没有什么可以让我气馁的，因为，我有着长长的一生，而你，你一定会来。</p>
<p>　　今天，阳光仍在，我已走到中途。在曲折颠沛的道路上，我一直没有歇息，只敢偶尔停顿一下，想你，寻你，等你。</p>
<p>　　雾从我身后轻轻涌来，目光淡去，想你也许会来，也许不会，开始害怕了。</p>
<p>　　也开始对一切美丽的事物怜爱珍惜。不管是对一只小小的翠鸟，或是对那结伴飞旋的喜鹊;不管是对着一颗年轻喜乐的心，或是对着一棵亭亭如华盖的树;我总会认真地在那里面寻你，想你也许会在，怕你也许已经来过了，而我没有察觉。</p>
<p>　　日子在盼望与等待中过去，总觉得你好像已经来过了又好像始终还没有来，你到底在什么地方呢?你到底是一种什么模样呢?</p>
<p>　　总有一天，我也会像所有的人一样老去的吧?总有一天，我此刻还柔软光洁的发丝也会全部转成银白，总有一天，我会面对着一种无法转寰的绝境与尽头;而在那个时候，能让我含着泪微笑地想起的的，大概也就只有你只是你了吧?</p>
<p>　　还有那一艘我从来不曾真正靠近过的，那小小的张着白帆的船。</p>
]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>线性表的顺序存储及运算的实现</title>
    <url>/2021/09/27/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E5%8F%8A%E8%BF%90%E7%AE%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<p>关于顺序表的实现及相关操作：</p>
<span id="more"></span>

<h3 id="一、线性表的顺序存储"><a href="#一、线性表的顺序存储" class="headerlink" title="一、线性表的顺序存储"></a>一、线性表的顺序存储</h3><h4 id="1、线性表的顺序存储原理"><a href="#1、线性表的顺序存储原理" class="headerlink" title="1、线性表的顺序存储原理"></a>1、线性表的顺序存储原理</h4><p>线性表的顺序存储（Sequential Mapping，简称顺序表），是指用一组地址连续的存储单元按线性表元素之间的逻辑顺序，依次存储线性表的数据元素。数据元素的逻辑顺序和物理上的存储顺序是完全一致的，物理上存放在位置 i 的元素，就是按照逻辑顺序存储时的第 i 个元素。因此在顺序存储结构下不需要另外建立空间来记录各个元素之间的关系。顺序存储的线性表是一种随机存取结构，因为只要确定了存储线性表的起始位置，就可以随机存取表中的任意一个数据元素。</p>
<h4 id="2、顺序存储的线性表类型定义"><a href="#2、顺序存储的线性表类型定义" class="headerlink" title="2、顺序存储的线性表类型定义"></a>2、顺序存储的线性表类型定义</h4><p>由于C语言的一维数组在内存中所占的正是一个地址连续的存储区域，因此可以用C语言的一维数组来作为线性表的顺序存储结构。但是，由于在大多数高级程序设计语言中，数组的长度是不可变的，因而如果用数组类型来实现顺序表，则必须根据需要预先设置足够的长度。而在实际应用中，数组所需长度会随问题的不同而不同，并且在操作过程中长度也会发生变化，因此，在C语言中通常采用动态分配的一维数组来实现顺序表。顺序存储的线性表类型定义如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_SIZE 5      <span class="comment">/*线性表存储空间的初始分配量*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREMENT 2      <span class="comment">/*线性表存储空间的分配增量*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;    <span class="comment">/*定义元素类型为int*/</span></span><br><span class="line"><span class="comment">/*线性表的顺序存储结构定义*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElemType* elem;      <span class="comment">/*存储空间的基地址*/</span></span><br><span class="line">	<span class="keyword">int</span> length;          <span class="comment">/*当前长度*/</span></span><br><span class="line">	<span class="keyword">int</span> listsize;        <span class="comment">/*当前分配的存储容量（以sizeof(ElemType)为单位）*/</span></span><br><span class="line">&#125;SqList;</span><br></pre></td></tr></table></figure>

<h3 id="二、顺序表的基本操作"><a href="#二、顺序表的基本操作" class="headerlink" title="二、顺序表的基本操作"></a>二、顺序表的基本操作</h3><h4 id="1、顺序表的初始化"><a href="#1、顺序表的初始化" class="headerlink" title="1、顺序表的初始化"></a>1、顺序表的初始化</h4><p>顺序表的初始化，即构造一个空的表，就是为顺序表分配一个预定义大小的数组空间，这需要将 L 设为指针变量。首先动态分配顺序表的存储空间，然后将其当前长度设为 “0” ，表示表中没有数据元素。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*顺序表的初始化*/</span></span><br><span class="line"><span class="comment">/*初始化顺序表，成功返回1，失败返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList_Sq</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!L-&gt;elem) <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">/*初始化失败*/</span></span><br><span class="line">	L-&gt;length = <span class="number">0</span>;</span><br><span class="line">	L-&gt;listsize = INIT_SIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;                 <span class="comment">/*初始化成功*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2、顺序表的插入"><a href="#2、顺序表的插入" class="headerlink" title="2、顺序表的插入"></a>2、顺序表的插入</h4><p>一般情况下，在第 i ( 0≤ i ≤n ) 个元素之前插入一个元素时，需将第 n-1至第 i （共n-i）个元素向后移动一个位置。<br>（1）从后开始向后移动：将 a<sub>n-1 </sub>~ a<sub>i</sub> 顺序向后移动一个位置，即 a<sub>n-1</sub> 移到 a<sub>n</sub> 的位置， a<sub>n-2</sub> 移到 a<sub>n-1</sub> 的位置，…， a<sub>i</sub> 移到 a<sub>i+1</sub> 的位置，为待插入的新数据元素让出位置 i。<br>（2）将 e 放到空出的第 i 个位置上。<br>（3）修改线性表的当前长度 length 的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*顺序表的插入*/</span></span><br><span class="line"><span class="comment">/*在顺序表L的第i个位置之前插入新的元素e，否成功则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert_Sq</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	ElemType* newbase;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;L-&gt;length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;   		<span class="comment">/*插入位置不合法*/</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)  			<span class="comment">/*当前存储空间已满，增加分配*/</span></span><br><span class="line">	&#123;</span><br><span class="line">		newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + INCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;   			<span class="comment">/*存储分配失败*/</span></span><br><span class="line">		L-&gt;elem = newbase;</span><br><span class="line">		L-&gt;listsize += INCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = L-&gt;length - <span class="number">1</span>; j &gt;= i; j--)</span><br><span class="line">		L-&gt;elem[j + <span class="number">1</span>] = L-&gt;elem[j];  		<span class="comment">/*插入位置及之后的元素后移*/</span></span><br><span class="line">	L-&gt;elem[i] = e;                  		<span class="comment">/*插入e*/</span></span><br><span class="line">	++L-&gt;length;                   	<span class="comment">/*表长增1*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、顺序表的删除"><a href="#3、顺序表的删除" class="headerlink" title="3、顺序表的删除"></a>3、顺序表的删除</h4><p>（1）从前开始向前移动：将 a<sub>i+1</sub> ~ a<sub>n-1</sub> 顺序向前移动一个位置。<br>（2）修改线性表当前长度 length 的值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*顺序表的删除*/</span></span><br><span class="line"><span class="comment">/*在顺序表L中删除第i个元素，并用e返回其值，若成功则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListDelete_Sq</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= L-&gt;length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;   	<span class="comment">/*i值不合法*/</span></span><br><span class="line">	*e = L-&gt;elem[i];                    	<span class="comment">/*被删除元素的值赋给e*/</span></span><br><span class="line">	<span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; L-&gt;length; j++)</span><br><span class="line">		L-&gt;elem[j - <span class="number">1</span>] = L-&gt;elem[j];      	<span class="comment">/*被删元素之后的元素前移*/</span></span><br><span class="line">	--L-&gt;length;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、顺序表的按值查找"><a href="#4、顺序表的按值查找" class="headerlink" title="4、顺序表的按值查找"></a>4、顺序表的按值查找</h4><p>从最前面一个元素 a0 开始向后依次将顺序表中的元素 ai 与 e 相比较，直到找到一个与 e 相等的数据元素，返回这个数据元素在表中的位置；若顺序表中的所有元素都与 e 不相等，即查找不到与 e 相等的数据元素，则返回 -1，表示查找失败。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*顺序表的查找*/</span></span><br><span class="line"><span class="comment">/*在顺序线性表L中查找第i个值与e相等的元素的位序，若找到，则返回其在L中的位序，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_Sq</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;     					<span class="comment">/*i的初值为第一个元素的位序*/</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; L.length &amp;&amp; L.elem[i] != e)</span><br><span class="line">		i++;</span><br><span class="line">	<span class="keyword">if</span> (L.elem[i] == e)</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="5、读取顺序表中的元素"><a href="#5、读取顺序表中的元素" class="headerlink" title="5、读取顺序表中的元素"></a>5、读取顺序表中的元素</h4><p>首先确认所查找的数据元素序号是否合法，若合法，则直接返回对应的元素值，否则操作失败。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*读取顺序表中的元素*/</span></span><br><span class="line"><span class="comment">/*在顺序线性表L中取第i个元素存入e中，若成功，则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_SqList</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= L.length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;			<span class="comment">/*没有第i个元素，读取失败*/</span></span><br><span class="line">	*e = L.elem[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">/*读取成功*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="6、顺序表的应用"><a href="#6、顺序表的应用" class="headerlink" title="6、顺序表的应用"></a>6、顺序表的应用</h4><p>例：有顺序表 LA 和 LB，其元素均按从小到大的升序排列，编写一个算法，将它们合并成一个顺序表 LC，要求 LC 的元素也按从小到大的升序排列。<br>（1）算法思路：<br>依次扫描 LA 和 LB 的元素，比较线性表 LA 和 LB 当前元素的值，将较小值的元素赋给 LC，如此直到一个线性表扫描完毕，然后将未扫描完的那个顺序表中余下的元素赋给 LC 即可。因此线性表 LC 的容量应不小于线性表 LA 和 LB 的长度之和。<br>（2）算法描述：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*已知顺序线性表LA和LB的元素按值非递减排列，合并LA和LB得到新的顺序</span></span><br><span class="line"><span class="comment">线性表LC，LC的元素也按值非递减排列，若成功，则返回1，否则返回-1*/</span></span><br><span class="line"><span class="comment">/*已知顺序线性表LA和LB的元素按值非递减排列，合并LA和LB得到新的顺序</span></span><br><span class="line"><span class="comment">线性表LC，LC的元素也按值非递减排列，若成功，则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MergeList_Sq</span><span class="params">(SqList LA, SqList LB, SqList* LC)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	LC-&gt;listsize = LA.length + LB.length;</span><br><span class="line">	LC-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(LC-&gt;listsize * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!LC-&gt;elem) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; LA. length &amp;&amp; j &lt; LB.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (LA.elem[i] &lt;= LB.elem[j])</span><br><span class="line">			LC-&gt;elem[k++] = LA.elem[i++];</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			LC-&gt;elem[k++] = LB.elem[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; LA.length) LC-&gt;elem[k++] = LA.elem[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt; LB.length) LC-&gt;elem[k++] = LB.elem[j++];</span><br><span class="line">	LC-&gt;length = k;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="三、顺序表的练习"><a href="#三、顺序表的练习" class="headerlink" title="三、顺序表的练习"></a>三、顺序表的练习</h3><h4 id="1、完整代码"><a href="#1、完整代码" class="headerlink" title="1、完整代码"></a>1、完整代码</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现顺序表常用操作的代码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_SIZE  5     <span class="comment">/*线性表存储空间的初始分配量*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREMENT  2    <span class="comment">/*线性表存储空间的分配增量*/</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;    <span class="comment">/*定义元素类型为int*/</span></span><br><span class="line"><span class="comment">/*线性表的顺序存储结构定义*/</span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	ElemType* elem;   <span class="comment">/*存储空间的基地址*/</span></span><br><span class="line">	<span class="keyword">int</span>      length;   <span class="comment">/*当前长度*/</span></span><br><span class="line">	<span class="keyword">int</span>    listsize;   <span class="comment">/*当前分配的存储容量（以sizeof(ElemType)为单位）*/</span></span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="comment">/*顺序表的初始化*/</span></span><br><span class="line"><span class="comment">/*初始化顺序表，成功返回1，失败返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList_Sq</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(INIT_SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!L-&gt;elem)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	L-&gt;length = <span class="number">0</span>;</span><br><span class="line">	L-&gt;listsize = INIT_SIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*输入顺序表各个元素的值*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputSqList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入该线性表的元素个数：n=&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n &gt; L-&gt;listsize)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;超出了线性表的存储空间，请重新输入：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;length = n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请依次输入该线性表各元素的值：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;L-&gt;elem[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*打印顺序表的各个元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSqList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n该线性表的元素依次为：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d  &quot;</span>, L.elem[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;<span class="comment">/*顺序表的插入*/</span></span><br><span class="line"><span class="comment">/*在顺序表L的第i个位置之前插入新的元素e，否成功则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListInsert_Sq</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	ElemType* newbase;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">0</span> || i&gt;L-&gt;length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;   		<span class="comment">/*插入位置不合法*/</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)  			<span class="comment">/*当前存储空间已满，增加分配*/</span></span><br><span class="line">	&#123;</span><br><span class="line">		newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + INCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;   			<span class="comment">/*存储分配失败*/</span></span><br><span class="line">		L-&gt;elem = newbase;</span><br><span class="line">		L-&gt;listsize += INCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = L-&gt;length - <span class="number">1</span>; j &gt;= i; j--)</span><br><span class="line">		L-&gt;elem[j + <span class="number">1</span>] = L-&gt;elem[j];  		<span class="comment">/*插入位置及之后的元素后移*/</span></span><br><span class="line">	L-&gt;elem[i] = e;                  		<span class="comment">/*插入e*/</span></span><br><span class="line">	++L-&gt;length;                   	<span class="comment">/*表长增1*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*顺序表的删除*/</span></span><br><span class="line"><span class="comment">/*在顺序表L中删除第i个元素，并用e返回其值，若成功则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListDelete_Sq</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= L-&gt;length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;   	<span class="comment">/*i值不合法*/</span></span><br><span class="line">	*e = L-&gt;elem[i];                    	<span class="comment">/*被删除元素的值赋给e*/</span></span><br><span class="line">	<span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; L-&gt;length; j++)</span><br><span class="line">		L-&gt;elem[j - <span class="number">1</span>] = L-&gt;elem[j];      	<span class="comment">/*被删元素之后的元素前移*/</span></span><br><span class="line">	--L-&gt;length;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*顺序表的查找*/</span></span><br><span class="line"><span class="comment">/*在顺序线性表L中查找第i个值与e相等的元素的位序，若找到，则返回其在L中的位序，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem_Sq</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;     					<span class="comment">/*i的初值为第一个元素的位序*/</span></span><br><span class="line">	<span class="keyword">while</span> (i &lt; L.length &amp;&amp; L.elem[i] != e)</span><br><span class="line">		i++;</span><br><span class="line">	<span class="keyword">if</span> (L.elem[i] == e)</span><br><span class="line">		<span class="keyword">return</span> i;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*读取顺序表中的元素*/</span></span><br><span class="line"><span class="comment">/*在顺序线性表L中取第i个元素存入e中，若成功，则返回1，否则返回-1*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get_SqList</span><span class="params">(SqList L, <span class="keyword">int</span> i, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= L.length)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;			<span class="comment">/*没有第i个元素，读取失败*/</span></span><br><span class="line">	*e = L.elem[i];</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">/*读取成功*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	<span class="keyword">int</span> status = <span class="number">0</span>, d = <span class="number">0</span>, e = <span class="number">0</span>, f = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	status = InitList_Sq(&amp;L);</span><br><span class="line">	<span class="keyword">if</span> (status == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;顺序表初始化成功！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;顺序表初始化失败！&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	InputSqList(&amp;L);    				<span class="comment">/*输入顺序表的各元素值*/</span></span><br><span class="line">	PrintSqList(L);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入插入位置:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入插入的值:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;d);</span><br><span class="line">	status = ListInsert_Sq(&amp;L, i, d); 		<span class="comment">/*在第i个元素之前插入d*/</span></span><br><span class="line">	<span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n进行插入操作后&quot;</span>);</span><br><span class="line">		PrintSqList(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n插入失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入删除位置:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	status = ListDelete_Sq(&amp;L, i, &amp;e);		<span class="comment">/*删除线性表的第i个元素，用e返回其值*/</span></span><br><span class="line">	<span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n被删除元素的值为：%d&quot;</span>, e);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n进行删除操作后&quot;</span>);</span><br><span class="line">		PrintSqList(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入待查找元素的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;f);</span><br><span class="line">	i = LocateElem_Sq(L, f);</span><br><span class="line">	<span class="comment">/*在顺序表L中查找与f相等的元素的位序*/</span></span><br><span class="line">	<span class="keyword">if</span> (i != <span class="number">-1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;其值与%d相等的元素在线性表中的位序为：%d\n&quot;</span>, f, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;查找%d失败！\n&quot;</span>, f);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入读取元素的位置:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	status = Get_SqList(L, i, &amp;e);</span><br><span class="line">	<span class="keyword">if</span> (status == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n读取相应位置的元素的值为：%d\n&quot;</span>, e);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;读取失败！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(L.elem);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>链表的常用操作实现</title>
    <url>/2021/11/11/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="链表的常用操作实现及测试："><a href="#链表的常用操作实现及测试：" class="headerlink" title="链表的常用操作实现及测试："></a>链表的常用操作实现及测试：</h4><ol>
<li>单链表的创建及初始化</li>
<li>节点插入</li>
<li>节点删除</li>
<li>节点查询</li>
<li>节点修改</li>
<li>链表排序</li>
<li>链表的遍历并输出</li>
<li>反转链表</li>
<li>合并两个有序链表，使新链表仍保持有序</li>
<li>删除单链表L中的重复元素</li>
</ol>
<span id="more"></span>

<h4 id="代码（C语言）："><a href="#代码（C语言）：" class="headerlink" title="代码（C语言）："></a>代码（C语言）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*带头节点的单链表的常用操作实现及测试*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据结构*/</span></span><br><span class="line"><span class="comment">/*定义元素类型为int*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="comment">/*线性表的链式存储结构定义*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; LNode, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="function">LinkList <span class="title">Create_LinkList</span><span class="params">(<span class="keyword">int</span> n)</span></span>;                      <span class="comment">//1  创建及初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList L)</span></span>;                      <span class="comment">//2  遍历及输出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span></span>;   <span class="comment">//3  节点插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete_LinkList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span></span>;  <span class="comment">//4  节点删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate_LinkList</span><span class="params">(LinkList L, ElemType e)</span></span>;          <span class="comment">//5  节点按值查询</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Modify_LinkList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span></span>;   <span class="comment">//6  节点按位置修改</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetPosition_LinkList</span><span class="params">(LinkList L, ElemType e)</span></span>;     <span class="comment">//7  获取正确的有序插入位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DuplicateRemoveLinkList</span><span class="params">(LinkList L)</span></span>;             <span class="comment">//8  链表去重</span></span><br><span class="line"><span class="function">LinkList <span class="title">ReverseLinkList</span><span class="params">(LinkList L)</span></span>;                 <span class="comment">//9  反转链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_LinkList</span><span class="params">(LinkList L)</span></span>;                 <span class="comment">//10 链表排序--冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort_LinkList</span><span class="params">(LinkList L)</span></span>;                 <span class="comment">//11 链表排序--直接选择排序</span></span><br><span class="line"><span class="function">LNode* <span class="title">Merge</span><span class="params">(LNode* head1, LNode* head2)</span></span>;             <span class="comment">//12 链表有序归并</span></span><br><span class="line"><span class="function">LinkList <span class="title">MergeSort_LinkList</span><span class="params">(LinkList L)</span></span>;              <span class="comment">//13 链表排序--自底向上归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_LinkList</span><span class="params">(LinkList L, ElemType x)</span></span>;           <span class="comment">//14 计算单链表L中数据域值为一个指定值x的节点个数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span>;                                         <span class="comment">//15 测试1 检验单链表的基本操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span>;                                         <span class="comment">//16 测试2 检验链表的有序归并</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span>;                                         <span class="comment">//17 测试3 检验链表去重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>;                                          <span class="comment">//18 主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	menu();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数实现*/</span></span><br><span class="line"><span class="comment">/*【功能1 单链表的创建及初始化】*/</span></span><br><span class="line"><span class="comment">/*尾插法建立带头节点的单链表L，输入n个元素的值*/</span></span><br><span class="line"><span class="function">LinkList <span class="title">Create_LinkList</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p, * q;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	LNode* L = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;        <span class="comment">//先建立一个带头节点的单链表</span></span><br><span class="line">	q = L;                 <span class="comment">//q的初始值指向头节点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入单链表各元素的值：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		p = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  <span class="comment">//生成新节点</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p-&gt;data);              <span class="comment">//输入元素值</span></span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		q-&gt;next = p;</span><br><span class="line">		q = p;			   <span class="comment">//将该节点插入到表尾</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能2 单链表的遍历及输出】*/</span></span><br><span class="line"><span class="comment">/*打印单链表L中各元素的值*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p;</span><br><span class="line">	p = L-&gt;next;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n输出单链表中各元素的值：&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能3 单链表的节点插入】*/</span></span><br><span class="line"><span class="comment">/*在带头节点的单链表L中第i个位置之前插入元素e，成功返回1，失败返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p = L;</span><br><span class="line">	<span class="keyword">int</span>  j = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (p &amp;&amp; j &lt; i)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;  <span class="comment">//寻找第i个节点</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!p || j &gt; i)  <span class="keyword">return</span> <span class="number">0</span>;                <span class="comment">//i值不合法，返回0</span></span><br><span class="line">	LNode* s = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));  <span class="comment">//生成新节点</span></span><br><span class="line">	s-&gt;data = e;</span><br><span class="line">	s-&gt;next = p-&gt;next;</span><br><span class="line">	p-&gt;next = s;      <span class="comment">//实现插入</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能4 单链表的节点删除】*/</span></span><br><span class="line"><span class="comment">/*在带头节点的单链表L中删除第i个元素，并由e返回其值，成功返回1，失败返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Delete_LinkList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">	LNode* p = L;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next &amp;&amp; j &lt; i) <span class="comment">//该循环执行i-1次，循环结束p指向第i-1个元素</span></span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;         <span class="comment">//寻找第i个节点，并令p指向其前趋</span></span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!(p-&gt;next) || j &gt; i)  <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//删除位置不合理</span></span><br><span class="line">	LNode* q = p-&gt;next;</span><br><span class="line">	*e = q-&gt;data;                        <span class="comment">//用e返回被删节点数据域的值</span></span><br><span class="line">	p-&gt;next = q-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(q);           <span class="comment">//删除并释放节点*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能5 单链表的节点按值查询】*/</span></span><br><span class="line"><span class="comment">/*在带头节点的单链表L中按值查询指定元素的位置，查询成功，则返回位置i，否则返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Locate_LinkList</span><span class="params">(LinkList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	LNode* p = L;</span><br><span class="line">	<span class="keyword">while</span> (p &amp;&amp; p-&gt;data != e)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!p)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span>  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能6 单链表的节点按位置修改】*/</span></span><br><span class="line"><span class="comment">/*在带头节点的单链表L中修改第i个位置元素的值*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Modify_LinkList</span><span class="params">(LinkList L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p = L;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (j++ &lt; i &amp;&amp; p)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">1</span> || p == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//i值不合法，修改失败，返回0</span></span><br><span class="line">	p-&gt;data = e;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能7 获取单链表有序插入节点的正确位置】*/</span></span><br><span class="line"><span class="comment">/*已知节点数据e，将其插入到有序单链表L中，并使其仍保持有序，获取插入位置*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetPosition_LinkList</span><span class="params">(LinkList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p = L;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		t++;</span><br><span class="line">		<span class="keyword">if</span> (e &lt;= (p-&gt;next-&gt;data)) <span class="keyword">return</span> t;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> t + <span class="number">1</span>; <span class="comment">//如果e比链表最后一个元素都大，那么返回的位置是t+1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能8 去除单链表L中的重复元素】*/</span></span><br><span class="line"><span class="comment">/*将单链表L中的重复元素删除，相同元素保留靠左边的*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DuplicateRemoveLinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p, * q;</span><br><span class="line">	p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q = p;</span><br><span class="line">		<span class="keyword">while</span> (q-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;data == q-&gt;next-&gt;data) <span class="comment">//删除q这个节点</span></span><br><span class="line">			&#123;</span><br><span class="line">				LNode* tem = q-&gt;next;</span><br><span class="line">				q-&gt;next = q-&gt;next-&gt;next;  <span class="comment">//删除q-&gt;next这个节点</span></span><br><span class="line">				<span class="built_in">free</span>(tem);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				q = q-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能9 反转单链表L的各个元素】*/</span></span><br><span class="line"><span class="comment">/*反转带头节点的单链表L的各个元素，如 head-&gt;1-&gt;2-&gt;3-&gt;NULL 变为 NULL&lt;-1&lt;-2&lt;-3&lt;-head */</span></span><br><span class="line"><span class="function">LinkList <span class="title">ReverseLinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* head = L-&gt;next;</span><br><span class="line">	LNode* prev = <span class="literal">NULL</span>;</span><br><span class="line">	LNode* curr = head;</span><br><span class="line">	<span class="keyword">while</span> (curr)</span><br><span class="line">	&#123;</span><br><span class="line">		LNode* next = curr-&gt;next;</span><br><span class="line">		curr-&gt;next = prev;</span><br><span class="line">		prev = curr;</span><br><span class="line">		curr = next;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;next = prev;</span><br><span class="line">	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能10 链表递增排序--冒泡排序】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_LinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	LNode* p = <span class="literal">NULL</span>, * q = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (p = L-&gt;next; p-&gt;next != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (q = L-&gt;next; q-&gt;next != <span class="literal">NULL</span>; q = q-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (q-&gt;data &gt; q-&gt;next-&gt;data)</span><br><span class="line">			&#123;</span><br><span class="line">				ElemType temp = q-&gt;data;</span><br><span class="line">				q-&gt;data = q-&gt;next-&gt;data;</span><br><span class="line">				q-&gt;next-&gt;data = temp;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能11 链表递增排序--直接选择排序】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SelectSort_LinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L == <span class="literal">NULL</span> || L-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">	LNode* p = <span class="literal">NULL</span>, * q = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">for</span> (p = L-&gt;next; p-&gt;next != <span class="literal">NULL</span>; p = p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (q = p-&gt;next; q != <span class="literal">NULL</span>; q = q-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (p-&gt;data &gt; q-&gt;data)</span><br><span class="line">			&#123;</span><br><span class="line">				ElemType temp = p-&gt;data;</span><br><span class="line">				p-&gt;data = q-&gt;data;</span><br><span class="line">				q-&gt;data = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能12 合并两个有序链表，并使新链表仍保持有序】*/</span></span><br><span class="line"><span class="comment">/*归并排序中会调用该函数*/</span></span><br><span class="line"><span class="function">LNode* <span class="title">Merge</span><span class="params">(LNode* head1, LNode* head2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* dummyHead = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	dummyHead-&gt;data = <span class="number">0</span>;</span><br><span class="line">	LNode* temp = dummyHead, * temp1 = head1, * temp2 = head2;</span><br><span class="line">	<span class="keyword">while</span> (temp1 != <span class="literal">NULL</span> &amp;&amp; temp2 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (temp1-&gt;data &lt;= temp2-&gt;data)</span><br><span class="line">		&#123;</span><br><span class="line">			temp-&gt;next = temp1;</span><br><span class="line">			temp1 = temp1-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp-&gt;next = temp2;</span><br><span class="line">			temp2 = temp2-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (temp1 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		temp-&gt;next = temp1;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (temp2 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		temp-&gt;next = temp2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummyHead-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能13 链表递增排序--自底向上归并排序】*/</span></span><br><span class="line"><span class="function">LinkList <span class="title">MergeSort_LinkList</span><span class="params">(LinkList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* head = L-&gt;next; <span class="comment">//head是首元节点</span></span><br><span class="line">	<span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> head;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">	LNode* node = head;</span><br><span class="line">	<span class="keyword">while</span> (node != <span class="literal">NULL</span>) <span class="comment">//计算表长</span></span><br><span class="line">	&#123;</span><br><span class="line">		length++;</span><br><span class="line">		node = node-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	LNode* dummyHead = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	dummyHead-&gt;next = head;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> subLength = <span class="number">1</span>; subLength &lt; length; subLength &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//subLength &lt;&lt;= 1等价于subLength *=2</span></span><br><span class="line">		LNode* prev = dummyHead, * curr = dummyHead-&gt;next;</span><br><span class="line">		<span class="keyword">while</span> (curr != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			LNode* head1 = curr;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; subLength &amp;&amp; curr-&gt;next != <span class="literal">NULL</span>; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				curr = curr-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			LNode* head2 = curr-&gt;next;</span><br><span class="line">			curr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">			curr = head2;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; subLength &amp;&amp; curr != <span class="literal">NULL</span> &amp;&amp; curr-&gt;next != <span class="literal">NULL</span>; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				curr = curr-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			LNode* next = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">if</span> (curr != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				next = curr-&gt;next;</span><br><span class="line">				curr-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			LNode* merged = Merge(head1, head2);</span><br><span class="line">			prev-&gt;next = merged;</span><br><span class="line">			<span class="keyword">while</span> (prev-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				prev = prev-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			curr = next;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dummyHead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能14 计算单链表L中数据域值为一个指定值x的节点个数】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count_LinkList</span><span class="params">(LinkList L, ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LNode* p;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">	p = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (p-&gt;data == x) cnt++;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> cnt; <span class="comment">//返回数据域为指定值x的节点个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【测试1 检验单链表L的基本操作】*/</span></span><br><span class="line"><span class="comment">/*包括：创建及初始化、节点插入、节点删除、节点查询、节点修改、链表排序、链表遍历并输出、反转链表等功能*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList L;         <span class="comment">//定义一个头指针，以指示一个单链表</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, status = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	ElemType e = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的长度：n=&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	L = Create_LinkList(n);     <span class="comment">//建立一个含n个元素的单链表</span></span><br><span class="line">	Print_LinkList(L);          <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n1 测试插入功能\n输入待插入的元素的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入待插入的位置：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	status = Insert_LinkList(L, i, e); <span class="comment">//在第i个元素之前插入e</span></span><br><span class="line">	<span class="keyword">if</span> (status)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">		Print_LinkList(L);      <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n2 测试删除功能\n输入待删除元素的位置：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	status = Delete_LinkList(L, i, &amp;e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;待删除元素的值为：%d\n&quot;</span>, e);</span><br><span class="line">	<span class="keyword">if</span> (status)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">		Print_LinkList(L);      <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;删除失败！&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n3 测试查询功能\n输入待查询的元素的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	<span class="keyword">int</span> position = Locate_LinkList(L, e);</span><br><span class="line">	<span class="keyword">if</span> (position) <span class="built_in">printf</span>(<span class="string">&quot;该元素在链表中的位置为：第%d个元素&quot;</span>, position);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;未查询到该元素！&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n4 测试修改功能\n输入待修改元素的位置：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入修改后的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	status = Modify_LinkList(L, i, e);</span><br><span class="line">	<span class="keyword">if</span> (status)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">		Print_LinkList(L);      <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;输入的位置不合法，修改失败！&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n5 测试排序功能&quot;</span>);</span><br><span class="line">	L = MergeSort_LinkList(L);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n归并排序结束！&quot;</span>);</span><br><span class="line">	Print_LinkList(L);      <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n6 将元素e插入至有序单链表L中，并使L仍保持有序：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入元素e的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	position = GetPosition_LinkList(L, e);</span><br><span class="line">	status = Insert_LinkList(L, position, e); <span class="comment">//在第position个元素之前插入e</span></span><br><span class="line">	<span class="keyword">if</span> (status)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;插入成功！&quot;</span>);</span><br><span class="line">		Print_LinkList(L);      <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;插入失败！&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n7 测试反转链表功能\n反转链表后&quot;</span>);</span><br><span class="line"></span><br><span class="line">	L = ReverseLinkList(L);</span><br><span class="line">	Print_LinkList(L);      <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n8 计算单链表L中数据域值为x的节点个数：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入x的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">	<span class="keyword">int</span> cnt = Count_LinkList(L, x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;单链表L中数据域值为%d的个数为：%d个\n\n&quot;</span>, x, cnt);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【测试2 检验两个有序单链表的有序归并】*/</span></span><br><span class="line"><span class="comment">/*将两个有序单链表合并为一个新的有序单链表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> lenA = <span class="number">0</span>, lenB = <span class="number">0</span>;</span><br><span class="line">	LinkList LA;     <span class="comment">//定义一个头指针，以指示单链表LA</span></span><br><span class="line">	LinkList LB;     <span class="comment">//定义一个头指针，以指示单链表LB</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;创建单链表LA，输入其长度：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;lenA);</span><br><span class="line">	LA = Create_LinkList(lenA);     <span class="comment">//建立一个含n个元素的单链表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;对单链表LA进行冒泡排序：&quot;</span>);</span><br><span class="line">	BubbleSort_LinkList(LA);</span><br><span class="line">	Print_LinkList(LA);          <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n创建单链表LB，输入其长度：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;lenB);</span><br><span class="line">	LB = Create_LinkList(lenB);     <span class="comment">//建立一个含n个元素的单链表</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;对单链表LB进行直接选择排序：&quot;</span>);</span><br><span class="line">	SelectSort_LinkList(LB);</span><br><span class="line">	Print_LinkList(LB);          <span class="comment">//依次输出链表各元素的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n合并单链表LA和LB，使新链表仍保持有序！\n合并成功！&quot;</span>);</span><br><span class="line">	LinkList LC = (LNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">	LC-&gt;next = Merge(LA-&gt;next, LB-&gt;next);</span><br><span class="line">	Print_LinkList(LC);          <span class="comment">//依次输出链表各元素的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【测试3 检验链表的去重】*/</span></span><br><span class="line"><span class="comment">/*删除单链表L中的重复元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkList L;         <span class="comment">//定义一个头指针，以指示一个单链表</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的长度：n=&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	L = Create_LinkList(n);     <span class="comment">//建立一个含n个元素的单链表</span></span><br><span class="line">	Print_LinkList(L);          <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	DuplicateRemoveLinkList(L);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n去重后：&quot;</span>);</span><br><span class="line">	Print_LinkList(L);          <span class="comment">//依次输出线性表各元素的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1 测试单链表的创建及初始化、节点插入、节点删除、节点查询、节点修改、链表排序、链表遍历并输出、反转链表等功能\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2 合并两个有序链表，使新链表仍保持有序\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3 删除单链表L中的重复元素\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4 退出\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入你的选择：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel &gt; <span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入有误，重新输入：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (sel)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		Test1();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		Test2();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		Test3();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>队列的链式表示和实现</title>
    <url>/2021/11/12/%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="队列的链式表示和实现："><a href="#队列的链式表示和实现：" class="headerlink" title="队列的链式表示和实现："></a>队列的链式表示和实现：</h4><p>编写一个程序实现链队列的各种基本运算，并在此基础上设计一个主程序，完成如下功能：</p>
<ol>
<li>初始化并建立链队列</li>
<li>销毁链队列</li>
<li>入队</li>
<li>出队</li>
<li>遍历链队列</li>
<li>判断链队列是否为空</li>
<li>清空链队列</li>
<li>获取链队列长度</li>
<li>获取链队列头元素</li>
</ol>
<span id="more"></span>

<h4 id="代码（C语言）："><a href="#代码（C语言）：" class="headerlink" title="代码（C语言）："></a>代码（C语言）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*链队列的实现及常用操作测试*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">/*链队列的数据结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>  //队列节点</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	QElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; QNode, * QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	QueuePtr front;  <span class="comment">//队头指针</span></span><br><span class="line">	QueuePtr rear;   <span class="comment">//队尾指针</span></span><br><span class="line">&#125; LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(LinkQueue* Q)</span></span>;             <span class="comment">//1 初始化链队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyQueue</span><span class="params">(LinkQueue* Q)</span></span>;          <span class="comment">//2 销毁链队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(LinkQueue* Q, QElemType e)</span></span>;  <span class="comment">//3 入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(LinkQueue* Q, QElemType* e)</span></span>; <span class="comment">//4 出队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(LinkQueue Q)</span></span>;             <span class="comment">//5 判断链队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(LinkQueue* Q)</span></span>;           <span class="comment">//6 清空链队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(LinkQueue Q)</span></span>;            <span class="comment">//7 获取链队列长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(LinkQueue Q, QElemType* e)</span></span>;  <span class="comment">//8 获取队头元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span>;         <span class="comment">//9 遍历并输出链队列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, k = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	QElemType d = <span class="number">0</span>;</span><br><span class="line">	LinkQueue Q;</span><br><span class="line">	srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">int</span> status = InitQueue(&amp;Q);<span class="comment">/*构造一个空队列*/</span></span><br><span class="line">	<span class="keyword">if</span> (status) <span class="built_in">printf</span>(<span class="string">&quot;队列初始化成功！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;队列初始化失败！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入队列初始元素个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;队列初始化成功！\n执行%d次入队操作：\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		d = rand() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%-2d次：元素%d入队\n&quot;</span>, i + <span class="number">1</span>, d);</span><br><span class="line">		EnQueue(&amp;Q, d); <span class="comment">//入队</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;打印当前队列:&quot;</span>);</span><br><span class="line">	QueueTraverse(Q);</span><br><span class="line"></span><br><span class="line">	k = QueueLength(Q); <span class="comment">//获取队列长度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n当前队列长度为：%d\n\n&quot;</span>, QueueLength(Q));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;执行%d次出队操作：\n&quot;</span>, k / <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k / <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		DeQueue(&amp;Q, &amp;d); <span class="comment">//出队</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%-2d次：元素%d出队&quot;</span>, i + <span class="number">1</span>, d);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t打印当前队列：&quot;</span>);</span><br><span class="line">		QueueTraverse(Q);</span><br><span class="line">	&#125;</span><br><span class="line">	n = GetHead(Q, &amp;d); <span class="comment">//获取队头元素，保存到d中</span></span><br><span class="line">	<span class="keyword">if</span> (n) <span class="built_in">printf</span>(<span class="string">&quot;\n队头元素的值：%d\n&quot;</span>, d);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;执行清空队列操作\n&quot;</span>);</span><br><span class="line">	ClearQueue(&amp;Q); <span class="comment">//清空队列</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;清空队列后：q.front=%p  q.rear=%p  q.front-&gt;next=%p\n&quot;</span>, Q.front, Q.rear, Q.front-&gt;next);</span><br><span class="line">	DestroyQueue(&amp;Q);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;销毁队列后：q.front=%p  q.rear=%p\n&quot;</span>, Q.front, Q.rear);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数实现部分*/</span></span><br><span class="line"><span class="comment">/*【功能1 初始化链队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(LinkQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q-&gt;front = Q-&gt;rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">	<span class="keyword">if</span> (!Q-&gt;front) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">/*生成头节点失败*/</span></span><br><span class="line">	Q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//初始化成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能2 销毁链队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DestroyQueue</span><span class="params">(LinkQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (Q-&gt;front)</span><br><span class="line">	&#123;</span><br><span class="line">		Q-&gt;rear = Q-&gt;front-&gt;next; <span class="comment">/*Q-&gt;rear指向Q-&gt;front的下一个节点*/</span></span><br><span class="line">		<span class="built_in">free</span>(Q-&gt;front);<span class="comment">/*释放Q-&gt;front所指节点*/</span></span><br><span class="line">		Q-&gt;front = Q-&gt;rear; <span class="comment">/*Q-&gt;front指向Q-&gt;front的下一个节点*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能3 入队】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(LinkQueue* Q, QElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QueuePtr p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode)); <span class="comment">/*动态生成新节点*/</span></span><br><span class="line">	<span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//生成失败则返回0</span></span><br><span class="line">	p-&gt;data = e;       <span class="comment">//将e的值赋给新节点</span></span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;    <span class="comment">//新节点的指针为空</span></span><br><span class="line">	Q-&gt;rear-&gt;next = p; <span class="comment">//原队尾节点的指针域为指向新节点</span></span><br><span class="line">	Q-&gt;rear = p;       <span class="comment">//尾指针指向新节点</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;          <span class="comment">//入队成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能4 出队】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(LinkQueue* Q, QElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//队列为空则返回0</span></span><br><span class="line">	QueuePtr p = Q-&gt;front-&gt;next;       <span class="comment">//p指向队头节点</span></span><br><span class="line">	*e = p-&gt;data;                      <span class="comment">//队头元素赋给e</span></span><br><span class="line">	Q-&gt;front-&gt;next = p-&gt;next;          <span class="comment">//队头节点指向下一个节点</span></span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;rear == p) Q-&gt;rear = Q-&gt;front; <span class="comment">//如果删除的是队尾节点，则修改队尾指针指向头节点</span></span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//出队成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能5 判断链队列是否为空】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front-&gt;next == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//如果队列为空则返回1</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能6 清空链队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(LinkQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能7 获取链队列长度】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">//计数器清0</span></span><br><span class="line">	QueuePtr p = Q.front; <span class="comment">//p指向头节点</span></span><br><span class="line">	<span class="keyword">while</span> (p != Q.rear)   <span class="comment">//如果p所指向的不是尾节点</span></span><br><span class="line">	&#123;</span><br><span class="line">		i++; <span class="comment">//则计数器加1</span></span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能8 获取队头元素】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(LinkQueue Q, QElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QueuePtr p;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	p = Q.front-&gt;next; <span class="comment">//p指向队头节点</span></span><br><span class="line">	*e = p-&gt;data;      <span class="comment">//将队头元素的值赋给e</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*遍历并输出队列（队头到队尾）*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTraverse</span><span class="params">(LinkQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QueuePtr p = Q.front-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>队列的顺序表示和实现</title>
    <url>/2021/11/12/%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="队列的顺序表示和实现："><a href="#队列的顺序表示和实现：" class="headerlink" title="队列的顺序表示和实现："></a>队列的顺序表示和实现：</h4><p>编写一个程序实现顺序队列的各种基本运算（采用循环队列），并在此基础上设计一个主程序，完成如下功能：</p>
<ol>
<li>初始化队列</li>
<li>入队</li>
<li>出队</li>
<li>判断队列是否为空</li>
<li>清空队列</li>
<li>销毁队列</li>
<li>获取队列长度</li>
<li>获取队头元素</li>
<li>遍历队列</li>
</ol>
<span id="more"></span>

<h4 id="代码（C语言）："><a href="#代码（C语言）：" class="headerlink" title="代码（C语言）："></a>代码（C语言）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*顺序循环队列及操作的算法实现*/</span></span><br><span class="line"><span class="comment">/*front为队头元素的当前位置，rear为队尾元素的下一个位置*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSIZE 10 <span class="comment">//队列的初始容量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREMENT 5 <span class="comment">//队列的动态增长长度</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*队列的数据结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* data; <span class="comment">//初始化的动态存储空间</span></span><br><span class="line">	<span class="keyword">int</span> front;      <span class="comment">//头指针</span></span><br><span class="line">	<span class="keyword">int</span> rear;       <span class="comment">//尾指针</span></span><br><span class="line">	<span class="keyword">int</span> QueueSize;  <span class="comment">//队列的当前容量</span></span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(SqQueue* Q)</span></span>;            <span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryQueue</span><span class="params">(SqQueue* Q)</span></span>;        <span class="comment">//销毁队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(SqQueue* Q)</span></span>;          <span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span>;            <span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(SqQueue Q, ElemType* e)</span></span>;  <span class="comment">//获取队头元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue Q)</span></span>;           <span class="comment">//获取队列长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTraverse</span><span class="params">(SqQueue Q)</span></span>;        <span class="comment">//遍历并输出队列</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue* Q, ElemType e)</span></span>;  <span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue* Q, ElemType* e)</span></span>; <span class="comment">//出队</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	ElemType d = <span class="number">0</span>;</span><br><span class="line">	srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	SqQueue Q;</span><br><span class="line">	InitQueue(&amp;Q);    <span class="comment">//初始化队列</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入队列初始元素个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;队列初始化成功！\n执行%d次入队操作：\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		d = rand() % <span class="number">90</span> + <span class="number">10</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%-2d次：元素%d入队\n&quot;</span>, i + <span class="number">1</span>, d);</span><br><span class="line">		EnQueue(&amp;Q, d); <span class="comment">//入队</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n打印当前队列：&quot;</span>);</span><br><span class="line">	QueueTraverse(Q);   <span class="comment">//遍历并输出队列</span></span><br><span class="line">	k = QueueLength(Q); <span class="comment">//获取队列长度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n当前队列长度为：%d\n\n&quot;</span>, QueueLength(Q));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;执行%d次出队操作：\n&quot;</span>, k / <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; k / <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		DeQueue(&amp;Q, &amp;d); <span class="comment">//出队</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%-2d次：元素%d出队&quot;</span>, i + <span class="number">1</span>, d);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t打印当前队列：&quot;</span>);</span><br><span class="line">		QueueTraverse(Q);</span><br><span class="line">	&#125;</span><br><span class="line">	n = GetHead(Q, &amp;d); <span class="comment">//获取队头元素，保存到d中</span></span><br><span class="line">	<span class="keyword">if</span> (n) <span class="built_in">printf</span>(<span class="string">&quot;\n队头元素的值：%d\n&quot;</span>, d);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;执行清空队列操作\n&quot;</span>);</span><br><span class="line">	ClearQueue(&amp;Q);     <span class="comment">//清空队列</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;清空队列后,队列是否为空：n=%d(1,为空;0,为不空)\n&quot;</span>, QueueEmpty(Q));</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数实现部分*/</span></span><br><span class="line"><span class="comment">/*【功能1 初始化队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">/*构造一个空队列*/</span></span><br><span class="line">	Q-&gt;data = (ElemType*)<span class="built_in">malloc</span>(INITSIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!Q-&gt;data) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//存储分配失败则返回0</span></span><br><span class="line">	Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">	Q-&gt;QueueSize = INITSIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//初始化成功则返回1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能2 销毁队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DestoryQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;data) <span class="built_in">free</span>(Q-&gt;data);</span><br><span class="line">	Q-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">	Q-&gt;QueueSize = Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能3 清空队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClearQueue</span><span class="params">(SqQueue* Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能4 判断队列是否为空】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//返回1代表为空队列，返回0代表不为空队列</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能5 获取队头元素】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetHead</span><span class="params">(SqQueue Q, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	*e = Q.data[Q.front];<span class="comment">/*将队头元素的值赋给e*/</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能6 获取队列长度】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">QueueLength</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (Q.rear - Q.front + Q.QueueSize) % Q.QueueSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能7 遍历并输出队列】*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QueueTraverse</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = Q.front; <span class="comment">/*i最初指向队头元素*/</span></span><br><span class="line">	<span class="keyword">while</span> (i != Q.rear)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, Q.data[i]);</span><br><span class="line">		i = (i + <span class="number">1</span>) % Q.QueueSize;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能8 入队】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">EnQueue</span><span class="params">(SqQueue* Q, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % Q-&gt;QueueSize == Q-&gt;front)<span class="comment">//循环队列满，牺牲一个空间，rear指向队尾元素的下一个位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		Q-&gt;data = (ElemType*)<span class="built_in">realloc</span>(Q-&gt;data, <span class="keyword">sizeof</span>(ElemType) * (Q-&gt;QueueSize + INCREMENT));</span><br><span class="line">		Q-&gt;QueueSize += INCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (!Q-&gt;data) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	Q-&gt;data[Q-&gt;rear] = e;                  <span class="comment">//将e插在队尾</span></span><br><span class="line">	Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % Q-&gt;QueueSize;<span class="comment">//队尾指针加1</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【功能9 出队】*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeQueue</span><span class="params">(SqQueue* Q, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//队列为空则返回0，代表出队失败</span></span><br><span class="line">	*e = Q-&gt;data[Q-&gt;front];            <span class="comment">//将队头元素的值赋给e</span></span><br><span class="line">	Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % Q-&gt;QueueSize;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序表的常用操作实现</title>
    <url>/2021/11/04/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="顺序表的常用操作实现及测试："><a href="#顺序表的常用操作实现及测试：" class="headerlink" title="顺序表的常用操作实现及测试："></a>顺序表的常用操作实现及测试：</h4><ol>
<li>初始化并建立顺序表</li>
<li>顺序表初始值输入</li>
<li>按位置插入</li>
<li>按位置删除</li>
<li>按值查询</li>
<li>按位置修改</li>
<li>去除顺序表重复元素</li>
<li>顺序表排序</li>
<li>顺序表遍历及输出</li>
<li>合并两个有序顺序表</li>
</ol>
<span id="more"></span>

<h4 id="代码（C语言）："><a href="#代码（C语言）：" class="headerlink" title="代码（C语言）："></a>代码（C语言）：</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*动态顺序表的常用操作实现及测试*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INITSIZE 100  <span class="comment">//顺序表初始容量</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREMENT 10  <span class="comment">//顺序表动态增量</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*数据结构*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType; <span class="comment">//顺序表元素类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>        //顺序表结构体</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType* elem;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="keyword">int</span> listsize;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitSqList</span><span class="params">(SqList* L)</span></span>;                        <span class="comment">//初始化</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputSqList</span><span class="params">(SqList* L)</span></span>;                      <span class="comment">//输入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSqList</span><span class="params">(SqList L)</span></span>;                       <span class="comment">//遍历并输出</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSqList</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span>;   <span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteSqList</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType* e)</span></span>;  <span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateSqList</span><span class="params">(SqList L, ElemType e)</span></span>;           <span class="comment">//按值查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ModifySqList</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span>;   <span class="comment">//按位置修改</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DuplicateRemoveSqList</span><span class="params">(SqList* L)</span></span>;            <span class="comment">//去重</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortSqList</span><span class="params">(SqList* L)</span></span>;                       <span class="comment">//排序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MergeSqList</span><span class="params">(SqList LA, SqList LB, SqList* L)</span></span>; <span class="comment">//合并两个有序顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>;                                    <span class="comment">//测试1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>;                                    <span class="comment">//测试2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>;                                    <span class="comment">//测试3</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span>;                                      <span class="comment">//主菜单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	menu();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数实现*/</span></span><br><span class="line"><span class="comment">/*【1】初始化顺序表，成功返回1，失败返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitSqList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(INITSIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!L-&gt;elem) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	L-&gt;length = <span class="number">0</span>;</span><br><span class="line">	L-&gt;listsize = INITSIZE;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【2】输入顺序表各个元素的值*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InputSqList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入该线性表的元素个数：n=&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">while</span> (n &gt; L-&gt;listsize)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;超过了线性表的初始存储空间，请重新输入：\n&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;length = n;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请依次输入该线性表各元素的值：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;L-&gt;elem[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【3】遍历并输出顺序表的各元素*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintSqList</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;该线性表的元素依次为：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L.length; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L.elem[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【4】在线性表L的第i个位置之前插入新的元素e,成功则返回1，失败返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertSqList</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length + <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//插入位置合法性校验</span></span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length &gt;= L-&gt;listsize)</span><br><span class="line">	&#123;</span><br><span class="line">		ElemType* newbase = (ElemType*)<span class="built_in">realloc</span>(L-&gt;elem, (L-&gt;listsize + INCREMENT) * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">		<span class="keyword">if</span> (!newbase) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		L-&gt;elem = newbase;</span><br><span class="line">		L-&gt;listsize += INCREMENT;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = L-&gt;length - <span class="number">1</span>; j &gt;= i - <span class="number">1</span>; j--)</span><br><span class="line">	&#123;</span><br><span class="line">		L-&gt;elem[j + <span class="number">1</span>] = L-&gt;elem[j];</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;elem[i - <span class="number">1</span>] = e;</span><br><span class="line">	++(L-&gt;length);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【5】在顺序表L中删除第i个元素，并用e返回其值，若成功则返回1，否则返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteSqList</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//删除位置合法性校验</span></span><br><span class="line">	*e = L-&gt;elem[i - <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (j = i; j &lt; L-&gt;length; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		L-&gt;elem[j - <span class="number">1</span>] = L-&gt;elem[j];</span><br><span class="line">	&#125;</span><br><span class="line">	--(L-&gt;length);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【6】在顺序表L中查找第i个值与e相等的元素的位置，若找到，则返回其在L中的位置，否则返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateSqList</span><span class="params">(SqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; L.length &amp;&amp; L.elem[i] != e) i++;</span><br><span class="line">	<span class="keyword">if</span> (L.elem[i] == e) <span class="keyword">return</span> i + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【7】在顺序表L中修改第i个位置的元素，若成功则返回1，否则返回0*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ModifySqList</span><span class="params">(SqList* L, <span class="keyword">int</span> i, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i&lt;<span class="number">1</span> || i&gt;L-&gt;length) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//修改位置合法性校验</span></span><br><span class="line">	L-&gt;elem[i - <span class="number">1</span>] = e;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【8】去除顺序表中的重复元素，相同元素保留靠后的*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DuplicateRemoveSqList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	ElemType e;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt; L-&gt;length; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (L-&gt;elem[i] == L-&gt;elem[j])</span><br><span class="line">			&#123;</span><br><span class="line">				DeleteSqList(L, i + <span class="number">1</span>, &amp;e);</span><br><span class="line">				j--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【9】对线性表各元素按从小到大进行冒泡排序*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SortSqList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; L-&gt;length - <span class="number">1</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; L-&gt;length - <span class="number">1</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (L-&gt;elem[i] &gt; L-&gt;elem[i + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				ElemType temp = L-&gt;elem[i];</span><br><span class="line">				L-&gt;elem[i] = L-&gt;elem[i + <span class="number">1</span>];</span><br><span class="line">				L-&gt;elem[i + <span class="number">1</span>] = temp;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*【10】将两个递增顺序表LA和LB合并为新的递增顺序表L*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MergeSqList</span><span class="params">(SqList LA, SqList LB, SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	L-&gt;listsize = LA.length + LB.length;</span><br><span class="line">	L-&gt;elem = (ElemType*)<span class="built_in">malloc</span>(L-&gt;listsize * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!L-&gt;elem) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; LA.length &amp;&amp; j &lt; LB.length)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (LA.elem[i] &lt;= LB.elem[j]) L-&gt;elem[k++] = LA.elem[i++];</span><br><span class="line">		<span class="keyword">else</span> L-&gt;elem[k++] = LB.elem[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; LA.length) L-&gt;elem[k++] = LA.elem[i++];</span><br><span class="line">	<span class="keyword">while</span> (j &lt; LB.length) L-&gt;elem[k++] = LB.elem[j++];</span><br><span class="line">	L-&gt;length = k;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, status = <span class="number">0</span>;</span><br><span class="line">	ElemType e;</span><br><span class="line">	InitSqList(&amp;L);              <span class="comment">//初始化顺序表测试</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;顺序表L初始化成功！\n&quot;</span>);</span><br><span class="line">	InputSqList(&amp;L);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入待插入元素的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入插入位置：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	status = InsertSqList(&amp;L, i, e);     <span class="comment">//插入测试</span></span><br><span class="line">	<span class="keyword">if</span> (status) PrintSqList(L);             <span class="comment">//输出顺序表L</span></span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;位置不合法，插入失败！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入待删除元素的位置：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	status = DeleteSqList(&amp;L, i, &amp;e);    <span class="comment">//删除测试</span></span><br><span class="line">	<span class="keyword">if</span> (status)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;删除元素的值为：%d\n删除后：&quot;</span>, e);</span><br><span class="line">		PrintSqList(L);             <span class="comment">//输出顺序表L</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;位置不合法，删除失败！\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入待查找元素的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	<span class="keyword">int</span> position = LocateSqList(L, e); <span class="comment">//按值查找测试</span></span><br><span class="line">	<span class="keyword">if</span> (position == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;该顺序表中不存在该元素！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;该元素位置为：第%d个元素\n&quot;</span>, position);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入待修改元素的位置：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入修改后的值：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;e);</span><br><span class="line">	status = ModifySqList(&amp;L, i, e);     <span class="comment">//按位置修改测试</span></span><br><span class="line">	<span class="keyword">if</span> (status)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;修改后，&quot;</span>);</span><br><span class="line">		PrintSqList(L);             <span class="comment">//输出顺序表L</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;位置不合法，修改失败！\n&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList L;</span><br><span class="line">	InitSqList(&amp;L);             <span class="comment">//初始化</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;顺序表L初始化成功！\n&quot;</span>);</span><br><span class="line">	InputSqList(&amp;L);            <span class="comment">//输入顺序表L</span></span><br><span class="line">	PrintSqList(L);             <span class="comment">//输出顺序表L</span></span><br><span class="line">	DuplicateRemoveSqList(&amp;L);  <span class="comment">//去重</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;去除重复元素后：&quot;</span>);</span><br><span class="line">	PrintSqList(L);             <span class="comment">//输出顺序表L</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList L1, L2, L;</span><br><span class="line">	InitSqList(&amp;L);             <span class="comment">//初始化L1</span></span><br><span class="line">	InitSqList(&amp;L1);              <span class="comment">//初始化L</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;顺序表L1初始化成功！\n&quot;</span>);</span><br><span class="line">	InputSqList(&amp;L1);            <span class="comment">//输入顺序表L1</span></span><br><span class="line">	SortSqList(&amp;L1);             <span class="comment">//对L1排序</span></span><br><span class="line">	InitSqList(&amp;L2);             <span class="comment">//初始化L2</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;顺序表L2初始化成功！\n&quot;</span>);</span><br><span class="line">	InputSqList(&amp;L2);            <span class="comment">//输入顺序表L2</span></span><br><span class="line">	SortSqList(&amp;L2);             <span class="comment">//对L2排序</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;将L1和L2合并为新的递增顺序表L：\n&quot;</span>);</span><br><span class="line">	MergeSqList(L1, L2, &amp;L);</span><br><span class="line">	PrintSqList(L);              <span class="comment">//输出顺序表L</span></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1：建立顺序表，在顺序表上实现插入、删除、查找、修改、输出等操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2：去除顺序表中的重复元素\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3：对两个顺序表进行排序及合并操作\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4：退出\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入你的选择：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入的选择不合法，请重新输入：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (sel)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		test01();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		test02();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		test03();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>C++通讯录管理系统</title>
    <url>/2021/10/04/C-%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>基于C++语言和单链表数据结构实现的通讯录管理系统，包含了文件保存、文件读取、添加联系人、删除联系人、查询联系人、修改联系人，通讯录显示、通讯录排序、通讯录清空等功能。</p>
<span id="more"></span>

<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通讯录数据元素*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num;	 <span class="comment">//编号</span></span><br><span class="line">	string name;     <span class="comment">//姓名</span></span><br><span class="line">	string phonenum; <span class="comment">//电话</span></span><br><span class="line">	string address;  <span class="comment">//地址</span></span><br><span class="line">	string relation; <span class="comment">//分组</span></span><br><span class="line">&#125;ElemType;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通讯录链表*/</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;Node, * LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*函数声明列表*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                         <span class="comment">//读取信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save_LinkList</span><span class="params">(<span class="keyword">const</span> LinkList&amp; L)</span></span>;                   <span class="comment">//保存信息</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                         <span class="comment">//初始化通讯录链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                       <span class="comment">//添加联系人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                       <span class="comment">//删除联系人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query_LinkList</span><span class="params">(<span class="keyword">const</span> LinkList&amp; L)</span></span>;                  <span class="comment">//查询联系人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                       <span class="comment">//修改联系人</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(<span class="keyword">const</span> LinkList&amp; L)</span></span>;                  <span class="comment">//通讯录显示</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> ElemType&amp; t1, <span class="keyword">const</span> ElemType&amp; t2)</span></span>;    <span class="comment">//定义sort函数的关系</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                         <span class="comment">//通讯录排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_LinkList</span><span class="params">(LinkList&amp; L)</span></span>;                        <span class="comment">//通讯录清空</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">(LinkList&amp; L)</span></span>;                                  <span class="comment">//主控菜单</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*程序入口---主函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;color 70&quot;</span>);</span><br><span class="line">	LinkList L;</span><br><span class="line">	<span class="built_in">Init_LinkList</span>(L);</span><br><span class="line">	<span class="built_in">Read_LinkList</span>(L);</span><br><span class="line">	<span class="built_in">menu</span>(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取信息函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Read_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node* p = L;</span><br><span class="line">	<span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;contact.txt&quot;</span>, ios::in)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	infile &gt;&gt; len;</span><br><span class="line">	ElemType tem;</span><br><span class="line">	<span class="keyword">while</span> (len--)</span><br><span class="line">	&#123;</span><br><span class="line">		infile &gt;&gt; tem.num &gt;&gt; tem.name &gt;&gt; tem.phonenum &gt;&gt; tem.address &gt;&gt; tem.relation;</span><br><span class="line">		Node* t = <span class="keyword">new</span> Node;</span><br><span class="line">		t-&gt;data = tem;</span><br><span class="line">		t-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		p-&gt;next = t;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	infile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*保存信息函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Save_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node* t = L, * cnt = L;</span><br><span class="line">	<span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">&quot;contact.txt&quot;</span>, ios::out)</span></span>;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (cnt-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		len++;</span><br><span class="line">		cnt = cnt-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	outfile &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (t)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (t != L)</span><br><span class="line">			outfile &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">		t = t-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	outfile.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化通讯录链表函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L = <span class="keyword">new</span> Node;</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*添加联系人函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t**************欢迎来到添加联系人功能***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	Node* t = L;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, flag = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		i++;</span><br><span class="line">		t = t-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (flag)</span><br><span class="line">	&#123;</span><br><span class="line">		Node* p = <span class="keyword">new</span> Node;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入姓名：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; p-&gt;data.name;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入电话：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; p-&gt;data.phonenum;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入地址：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; p-&gt;data.address;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入分组：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; p-&gt;data.relation;</span><br><span class="line">		p-&gt;data.num = i++;</span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		t-&gt;next = p;</span><br><span class="line">		t = t-&gt;next;</span><br><span class="line">		<span class="built_in">Save_LinkList</span>(L); <span class="comment">//将改动保存至文件中</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t添加成功！是否继续添加？（1 是 0 否）&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【0-1】：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; flag;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除联系人函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t**************欢迎来到删除联系人功能***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	Node* p = L, * t = <span class="literal">NULL</span>;</span><br><span class="line">	ElemType tem;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t1 按编号删除&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t2 按姓名删除&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t3 返回主菜单&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【1-3】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; sel;</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新选择【1-3】：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; sel;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请输入待删除联系人的编号：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; tem.num;</span><br><span class="line">		<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			t = p-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (t-&gt;data.num == tem.num)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t待删除联系人信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t编号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;\t\t\t查无此人，无法删除！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t确认删除？（1 是 0 否）&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【0-1】：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; sel;</span><br><span class="line">			<span class="keyword">while</span> (sel &lt; <span class="number">0</span> || sel&gt;<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新选择【0-1】：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; sel;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (sel == <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				p-&gt;next = t-&gt;next;</span><br><span class="line">				<span class="keyword">delete</span> t;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">Save_LinkList</span>(L); <span class="comment">//改动保存至文件中</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">Delete_LinkList</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请输入待删除联系人的姓名：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; tem.name;</span><br><span class="line">		<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			t = p-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (t-&gt;data.name == tem.name)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t待删除联系人信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			p = p-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;\t\t\t查无此人，无法删除！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t确认删除？（1 是 0 否）&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【0-1】：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; sel;</span><br><span class="line">			<span class="keyword">while</span> (sel &lt; <span class="number">0</span> || sel&gt;<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新选择【0-1】：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; sel;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (sel == <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				p-&gt;next = t-&gt;next;</span><br><span class="line">				<span class="keyword">delete</span> t;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t删除成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">Save_LinkList</span>(L); <span class="comment">//改动保存至文件中</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">Delete_LinkList</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*查询联系人函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Query_LinkList</span><span class="params">(<span class="keyword">const</span> LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t**************欢迎来到查询联系人功能***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	Node* t = L;</span><br><span class="line">	ElemType tem;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t1 按编号查询&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t2 按姓名查询&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t3 返回主菜单&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【1-3】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; sel;</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新选择【1-3】：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; sel;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请输入待查询联系人的编号：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; tem.num;</span><br><span class="line">		<span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			t = t-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (t-&gt;data.num == tem.num)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t待查询联系人信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;\t\t\t查无此人！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">Query_LinkList</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请输入待查询联系人的姓名：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; tem.name;</span><br><span class="line">		<span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			t = t-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (t-&gt;data.name == tem.name)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t待查询联系人信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;\t\t\t查无此人！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">Query_LinkList</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*修改联系人函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Modify_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t**************欢迎来到修改联系人功能***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	Node* t = L;</span><br><span class="line">	ElemType tem;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t1 按编号修改&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t2 按姓名修改&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t3 返回主菜单&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【1-3】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; sel;</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">3</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新输入【1-3】：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; sel;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请输入待修改联系人的编号：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; tem.num;</span><br><span class="line">		<span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			t = t-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (t-&gt;data.num == tem.num)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t待修改联系人信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;\t\t\t查无此人，无法修改！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ElemType tem;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入修改后的联系人信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入姓名：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.name;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入电话：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.phonenum;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入地址：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.address;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入分组：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.relation;</span><br><span class="line">			tem.num = t-&gt;data.num;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t确认修改？（1 是 0 否）&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【0-1】：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; sel;</span><br><span class="line">			<span class="keyword">while</span> (sel &lt; <span class="number">0</span> || sel&gt;<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新选择【0-1】：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; sel;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (sel == <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				t-&gt;data = tem;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t修改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">Save_LinkList</span>(L); <span class="comment">//将改动保存至文件中</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">Modify_LinkList</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t请输入待修改联系人的姓名：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; tem.name;</span><br><span class="line">		<span class="keyword">while</span> (t-&gt;next)</span><br><span class="line">		&#123;</span><br><span class="line">			t = t-&gt;next;</span><br><span class="line">			<span class="keyword">if</span> (t-&gt;data.name == tem.name)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t待修改联系人信息如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) cout &lt;&lt; <span class="string">&quot;\t\t\t查无此人，无法修改！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			ElemType tem;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入修改后的联系人信息：&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入姓名：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.name;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入电话：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.phonenum;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入地址：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.address;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t输入分组：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; tem.relation;</span><br><span class="line">			tem.num = t-&gt;data.num;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t确认修改？（1 是 0 否）&quot;</span> &lt;&lt; endl;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【0-1】：&quot;</span>;</span><br><span class="line">			cin &gt;&gt; sel;</span><br><span class="line">			<span class="keyword">while</span> (sel &lt; <span class="number">0</span> || sel&gt;<span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新选择【0-1】：&quot;</span>;</span><br><span class="line">				cin &gt;&gt; sel;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (sel == <span class="number">0</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				t-&gt;data = tem;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;\t\t\t修改成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">				<span class="built_in">Save_LinkList</span>(L); <span class="comment">//将改动保存至文件中</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">Delete_LinkList</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">3</span>) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通讯录显示函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(<span class="keyword">const</span> LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t***************欢迎来到通讯录显示功能***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	Node* t = L-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (t)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">		t = t-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span>;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通讯录排序函数中sort函数的第三个参数*/</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> ElemType&amp; t1, <span class="keyword">const</span> ElemType&amp; t2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> t1.name &lt; t2.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*通讯录排序函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t***************欢迎来到通讯录排序功能***************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	Node* p = L;</span><br><span class="line">	<span class="keyword">int</span> cnt = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		cnt++;</span><br><span class="line">	&#125;</span><br><span class="line">	ElemType* arr = <span class="keyword">new</span> ElemType[cnt];</span><br><span class="line">	p = L;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		arr[i++] = p-&gt;data;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(arr, arr + cnt, compare);</span><br><span class="line">	p = L, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (p-&gt;next)</span><br><span class="line">	&#123;</span><br><span class="line">		p = p-&gt;next;</span><br><span class="line">		p-&gt;data = arr[i++];</span><br><span class="line">		p-&gt;data.num = i;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t对通讯录进行排序并整理如下：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	Node* t = L-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t序号\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名\t&quot;</span> &lt;&lt; <span class="string">&quot;联系电话\t&quot;</span> &lt;&lt; <span class="string">&quot;家庭地址\t&quot;</span> &lt;&lt; <span class="string">&quot;分组&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (t)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span> &lt;&lt; t-&gt;data.num &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.name &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.phonenum &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.address &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; t-&gt;data.relation &lt;&lt; endl;</span><br><span class="line">		t = t-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------------------------------------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">Save_LinkList</span>(L); <span class="comment">//改动保存至文件中</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t&quot;</span>;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*清空通讯录函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_LinkList</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t**************欢迎来到通讯录清空功能*************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t1 确认清空通讯录&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t2 返回主菜单&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t-----------------&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t请慎重选择【1-2】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; sel;</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入不合法,请重新输入【1-2】：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; sel;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		Node* head = L;</span><br><span class="line">		<span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//清空链表,是不清空头节点的，因此从第一个有数据的节点开始释放</span></span><br><span class="line">		Node* curNode = head-&gt;next;</span><br><span class="line">		<span class="keyword">while</span> (curNode != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//先保住下一个节点的位置</span></span><br><span class="line">			Node* nextNode = curNode-&gt;next;</span><br><span class="line">			<span class="built_in">free</span>(curNode);</span><br><span class="line">			curNode = nextNode;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//将头结点next指针置空</span></span><br><span class="line">		head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		<span class="built_in">Save_LinkList</span>(L);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\n\t\t\t&quot;</span>;</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">2</span>) <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*主控菜单函数*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">(LinkList&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> sel;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t***********欢迎来到通讯录管理系统***********&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t你可以进行以下操作:&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             1   添加联系人               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             2   删除联系人               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             3   修改联系人               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             4   查询联系人               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             5   通讯录显示               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             6   通讯录排序               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             7   通讯录清空               |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|             0   退出                     |&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t|------------------------------------------|&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t请选择【0-7】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; sel;</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="string">&#x27;0&#x27;</span> || sel&gt;<span class="string">&#x27;7&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t输入非法,请重新选择【0-7】：&quot;</span>;</span><br><span class="line">		cin &gt;&gt; sel;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (sel)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">		<span class="built_in">Create_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">		<span class="built_in">Delete_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">		<span class="built_in">Modify_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">		<span class="built_in">Query_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:</span><br><span class="line">		<span class="built_in">Print_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>:</span><br><span class="line">		<span class="built_in">Sort_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>:</span><br><span class="line">		<span class="built_in">Clear_LinkList</span>(L);</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="built_in">menu</span>(L);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础练习</title>
    <url>/2021/09/25/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>一些适合小白入门练习的C语言编程题目：</p>
<span id="more"></span>

<h3 id="一、循环结构程序设计"><a href="#一、循环结构程序设计" class="headerlink" title="一、循环结构程序设计"></a>一、循环结构程序设计</h3><h5 id="1、求s-1-2-3-……-98-99-100的值。"><a href="#1、求s-1-2-3-……-98-99-100的值。" class="headerlink" title="1、求s=1+2+3+……+98+99+100的值。"></a>1、求s=1+2+3+……+98+99+100的值。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、求s-1-3-5-……-97-99的值。"><a href="#2、求s-1-3-5-……-97-99的值。" class="headerlink" title="2、求s=1+3+5+……+97+99的值。"></a>2、求s=1+3+5+……+97+99的值。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">99</span>; i = i + <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		s += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、求s-1-3-5-7-……-97-99的值。"><a href="#3、求s-1-3-5-7-……-97-99的值。" class="headerlink" title="3、求s=1-3+5-7+……+97-99的值。"></a>3、求s=1-3+5-7+……+97-99的值。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s += (<span class="number">2</span> * i - <span class="number">1</span>) * <span class="built_in">pow</span>(<span class="number">-1</span>, i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、求π的值，已知π-4≈1-1-3-1-5-1-7-……-，计算至某项的绝对值小于1E-6为止（1E-6表示的是浮点数，即1-10的-6次方）。"><a href="#4、求π的值，已知π-4≈1-1-3-1-5-1-7-……-，计算至某项的绝对值小于1E-6为止（1E-6表示的是浮点数，即1-10的-6次方）。" class="headerlink" title="4、求π的值，已知π/4≈1-1/3+1/5-1/7+…… ，计算至某项的绝对值小于1E-6为止（1E-6表示的是浮点数，即1*10的-6次方）。"></a>4、求π的值，已知π/4≈1-1/3+1/5-1/7+…… ，计算至某项的绝对值小于1E-6为止（1E-6表示的是浮点数，即1*10的-6次方）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> s = <span class="number">0</span>, j = <span class="number">1</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; <span class="number">1</span> / (<span class="number">2</span> * i - <span class="number">1</span>) &gt;= <span class="number">1e-6</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s += j / (<span class="number">2</span> * i - <span class="number">1</span>);</span><br><span class="line">		j = -j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;π的值约为%lf\n&quot;</span>, <span class="number">4</span> * s);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5、求s-1-2-3-4-……-19-20-的值（n-表示n的阶乘）。"><a href="#5、求s-1-2-3-4-……-19-20-的值（n-表示n的阶乘）。" class="headerlink" title="5、求s=1+2!+3!+4!+……+19!+20! 的值（n!表示n的阶乘）。"></a>5、求s=1+2!+3!+4!+……+19!+20! 的值（n!表示n的阶乘）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> k = <span class="number">1</span>, sum = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		k *= i;</span><br><span class="line">		sum += k;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6、求s-1-3-5-7-……-17-19-的值（n-表示n的阶乘）。"><a href="#6、求s-1-3-5-7-……-17-19-的值（n-表示n的阶乘）。" class="headerlink" title="6、求s=1+3!+5!+7!+……+17!+19!的值（n!表示n的阶乘）。"></a>6、求s=1+3!+5!+7!+……+17!+19!的值（n!表示n的阶乘）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">long</span> <span class="keyword">long</span> s = <span class="number">1</span>, sum = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">19</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		s *= i;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) sum += s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7、任意输入x的值，求sinx≈x-x3-3-x5-5-x7-7-……-直到某项的绝对值小于1E-6为止，最后输出sinx的值（1E-6表示的是浮点数，也就是1-10的-6次方）。"><a href="#7、任意输入x的值，求sinx≈x-x3-3-x5-5-x7-7-……-直到某项的绝对值小于1E-6为止，最后输出sinx的值（1E-6表示的是浮点数，也就是1-10的-6次方）。" class="headerlink" title="7、任意输入x的值，求sinx≈x-x3/3!+x5/5!-x7/7!+……,直到某项的绝对值小于1E-6为止，最后输出sinx的值（1E-6表示的是浮点数，也就是1*10的-6次方）。"></a>7、任意输入x的值，求sinx≈x-x3/3!+x5/5!-x7/7!+……,直到某项的绝对值小于1E-6为止，最后输出sinx的值（1E-6表示的是浮点数，也就是1*10的-6次方）。</h5><h6 id="（1）版本一：若输入x的单位为角度："><a href="#（1）版本一：若输入x的单位为角度：" class="headerlink" title="（1）版本一：若输入x的单位为角度："></a>（1）版本一：若输入x的单位为角度：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x = <span class="number">0</span>, y = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">1</span>, jc = <span class="number">1</span>;<span class="comment">//其中jc表示阶乘的值</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入x的值【角度】:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">	x = x * <span class="number">3.1415926</span> / <span class="number">180</span>;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">fabs</span>(<span class="built_in">pow</span>(<span class="number">-1</span>, i) * <span class="built_in">pow</span>(x, j) / jc) &gt;= <span class="number">0.000001</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		y += <span class="built_in">pow</span>(<span class="number">-1</span>, i) * <span class="built_in">pow</span>(x, j) / jc;</span><br><span class="line">		i++;</span><br><span class="line">		j = j + <span class="number">2</span>;</span><br><span class="line">		jc *= (j - <span class="number">1</span>) * j;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sinx = %lf\n&quot;</span>, y);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）版本二：若输入x的单位为弧度："><a href="#（2）版本二：若输入x的单位为弧度：" class="headerlink" title="（2）版本二：若输入x的单位为弧度："></a>（2）版本二：若输入x的单位为弧度：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> i = <span class="number">1</span>, jc = <span class="number">1</span>, sum = <span class="number">0</span>, x = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入x的值【弧度】:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;x);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">pow</span>(x, i) / jc &gt;= <span class="number">0.000001</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += <span class="built_in">pow</span>(<span class="number">-1</span>, (i - <span class="number">1</span>) / <span class="number">2</span>) * <span class="built_in">pow</span>(x, i) / jc;</span><br><span class="line">		i = i + <span class="number">2</span>;</span><br><span class="line">		jc *= i * (i - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;则sinx = %lf\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8、已知s-1-1-2-1-3-2-5-3-8-5-……，求前40项之和。"><a href="#8、已知s-1-1-2-1-3-2-5-3-8-5-……，求前40项之和。" class="headerlink" title="8、已知s=1/1+2/1+3/2+5/3+8/5+……，求前40项之和。"></a>8、已知s=1/1+2/1+3/2+5/3+8/5+……，求前40项之和。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> a[<span class="number">41</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">41</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = (i == <span class="number">0</span> || i == <span class="number">1</span>) ? <span class="number">1</span> : a[i - <span class="number">2</span>] + a[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">40</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += a[i + <span class="number">1</span>] / a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="9、已知s-1-11-111-1111-……-一直加到n位1，n的值自己输入。"><a href="#9、已知s-1-11-111-1111-……-一直加到n位1，n的值自己输入。" class="headerlink" title="9、已知s=1+11+111+1111+……. 一直加到n位1，n的值自己输入。"></a>9、已知s=1+11+111+1111+……. 一直加到n位1，n的值自己输入。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> sum = <span class="number">0</span>, k = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入n的值:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n ; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += k;</span><br><span class="line">		k = <span class="number">10</span> * k + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="10、已知s-1-12-123-1234-…-一直加到n位123…n，n的值自己输入。"><a href="#10、已知s-1-12-123-1234-…-一直加到n位123…n，n的值自己输入。" class="headerlink" title="10、已知s=1+12+123+1234+… 一直加到n位123…n，n的值自己输入。"></a>10、已知s=1+12+123+1234+… 一直加到n位123…n，n的值自己输入。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> ans = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入n的值:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (m = <span class="number">1</span>; ; m *= <span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (i &gt;= m &amp;&amp; i &lt; <span class="number">10</span> * m )</span><br><span class="line">			&#123;</span><br><span class="line">				s = <span class="number">10</span> * m * s + i;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		ans += s;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.0lf\n&quot;</span>, ans);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="11、从键盘上输入若干学生的程序设计成绩，计算并输出所有学生的平均分和最高成绩。当输入负数的时候循环结束，再输出结果。"><a href="#11、从键盘上输入若干学生的程序设计成绩，计算并输出所有学生的平均分和最高成绩。当输入负数的时候循环结束，再输出结果。" class="headerlink" title="11、从键盘上输入若干学生的程序设计成绩，计算并输出所有学生的平均分和最高成绩。当输入负数的时候循环结束，再输出结果。"></a>11、从键盘上输入若干学生的程序设计成绩，计算并输出所有学生的平均分和最高成绩。当输入负数的时候循环结束，再输出结果。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> t = <span class="number">0</span>, ave = <span class="number">0</span>, sum = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入各个学生的C语言成绩（输入负数时结束）:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;t)) <span class="comment">//scanf返回参数的个数，也就是1</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (t &lt; <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (max &lt; t) max = t;</span><br><span class="line">		sum += t;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	ave = sum / i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;平均成绩为:%lf,最高成绩为:%lf\n&quot;</span>, ave, max);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="12、任意输入一个正整数，判断其是否是素数，所谓素数就是指质数。（建议使用2到3种方法来实现判断）。"><a href="#12、任意输入一个正整数，判断其是否是素数，所谓素数就是指质数。（建议使用2到3种方法来实现判断）。" class="headerlink" title="12、任意输入一个正整数，判断其是否是素数，所谓素数就是指质数。（建议使用2到3种方法来实现判断）。"></a>12、任意输入一个正整数，判断其是否是素数，所谓素数就是指质数。（建议使用2到3种方法来实现判断）。</h5><h6 id="（1）版本一："><a href="#（1）版本一：" class="headerlink" title="（1）版本一："></a>（1）版本一：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, flag = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			flag = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n &lt;= <span class="number">1</span> || flag == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;它不是质数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;它是质数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）版本二："><a href="#（2）版本二：" class="headerlink" title="（2）版本二："></a>（2）版本二：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (n % i == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*通过判断以上循环是否完成来确定输入的数是否质数*/</span></span><br><span class="line">	<span class="keyword">if</span> (i == n)	<span class="built_in">printf</span>(<span class="string">&quot;它是质数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;它不是质数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（3）版本三："><a href="#（3）版本三：" class="headerlink" title="（3）版本三："></a>（3）版本三：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= x; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x % i == <span class="number">0</span>) n++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">2</span>) <span class="built_in">printf</span>(<span class="string">&quot;它是质数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;它不是质数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="13、输出1000以内所有的质数。"><a href="#13、输出1000以内所有的质数。" class="headerlink" title="13、输出1000以内所有的质数。"></a>13、输出1000以内所有的质数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (x = <span class="number">2</span>; x &lt;= <span class="number">1000</span>; x++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="14、输入一个正整数，输出比它小的最大的最多的10个质数。"><a href="#14、输入一个正整数，输出比它小的最大的最多的10个质数。" class="headerlink" title="14、输入一个正整数，输出比它小的最大的最多的10个质数。"></a>14、输入一个正整数，输出比它小的最大的最多的10个质数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, i = <span class="number">0</span>, flag = <span class="number">1</span>, num = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;z);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;比这个数小的最大的十个质数为:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (x = z; x &gt;= <span class="number">2</span>; x--)</span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= x; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				flag = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">1</span>)<span class="comment">//此条件值为真，证明了x是素数</span></span><br><span class="line">		&#123;</span><br><span class="line">			num++;<span class="comment">//先计算个数</span></span><br><span class="line">			<span class="keyword">if</span> (num &lt;= <span class="number">10</span>)<span class="comment">//再判断是否在10个以内，如果是，则输出</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">break</span>;<span class="comment">//输出10个素数就终止循环！</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="15、任意输入2个正整数给自变量x和y，求它们的最大公约数和最小公倍数。"><a href="#15、任意输入2个正整数给自变量x和y，求它们的最大公约数和最小公倍数。" class="headerlink" title="15、任意输入2个正整数给自变量x和y，求它们的最大公约数和最小公倍数。"></a>15、任意输入2个正整数给自变量x和y，求它们的最大公约数和最小公倍数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入两个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">	<span class="comment">//通过循环求最大公约数</span></span><br><span class="line">	<span class="keyword">for</span> (i = x; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x % i == <span class="number">0</span> &amp;&amp; y % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最大公约数：%d\n&quot;</span>, i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最小公倍数：%d\n&quot;</span>, x * y / i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="16、爱因斯坦阶梯问题：设有一阶梯，每步跨2阶余1阶，每步跨3阶余2阶，每步跨5阶余4阶，每步跨6阶余5阶，每步跨7阶刚好到顶，问该阶梯一共有多少阶？"><a href="#16、爱因斯坦阶梯问题：设有一阶梯，每步跨2阶余1阶，每步跨3阶余2阶，每步跨5阶余4阶，每步跨6阶余5阶，每步跨7阶刚好到顶，问该阶梯一共有多少阶？" class="headerlink" title="16、爱因斯坦阶梯问题：设有一阶梯，每步跨2阶余1阶，每步跨3阶余2阶，每步跨5阶余4阶，每步跨6阶余5阶，每步跨7阶刚好到顶，问该阶梯一共有多少阶？"></a>16、爱因斯坦阶梯问题：设有一阶梯，每步跨2阶余1阶，每步跨3阶余2阶，每步跨5阶余4阶，每步跨6阶余5阶，每步跨7阶刚好到顶，问该阶梯一共有多少阶？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (!(n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; n % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; n % <span class="number">5</span> == <span class="number">4</span> &amp;&amp; n % <span class="number">6</span> == <span class="number">5</span> &amp;&amp; n % <span class="number">7</span> == <span class="number">0</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		n++;<span class="comment">//求出的值为满足条件的最小值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="17、任意输入一个十进制整数，要求输出对应的二进制结果（最后结果表示为4个字节，即32位二进制的形式）。"><a href="#17、任意输入一个十进制整数，要求输出对应的二进制结果（最后结果表示为4个字节，即32位二进制的形式）。" class="headerlink" title="17、任意输入一个十进制整数，要求输出对应的二进制结果（最后结果表示为4个字节，即32位二进制的形式）。"></a>17、任意输入一个十进制整数，要求输出对应的二进制结果（最后结果表示为4个字节，即32位二进制的形式）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, a[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Input decimal number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x); <span class="comment">//带符号的32位二进制数转换为十进制的范围为[-2147483647,2147483647]</span></span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) a[<span class="number">31</span>] = <span class="number">1</span>;</span><br><span class="line">	y = x &gt; <span class="number">0</span> ? x : -x; <span class="comment">//将x的绝对值赋值给y</span></span><br><span class="line">	<span class="keyword">while</span> (y &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = y % <span class="number">2</span>;</span><br><span class="line">		i++;</span><br><span class="line">		y = y / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="comment">//对于负数，这里计算的是负数的二进制补码</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = !a[i]; <span class="comment">//除开符号位以外其余各位按位求反 1-&gt;0 0-&gt;1</span></span><br><span class="line">		&#125;</span><br><span class="line">		a[<span class="number">0</span>]++;		    <span class="comment">//末位+1</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) <span class="comment">//处理进位</span></span><br><span class="line">		&#123;</span><br><span class="line">			a[i] += a[i - <span class="number">1</span>] / <span class="number">2</span>;</span><br><span class="line">			a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] % <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a[<span class="number">30</span>] = a[<span class="number">30</span>] % <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Output binary number:&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="18、根据媒体发布的信息，2010年中国GDP总量为5-845万亿美元，增长率是10-1-；美国GDP总量是14-536万亿美元，增长率3-3-，在2个GDP增长率保持2010年的水平不变的情况下，编程计算到哪一年中国的GDP总量有望超过美国？"><a href="#18、根据媒体发布的信息，2010年中国GDP总量为5-845万亿美元，增长率是10-1-；美国GDP总量是14-536万亿美元，增长率3-3-，在2个GDP增长率保持2010年的水平不变的情况下，编程计算到哪一年中国的GDP总量有望超过美国？" class="headerlink" title="18、根据媒体发布的信息，2010年中国GDP总量为5.845万亿美元，增长率是10.1%；美国GDP总量是14.536万亿美元，增长率3.3%，在2个GDP增长率保持2010年的水平不变的情况下，编程计算到哪一年中国的GDP总量有望超过美国？"></a>18、根据媒体发布的信息，2010年中国GDP总量为5.845万亿美元，增长率是10.1%；美国GDP总量是14.536万亿美元，增长率3.3%，在2个GDP增长率保持2010年的水平不变的情况下，编程计算到哪一年中国的GDP总量有望超过美国？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">2010</span>;</span><br><span class="line">	<span class="keyword">double</span> m = <span class="number">14.536</span>, z = <span class="number">5.845</span>;</span><br><span class="line">	<span class="keyword">while</span> (m &gt;= z)</span><br><span class="line">	&#123;</span><br><span class="line">		z = z * <span class="number">1.101</span>;</span><br><span class="line">		m = m * <span class="number">1.033</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;到%d年中国的GDP有望超过美国\n&quot;</span>, i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="19、从键盘上任意输入2个正整数给a和b，计算a和b之间所有整数（包括a和b）的累加和，并输出结果。"><a href="#19、从键盘上任意输入2个正整数给a和b，计算a和b之间所有整数（包括a和b）的累加和，并输出结果。" class="headerlink" title="19、从键盘上任意输入2个正整数给a和b，计算a和b之间所有整数（包括a和b）的累加和，并输出结果。"></a>19、从键盘上任意输入2个正整数给a和b，计算a和b之间所有整数（包括a和b）的累加和，并输出结果。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, t = <span class="number">0</span>, i = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入a和b的值(以空格分开)：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	<span class="keyword">if</span> (a &gt; b) <span class="comment">//保证a不大于b</span></span><br><span class="line">	&#123;</span><br><span class="line">		t = a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = a; i &lt;= b; i++) sum += i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;a到b的累加和为：%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="20、张三在10年前存了一笔钱准备用来购房，按照当时的房价，这笔钱可以买房150平方米。已知银行存款年利率为6-，房价却按照每年10-的速度增长，请编写程序，计算张三存的这笔钱现在能购买多少平米的房子？"><a href="#20、张三在10年前存了一笔钱准备用来购房，按照当时的房价，这笔钱可以买房150平方米。已知银行存款年利率为6-，房价却按照每年10-的速度增长，请编写程序，计算张三存的这笔钱现在能购买多少平米的房子？" class="headerlink" title="20、张三在10年前存了一笔钱准备用来购房，按照当时的房价，这笔钱可以买房150平方米。已知银行存款年利率为6%，房价却按照每年10%的速度增长，请编写程序，计算张三存的这笔钱现在能购买多少平米的房子？"></a>20、张三在10年前存了一笔钱准备用来购房，按照当时的房价，这笔钱可以买房150平方米。已知银行存款年利率为6%，房价却按照每年10%的速度增长，请编写程序，计算张三存的这笔钱现在能购买多少平米的房子？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> s = <span class="number">150</span>, m = <span class="number">1</span>, i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		m = m * <span class="number">1.1</span>;</span><br><span class="line">		s = s * <span class="number">1.06</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;张三的存款现在可以购买%lf平米的房子\n&quot;</span>, s / m);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="21、某班级准备举行一次五子棋比赛，参赛选手每人之间必须进行一场对弈，进过统计发现一共进行了300场比赛，编程，计算并输出参赛的人数是多少？"><a href="#21、某班级准备举行一次五子棋比赛，参赛选手每人之间必须进行一场对弈，进过统计发现一共进行了300场比赛，编程，计算并输出参赛的人数是多少？" class="headerlink" title="21、某班级准备举行一次五子棋比赛，参赛选手每人之间必须进行一场对弈，进过统计发现一共进行了300场比赛，编程，计算并输出参赛的人数是多少？"></a>21、某班级准备举行一次五子棋比赛，参赛选手每人之间必须进行一场对弈，进过统计发现一共进行了300场比赛，编程，计算并输出参赛的人数是多少？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (s != <span class="number">300</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		n++;</span><br><span class="line">		s += (n - <span class="number">1</span>); <span class="comment">//握手定理</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="22、输入1000以内所有的完数，所谓完数是指一个数值刚好是它的因子之和（但是因子中不包含本身），例如6-1-2-3-所以6就是完数。"><a href="#22、输入1000以内所有的完数，所谓完数是指一个数值刚好是它的因子之和（但是因子中不包含本身），例如6-1-2-3-所以6就是完数。" class="headerlink" title="22、输入1000以内所有的完数，所谓完数是指一个数值刚好是它的因子之和（但是因子中不包含本身），例如6=1+2+3,所以6就是完数。"></a>22、输入1000以内所有的完数，所谓完数是指一个数值刚好是它的因子之和（但是因子中不包含本身），例如6=1+2+3,所以6就是完数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, i = <span class="number">0</span>, s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (x = <span class="number">1</span>; x &lt;= <span class="number">1000</span>; x++)</span><br><span class="line">	&#123;</span><br><span class="line">		s = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= x / <span class="number">2</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (x % i == <span class="number">0</span>) s += i;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x == s) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="23、一个口袋中有3个红球，5个白球，6个黑球，从其中任意取出8个球，要求至少有一个白球。"><a href="#23、一个口袋中有3个红球，5个白球，6个黑球，从其中任意取出8个球，要求至少有一个白球。" class="headerlink" title="23、一个口袋中有3个红球，5个白球，6个黑球，从其中任意取出8个球，要求至少有一个白球。"></a>23、一个口袋中有3个红球，5个白球，6个黑球，从其中任意取出8个球，要求至少有一个白球。</h5><h6 id="（1）输出所有的可能组合。"><a href="#（1）输出所有的可能组合。" class="headerlink" title="（1）输出所有的可能组合。"></a>（1）输出所有的可能组合。</h6><h6 id="（2）计算这些可能出现的概率是多少？可参考组合数的通项公式及递推公式："><a href="#（2）计算这些可能出现的概率是多少？可参考组合数的通项公式及递推公式：" class="headerlink" title="（2）计算这些可能出现的概率是多少？可参考组合数的通项公式及递推公式："></a>（2）计算这些可能出现的概率是多少？可参考组合数的通项公式及递推公式：</h6><p>$$<br>\begin{flalign}<br>&amp;\begin{cases}<br>C_n^m=\frac {n!}{m!(n-m)!}\\<br>C_n^m=C_{n-1}^m+C_{n-1}^{m-1}<br>\end{cases}&amp;<br>\end{flalign}<br>$$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> <span class="comment">//通过递归求解组合C(n,m)的值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (m == <span class="number">0</span> || m == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> C(n - <span class="number">1</span>, m) + C(n - <span class="number">1</span>, m - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> white = <span class="number">0</span>, red = <span class="number">0</span>, black = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> p = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (white = <span class="number">1</span>; white &lt;= <span class="number">5</span>; white++) <span class="comment">//要求至少有一个白球，所以white的值从1开始</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (red = <span class="number">0</span>; red &lt;= <span class="number">3</span>; red++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (black = <span class="number">0</span>; black &lt;= <span class="number">6</span>; black++)</span><br><span class="line">			&#123;</span><br><span class="line">				p = C(<span class="number">5</span>, white) * C(<span class="number">3</span>, red) * C(<span class="number">6</span>, black) / C(<span class="number">14</span>, <span class="number">8</span>); <span class="comment">//通过组合求概率</span></span><br><span class="line">				<span class="keyword">if</span> (white + red + black == <span class="number">8</span>)</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d个白球,%d个红球,%d个黑球的概率为:%lf\n&quot;</span>, white, red, black, p);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="24、有若干只鸡兔同在一个笼子里，从上面数，有36个头，从下面数，有100只脚。问笼中各有多少只鸡和兔？"><a href="#24、有若干只鸡兔同在一个笼子里，从上面数，有36个头，从下面数，有100只脚。问笼中各有多少只鸡和兔？" class="headerlink" title="24、有若干只鸡兔同在一个笼子里，从上面数，有36个头，从下面数，有100只脚。问笼中各有多少只鸡和兔？"></a>24、有若干只鸡兔同在一个笼子里，从上面数，有36个头，从下面数，有100只脚。问笼中各有多少只鸡和兔？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>, r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">36</span>; c++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (r = <span class="number">0</span>; r &lt;= <span class="number">36</span>; r++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="number">2</span> * c + <span class="number">4</span> * r == <span class="number">100</span> &amp;&amp; c + r == <span class="number">36</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;鸡:%d只 兔:%d只\n&quot;</span>, c, r);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="25、0-9可以组成多少个没有重复的3位偶数？这里没有重复的就是指该数值中每位上的数值互不相等。"><a href="#25、0-9可以组成多少个没有重复的3位偶数？这里没有重复的就是指该数值中每位上的数值互不相等。" class="headerlink" title="25、0-9可以组成多少个没有重复的3位偶数？这里没有重复的就是指该数值中每位上的数值互不相等。"></a>25、0-9可以组成多少个没有重复的3位偶数？这里没有重复的就是指该数值中每位上的数值互不相等。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, sum = <span class="number">0</span>, a1 = <span class="number">0</span>, a2 = <span class="number">0</span>, a3 = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">100</span>; i &lt;= <span class="number">999</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a1 = i % <span class="number">10</span>; <span class="comment">//个位</span></span><br><span class="line">		a2 = i / <span class="number">10</span> % <span class="number">10</span>; <span class="comment">//十位</span></span><br><span class="line">		a3 = i / <span class="number">100</span> % <span class="number">10</span>; <span class="comment">//百位</span></span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; a1 != a2 &amp;&amp; a1 != a3 &amp;&amp; a2 != a3)</span><br><span class="line">			sum++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="26、编写程序输出9-9乘法表。"><a href="#26、编写程序输出9-9乘法表。" class="headerlink" title="26、编写程序输出9*9乘法表。"></a>26、编写程序输出9*9乘法表。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\t&quot;</span>, j, i, i * j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="27、求出用1元人民币兑换1分，2分，5分硬币的所有兑换方案，要求兑换硬币总数是70枚。"><a href="#27、求出用1元人民币兑换1分，2分，5分硬币的所有兑换方案，要求兑换硬币总数是70枚。" class="headerlink" title="27、求出用1元人民币兑换1分，2分，5分硬币的所有兑换方案，要求兑换硬币总数是70枚。"></a>27、求出用1元人民币兑换1分，2分，5分硬币的所有兑换方案，要求兑换硬币总数是70枚。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (a = <span class="number">0</span>; a &lt;= <span class="number">100</span>; a++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (b = <span class="number">0</span>; b &lt;= <span class="number">50</span>; b++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (c = <span class="number">0</span>; c &lt;= <span class="number">20</span>; c++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a + b + c == <span class="number">70</span> &amp;&amp; a + <span class="number">2</span> * b + <span class="number">5</span> * c == <span class="number">100</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					sum++;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;第%d种方案：1分%d枚,2分%d枚,5分%d枚\n&quot;</span>, sum, a, b, c);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="28、水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153-13-53-33。-本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间-m-n-内所有的水仙花数。"><a href="#28、水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153-13-53-33。-本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间-m-n-内所有的水仙花数。" class="headerlink" title="28、水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=13+53+33。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间(m,n)内所有的水仙花数。"></a>28、水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=13+53+33。 本题要求编写两个函数，一个判断给定整数是否水仙花数，另一个按从小到大的顺序打印出给定区间(m,n)内所有的水仙花数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">narcissistic</span><span class="params">(<span class="keyword">int</span> number)</span></span>; <span class="comment">//判断是否是水仙花数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span>; <span class="comment">//打印m和n之间的水仙花数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">	PrintN(m, n);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">narcissistic</span><span class="params">(<span class="keyword">int</span> number)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">50</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, j = <span class="number">0</span>, sum = <span class="number">0</span>, k = <span class="number">0</span>, t = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> n = number;</span><br><span class="line">	<span class="keyword">while</span> (number &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i++] = number % <span class="number">10</span>;</span><br><span class="line">		number /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; i; k++) t *= a[j];</span><br><span class="line">		sum += t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sum == n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintN</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = m + <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (narcissistic(i) == <span class="number">1</span>)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="29、输出以下图形（必须用循环的思想来解决）。"><a href="#29、输出以下图形（必须用循环的思想来解决）。" class="headerlink" title="29、输出以下图形（必须用循环的思想来解决）。"></a>29、输出以下图形（必须用循环的思想来解决）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   *</span><br><span class="line">  ***</span><br><span class="line"> *****</span><br><span class="line">*******</span><br><span class="line"> *****</span><br><span class="line">  ***</span><br><span class="line">   *</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, x = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i++) <span class="comment">//第1至4行</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= <span class="number">6</span> - i; k++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (x = <span class="number">1</span>; x &lt;= <span class="number">2</span> * i - <span class="number">1</span>; x++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">3</span>; i &gt;= <span class="number">1</span>; i--) <span class="comment">//第5至7行</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">1</span>; k &lt;= <span class="number">6</span> - i; k++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (x = <span class="number">1</span>; x &lt;= <span class="number">2</span> * i - <span class="number">1</span>; x++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="30、某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。现在算起来，他一共吹熄了236根蜡烛。请问，他从多少岁开始过生日party的？"><a href="#30、某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。现在算起来，他一共吹熄了236根蜡烛。请问，他从多少岁开始过生日party的？" class="headerlink" title="30、某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。现在算起来，他一共吹熄了236根蜡烛。请问，他从多少岁开始过生日party的？"></a>30、某君从某年开始每年都举办一次生日party，并且每次都要吹熄与年龄相同根数的蜡烛。现在算起来，他一共吹熄了236根蜡烛。请问，他从多少岁开始过生日party的？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>, sum = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (y = <span class="number">1</span>; y &lt;= <span class="number">236</span>; y++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum = <span class="number">0</span>; <span class="comment">//表示吹熄的蜡烛总数</span></span><br><span class="line">		<span class="keyword">for</span> (i = y; i &lt;= <span class="number">236</span>; i++) <span class="comment">//从第y岁开始吹</span></span><br><span class="line">		&#123;</span><br><span class="line">			sum += i;</span><br><span class="line">			<span class="keyword">if</span> (sum == <span class="number">236</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;从%d岁开始过生日\n&quot;</span>, y);</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; <span class="number">236</span>)</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="comment">//运行结束后可以得到26和236两个答案，理论都可行，但236实际不可能，故答案为26</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="31、输入年月日，计算这天是该年的第几天。"><a href="#31、输入年月日，计算这天是该年的第几天。" class="headerlink" title="31、输入年月日，计算这天是该年的第几天。"></a>31、输入年月日，计算这天是该年的第几天。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> year = <span class="number">0</span>, month = <span class="number">0</span>, day = <span class="number">0</span>, s = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入年月日（中间用空格隔开）: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line">	i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= month - <span class="number">1</span>)        <span class="comment">//计算所有整月的总天数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">3</span> || i == <span class="number">5</span> || i == <span class="number">7</span> || i == <span class="number">8</span> || i == <span class="number">10</span>)</span><br><span class="line">			s = s + <span class="number">31</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">9</span> || i == <span class="number">11</span>)</span><br><span class="line">			s = s + <span class="number">30</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">			s = s + <span class="number">28</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	s = s + day;                 <span class="comment">//加上该非整月的day天</span></span><br><span class="line">	<span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &amp;&amp; month &gt;= <span class="number">3</span>)</span><br><span class="line">		s++;                 <span class="comment">//如果为闰年，并且月份在2月之后，则s+1</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="32、输入一个起始年月日，再输入一个终止年月日，计算这2个日期之间一共有多少天？"><a href="#32、输入一个起始年月日，再输入一个终止年月日，计算这2个日期之间一共有多少天？" class="headerlink" title="32、输入一个起始年月日，再输入一个终止年月日，计算这2个日期之间一共有多少天？"></a>32、输入一个起始年月日，再输入一个终止年月日，计算这2个日期之间一共有多少天？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DateNumber</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//函数DateNumber的作用是计算日期year-month-day是该年的第几天</span></span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= month - <span class="number">1</span>)       <span class="comment">//计算所有整月的总天数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">3</span> || i == <span class="number">5</span> || i == <span class="number">7</span> || i == <span class="number">8</span> || i == <span class="number">10</span>)</span><br><span class="line">			s = s + <span class="number">31</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">9</span> || i == <span class="number">11</span>)</span><br><span class="line">			s = s + <span class="number">30</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">			s = s + <span class="number">28</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	s = s + day;               <span class="comment">//加上该日期所处非整月的day天</span></span><br><span class="line">	<span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &amp;&amp; month &gt;= <span class="number">3</span>)</span><br><span class="line">		s++;               <span class="comment">//如果为闰年，并且月份在2月之后，则s+1</span></span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> y1 = <span class="number">0</span>, m1 = <span class="number">0</span>, d1 = <span class="number">0</span>, y2 = <span class="number">0</span>, m2 = <span class="number">0</span>, d2 = <span class="number">0</span>, s1 = <span class="number">0</span>, s2 = <span class="number">0</span>, i = <span class="number">0</span>, result = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入起始年月日（用空格隔开）: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;y1, &amp;m1, &amp;d1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入终止年月日（用空格隔开）: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;y2, &amp;m2, &amp;d2);</span><br><span class="line">	s1 = DateNumber(y1, m1, d1); <span class="comment">//调用函数DateNumber计算日期y1-m1-d1处于y1年的第几天</span></span><br><span class="line">	s2 = DateNumber(y2, m2, d2); <span class="comment">//调用函数DateNumber计算日期y2-m2-d2处于y2年的第几天</span></span><br><span class="line">	<span class="comment">//总天数=起始年剩的天数+中间所有年的天数+终止年已经过了的天数</span></span><br><span class="line">	result = <span class="number">365</span> - s1 + <span class="number">365</span> * (y2 - y1 - <span class="number">1</span>) + s2;<span class="comment">//先默认都是平年，后面再纠正由于闰年带来的误差</span></span><br><span class="line">	<span class="keyword">for</span> (i = y1 + <span class="number">1</span>; i &lt;= y2 - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span> || i % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">			result++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> ((y1 % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y1 % <span class="number">100</span> != <span class="number">0</span> || y1 % <span class="number">400</span> == <span class="number">0</span>) &amp;&amp; (y1 != y2))</span><br><span class="line">		result++;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;从起始日至终止日共经过%d天\n&quot;</span>, result);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="33、任意输入一个年份，输出该年的日历（以下公式中的-均代表取整）。"><a href="#33、任意输入一个年份，输出该年的日历（以下公式中的-均代表取整）。" class="headerlink" title="33、任意输入一个年份，输出该年的日历（以下公式中的 [ ] 均代表取整）。"></a>33、任意输入一个年份，输出该年的日历（以下公式中的 [ ] 均代表取整）。</h5><h6 id="（1）公式一：输入年月日year-month-day，求出该日期在该年是第S天，再由S和year求出对应星期w。"><a href="#（1）公式一：输入年月日year-month-day，求出该日期在该年是第S天，再由S和year求出对应星期w。" class="headerlink" title="（1）公式一：输入年月日year-month-day，求出该日期在该年是第S天，再由S和year求出对应星期w。"></a>（1）公式一：输入年月日year-month-day，求出该日期在该年是第S天，再由S和year求出对应星期w。</h6><p>$$<br>\begin{flalign}<br>&amp;\begin{cases}<br>w=[year-1]+[(year-1)/4]-[(year-1)/100]+[(year-1)/400]+S\\<br>S=S(year,month,day)<br>\end{cases}&amp;<br>\end{flalign}<br>$$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DateToWeek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>, s = <span class="number">0</span>, week = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= month - <span class="number">1</span>)       <span class="comment">//计算所有整月的总天数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">3</span> || i == <span class="number">5</span> || i == <span class="number">7</span> || i == <span class="number">8</span> || i == <span class="number">10</span>)</span><br><span class="line">			s = s + <span class="number">31</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">9</span> || i == <span class="number">11</span>)</span><br><span class="line">			s = s + <span class="number">30</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">			s = s + <span class="number">28</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	s = s + day;               <span class="comment">//加上该日期所处非整月的day天</span></span><br><span class="line">	<span class="keyword">if</span> ((year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &amp;&amp; month &gt;= <span class="number">3</span>)</span><br><span class="line">		s++;</span><br><span class="line">	week = ((year - <span class="number">1</span>) + (year - <span class="number">1</span>) / <span class="number">4</span> - (year - <span class="number">1</span>) / <span class="number">100</span> + (year - <span class="number">1</span>) / <span class="number">400</span> + s) % <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">return</span> week;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>, m = <span class="number">0</span>, d = <span class="number">0</span>, w = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;  输入年份：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> Days[<span class="number">12</span>] = &#123; <span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span> &#125;;</span><br><span class="line">	<span class="keyword">if</span> (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">		Days[<span class="number">1</span>]++; <span class="comment">//闰年2月加一天</span></span><br><span class="line">	<span class="keyword">for</span> (m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;          %4d年%2d月\n&quot;</span>, y, m);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  --------------------------\n&quot;</span>);</span><br><span class="line">		w = DateToWeek(y, m, <span class="number">1</span>); <span class="comment">//该年每个月1号为星期w</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  一  二  三  四  五  六  日\n&quot;</span>); <span class="comment">//中式日历排版</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= (w - <span class="number">1</span> + <span class="number">7</span>) % <span class="number">7</span>; i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;    &quot;</span>);  <span class="comment">//每次循环打印4个空格，循环次数由w决定</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= Days[m - <span class="number">1</span>]; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, i);</span><br><span class="line">			<span class="keyword">if</span> ((w + i - <span class="number">1</span> + <span class="number">7</span>) % <span class="number">7</span> == <span class="number">0</span>)  <span class="comment">//换行依据和w有关</span></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）公式二：即蔡勒公式，输入年月日year-month-day，根据方程求出该日期对应星期w。"><a href="#（2）公式二：即蔡勒公式，输入年月日year-month-day，根据方程求出该日期对应星期w。" class="headerlink" title="（2）公式二：即蔡勒公式，输入年月日year-month-day，根据方程求出该日期对应星期w。"></a>（2）公式二：即蔡勒公式，输入年月日year-month-day，根据方程求出该日期对应星期w。</h6><p>$$<br>\begin{flalign}<br>&amp;\begin{cases} w=([\frac{p}{4}]-2p+q+[\frac{q}{4}]+[\frac{13×(month+1)}{5}]+day-1)\bmod 7 \\p=[\frac{year}{100}]\\q=year\bmod 100\end{cases}&amp;<br>\end{flalign}<br>$$</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DateToWeek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (month == <span class="number">1</span> || month == <span class="number">2</span>) <span class="comment">//判断month是否为1或2　</span></span><br><span class="line">	&#123;</span><br><span class="line">		year--;</span><br><span class="line">		month += <span class="number">12</span>; <span class="comment">//蔡勒公式需要把当年的1月和2月视作前一年的13月和14月</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> ye = year / <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> ar = year % <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> week = ye / <span class="number">4</span> - <span class="number">2</span> * ye + ar + ar / <span class="number">4</span> + <span class="number">26</span> * (month + <span class="number">1</span>) / <span class="number">10</span> + day - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (week &lt; <span class="number">0</span>)</span><br><span class="line">		week += <span class="number">7</span>;</span><br><span class="line">	week %= <span class="number">7</span>;</span><br><span class="line">	<span class="keyword">return</span> week;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> y = <span class="number">0</span>, m = <span class="number">0</span>, d = <span class="number">0</span>, w = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;  输入年份：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> Days[<span class="number">12</span>] = &#123; <span class="number">31</span>,<span class="number">28</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span>,<span class="number">30</span>,<span class="number">31</span> &#125;;</span><br><span class="line">	<span class="keyword">if</span> (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>)</span><br><span class="line">		Days[<span class="number">1</span>]++; <span class="comment">//闰年2月加一天</span></span><br><span class="line">	<span class="keyword">for</span> (m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;          %4d年%2d月\n&quot;</span>, y, m);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  --------------------------\n&quot;</span>);</span><br><span class="line">		w = DateToWeek(y, m, <span class="number">1</span>); <span class="comment">//该年每个月1号为星期w</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;  日  一  二  三  四  五  六\n&quot;</span>); <span class="comment">//西式日历排版</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= w; i++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;    &quot;</span>); <span class="comment">//每次循环打印4个空格，循环次数由w决定</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= Days[m - <span class="number">1</span>]; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%4d&quot;</span>, i);</span><br><span class="line">			<span class="keyword">if</span> ((w + i) % <span class="number">7</span> == <span class="number">0</span>)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h3><h5 id="1、输入一个寝室6位同学的身高，要求按照从小到大的顺序输出。"><a href="#1、输入一个寝室6位同学的身高，要求按照从小到大的顺序输出。" class="headerlink" title="1、输入一个寝室6位同学的身高，要求按照从小到大的顺序输出。"></a>1、输入一个寝室6位同学的身高，要求按照从小到大的顺序输出。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> h[<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;, t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入第%d个同学的身高:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;h[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (h[i] &gt; h[i + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				t = h[i];</span><br><span class="line">				h[i] = h[i + <span class="number">1</span>];</span><br><span class="line">				h[i + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="comment">//冒泡排序法，考试重点</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;从小到大排列为:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.2lf  &quot;</span>, h[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、输入某班级所有同学的程序设计技术期末成绩（人数是33人），要求输出最好的2位同学的成绩。"><a href="#2、输入某班级所有同学的程序设计技术期末成绩（人数是33人），要求输出最好的2位同学的成绩。" class="headerlink" title="2、输入某班级所有同学的程序设计技术期末成绩（人数是33人），要求输出最好的2位同学的成绩。"></a>2、输入某班级所有同学的程序设计技术期末成绩（人数是33人），要求输出最好的2位同学的成绩。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> h[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;, t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入第%d个同学的C语言成绩:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;h[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">31</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (h[i] &gt; h[i + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				t = h[i];</span><br><span class="line">				h[i] = h[i + <span class="number">1</span>];</span><br><span class="line">				h[i + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;两个最好成绩为:%lf和%lf\n&quot;</span>, h[<span class="number">31</span>], h[<span class="number">32</span>]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、学校举行校园歌手大赛，一共有n位裁判（n由自己输入），这n位裁判位为选手打分，去掉一个最高分和去掉一个最低分，再计算平均分就是该选手的最后得分，请编写程序模仿7位裁判为某位选手的打分过程。"><a href="#3、学校举行校园歌手大赛，一共有n位裁判（n由自己输入），这n位裁判位为选手打分，去掉一个最高分和去掉一个最低分，再计算平均分就是该选手的最后得分，请编写程序模仿7位裁判为某位选手的打分过程。" class="headerlink" title="3、学校举行校园歌手大赛，一共有n位裁判（n由自己输入），这n位裁判位为选手打分，去掉一个最高分和去掉一个最低分，再计算平均分就是该选手的最后得分，请编写程序模仿7位裁判为某位选手的打分过程。"></a>3、学校举行校园歌手大赛，一共有n位裁判（n由自己输入），这n位裁判位为选手打分，去掉一个最高分和去掉一个最低分，再计算平均分就是该选手的最后得分，请编写程序模仿7位裁判为某位选手的打分过程。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> t = <span class="number">0</span>, ave = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入裁判数量:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">double</span>* a = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="number">8</span> * n); <span class="comment">//动态申请内存;</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请第%d个裁判打分:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n - <span class="number">2</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				t = a[i];</span><br><span class="line">				a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">				a[i + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">		sum = sum + a[i];</span><br><span class="line">	ave = sum / (n - <span class="number">2</span>); <span class="comment">//计算平均分</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;去掉最高分和最低分,选手最后平均得分为%lf\n&quot;</span>, ave);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、任意输入10个数值，计算出它们的平均值，然后求得并输出与平均值最接近的数。"><a href="#4、任意输入10个数值，计算出它们的平均值，然后求得并输出与平均值最接近的数。" class="headerlink" title="4、任意输入10个数值，计算出它们的平均值，然后求得并输出与平均值最接近的数。"></a>4、任意输入10个数值，计算出它们的平均值，然后求得并输出与平均值最接近的数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> h[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;, k[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">double</span> ave = <span class="number">0</span>, sum = <span class="number">0</span>, min = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入第%d个同学的身高:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;h[i]);</span><br><span class="line">		sum = sum + h[i];</span><br><span class="line">	&#125;</span><br><span class="line">	ave = sum / <span class="number">10</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;平均身高为%lf\n&quot;</span>, ave);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">		k[i] = <span class="built_in">fabs</span>(h[i] - ave); 	<span class="comment">//求出各身高与平均值的差的绝对值</span></span><br><span class="line"></span><br><span class="line">	min = k[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (min &gt; k[i])</span><br><span class="line">			min = k[i];	<span class="comment">//求十个差值中的最小值</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">fabs</span>(ave - h[i]) == min) <span class="comment">//找出满足要求的那个身高</span></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;与平均值最接近的身高为%lf\n&quot;</span>, h[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5、输入班级33位同学的程序设计技术期末成绩（百分制，分数控制在0-100之间），分别统计优，良，中，及格，不及格等5种情况的人数，以及百分比。"><a href="#5、输入班级33位同学的程序设计技术期末成绩（百分制，分数控制在0-100之间），分别统计优，良，中，及格，不及格等5种情况的人数，以及百分比。" class="headerlink" title="5、输入班级33位同学的程序设计技术期末成绩（百分制，分数控制在0-100之间），分别统计优，良，中，及格，不及格等5种情况的人数，以及百分比。"></a>5、输入班级33位同学的程序设计技术期末成绩（百分制，分数控制在0-100之间），分别统计优，良，中，及格，不及格等5种情况的人数，以及百分比。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>, e = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;第%d个同学的成绩【0-100】为:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x[i]);</span><br><span class="line">		<span class="keyword">while</span> (x[i] &gt; <span class="number">100</span> || x[i] &lt; <span class="number">0</span>) <span class="comment">//纠错功能</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;你输入的分数不正确，请你重新输入第%d个同学的成绩[0,100]:&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">32</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">90</span> &lt;= x[i] &amp;&amp; x[i] &lt;= <span class="number">100</span>)</span><br><span class="line">			a++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">80</span> &lt;= x[i])</span><br><span class="line">			b++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">70</span> &lt;= x[i])</span><br><span class="line">			c++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">60</span> &lt;= x[i])</span><br><span class="line">			d++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">0</span> &lt;= x[i])</span><br><span class="line">			e++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;优秀%d人,占比%lf%%\n&quot;</span>, a, (<span class="keyword">double</span>)a / <span class="number">33</span> * <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;良好%d人,占比%lf%%\n&quot;</span>, b, (<span class="keyword">double</span>)b / <span class="number">33</span> * <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;中等%d人,占比%lf%%\n&quot;</span>, c, (<span class="keyword">double</span>)c / <span class="number">33</span> * <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;及格%d人,占比%lf%%\n&quot;</span>, d, (<span class="keyword">double</span>)d / <span class="number">33</span> * <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;不及格%d人,占比%lf%%\n&quot;</span>, e, (<span class="keyword">double</span>)e / <span class="number">33</span> * <span class="number">100</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6、将一个整数逆序排列并输出。"><a href="#6、将一个整数逆序排列并输出。" class="headerlink" title="6、将一个整数逆序排列并输出。"></a>6、将一个整数逆序排列并输出。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, k = <span class="number">0</span>, a = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">	x = k &gt; <span class="number">0</span> ? k : -k;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;逆序排列后为：&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (k &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (k == <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a = x % <span class="number">10</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a);</span><br><span class="line">		x = x / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7、FIBONACCI数列，已知该数列的第1个数值是1，第2个数值也是1，从第3个数值开始，每个数值等于其前2个数值之和，请编程输出该数列的前40项。"><a href="#7、FIBONACCI数列，已知该数列的第1个数值是1，第2个数值也是1，从第3个数值开始，每个数值等于其前2个数值之和，请编程输出该数列的前40项。" class="headerlink" title="7、FIBONACCI数列，已知该数列的第1个数值是1，第2个数值也是1，从第3个数值开始，每个数值等于其前2个数值之和，请编程输出该数列的前40项。"></a>7、FIBONACCI数列，已知该数列的第1个数值是1，第2个数值也是1，从第3个数值开始，每个数值等于其前2个数值之和，请编程输出该数列的前40项。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">40</span>] = &#123; <span class="number">0</span> &#125;, i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">39</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = (i == <span class="number">0</span> || i == <span class="number">1</span>) ? <span class="number">1</span> : a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8、编写程序，请给一个一维数组任意输入6个整数，例如：假设输入如下数值："><a href="#8、编写程序，请给一个一维数组任意输入6个整数，例如：假设输入如下数值：" class="headerlink" title="8、编写程序，请给一个一维数组任意输入6个整数，例如：假设输入如下数值："></a>8、编写程序，请给一个一维数组任意输入6个整数，例如：假设输入如下数值：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span> 		<span class="number">4</span>	 	<span class="number">8</span> 		<span class="number">9</span> 		<span class="number">1</span> 		<span class="number">5</span></span><br></pre></td></tr></table></figure>

<h5 id="要求建立一个具有如下内容的方阵并输出："><a href="#要求建立一个具有如下内容的方阵并输出：" class="headerlink" title="要求建立一个具有如下内容的方阵并输出："></a>要求建立一个具有如下内容的方阵并输出：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>		<span class="number">7</span> 		<span class="number">4</span>	 	<span class="number">8</span> 		<span class="number">9</span> 		<span class="number">1</span></span><br><span class="line"><span class="number">1</span>		<span class="number">5</span>		<span class="number">7</span> 		<span class="number">4</span>	 	<span class="number">8</span> 		<span class="number">9</span></span><br><span class="line"><span class="number">9</span>		<span class="number">1</span>		<span class="number">5</span>		<span class="number">7</span> 		<span class="number">4</span>	 	<span class="number">8</span></span><br><span class="line"><span class="number">8</span>		<span class="number">9</span>		<span class="number">1</span>		<span class="number">5</span>		<span class="number">7</span> 		<span class="number">4</span></span><br><span class="line"><span class="number">4</span>		<span class="number">8</span>		<span class="number">9</span>		<span class="number">1</span>		<span class="number">5</span>		<span class="number">7</span></span><br><span class="line"><span class="number">7</span>		<span class="number">4</span>		<span class="number">8</span>		<span class="number">9</span>		<span class="number">1</span>		<span class="number">5</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">6</span>][<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, m = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;任意输入六个数值:&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[<span class="number">5</span>][i]);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (m = <span class="number">0</span>; m &lt;= <span class="number">5</span>; m++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (i - j == <span class="number">5</span> - m || i - j == <span class="number">-1</span> - m) 	<span class="comment">//计算二维数组各个变量的值</span></span><br><span class="line">					a[i][j] = a[<span class="number">5</span>][m];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i][j]); <span class="comment">//二维数组的矩阵形式输出</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="9、请编写程序实现功能：从键盘上输入6名学生的5门成绩，分别统计出每个学生的平均成绩和总成绩，并输出。"><a href="#9、请编写程序实现功能：从键盘上输入6名学生的5门成绩，分别统计出每个学生的平均成绩和总成绩，并输出。" class="headerlink" title="9、请编写程序实现功能：从键盘上输入6名学生的5门成绩，分别统计出每个学生的平均成绩和总成绩，并输出。"></a>9、请编写程序实现功能：从键盘上输入6名学生的5门成绩，分别统计出每个学生的平均成绩和总成绩，并输出。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> s[<span class="number">6</span>][<span class="number">7</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入第%d位同学的5门成绩(以空格分开)：&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;s[i][j]);</span><br><span class="line">			s[i][<span class="number">5</span>] += s[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		s[i][<span class="number">6</span>] = s[i][<span class="number">5</span>] / <span class="number">5</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;科目&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;高数&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;思修&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;英语&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;离散&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;C语言&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;总分&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;平均分&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;成绩&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">7</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-10.0lf&quot;</span>, s[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="10、任意输入3行4列的矩阵中的所有值，求转置矩阵。"><a href="#10、任意输入3行4列的矩阵中的所有值，求转置矩阵。" class="headerlink" title="10、任意输入3行4列的矩阵中的所有值，求转置矩阵。"></a>10、任意输入3行4列的矩阵中的所有值，求转置矩阵。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;, b[<span class="number">4</span>][<span class="number">3</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入3行4列的矩阵的值:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			b[j][i] = a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其转置矩阵为：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">2</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, b[j][i]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="11、任意输入一个二维数组4行5列的所有制，找到并输出该二维数组中最大值及其位置。"><a href="#11、任意输入一个二维数组4行5列的所有制，找到并输出该二维数组中最大值及其位置。" class="headerlink" title="11、任意输入一个二维数组4行5列的所有制，找到并输出该二维数组中最大值及其位置。"></a>11、任意输入一个二维数组4行5列的所有制，找到并输出该二维数组中最大值及其位置。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>, max = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入4行5列矩阵的值:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	max = a[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i][j] &gt; max)</span><br><span class="line">			&#123;</span><br><span class="line">				max = a[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">4</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i][j] == max)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;最大值为a[%d][%d]=%d\n&quot;</span>, i, j, max);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="12、编写程序输出n行n列的杨辉三角。n的值自己输入-如下所示："><a href="#12、编写程序输出n行n列的杨辉三角。n的值自己输入-如下所示：" class="headerlink" title="12、编写程序输出n行n列的杨辉三角。n的值自己输入,如下所示："></a>12、编写程序输出n行n列的杨辉三角。n的值自己输入,如下所示：</h5><h5 id="输入："><a href="#输入：" class="headerlink" title="输入："></a>输入：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>

<h5 id="输出："><a href="#输出：" class="headerlink" title="输出："></a>输出：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">6</span> <span class="number">4</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">100</span>][<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, j = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入n的值:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d行%d列的杨辉三角为:\n&quot;</span>, n, n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">0</span> || i == j)</span><br><span class="line">				a[i][j] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a[i][j] = a[i - <span class="number">1</span>][j] + a[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>, a[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="13、鞍点-Saddle-point-在微分方程中，沿着某一方向是稳定的，另一条方向是不稳定的奇点，叫做鞍点。在泛函中，既不是极大值点也不是极小值点的临界点，叫做鞍点。在矩阵中，一个数在所在行中是最大值，在所在列中是最小值，则被称为鞍点。在物理上要广泛一些，指在一个方向是极大值，另一个方向是极小值的点。输入n行n列的矩阵，求出鞍点。"><a href="#13、鞍点-Saddle-point-在微分方程中，沿着某一方向是稳定的，另一条方向是不稳定的奇点，叫做鞍点。在泛函中，既不是极大值点也不是极小值点的临界点，叫做鞍点。在矩阵中，一个数在所在行中是最大值，在所在列中是最小值，则被称为鞍点。在物理上要广泛一些，指在一个方向是极大值，另一个方向是极小值的点。输入n行n列的矩阵，求出鞍点。" class="headerlink" title="13、鞍点(Saddle point)在微分方程中，沿着某一方向是稳定的，另一条方向是不稳定的奇点，叫做鞍点。在泛函中，既不是极大值点也不是极小值点的临界点，叫做鞍点。在矩阵中，一个数在所在行中是最大值，在所在列中是最小值，则被称为鞍点。在物理上要广泛一些，指在一个方向是极大值，另一个方向是极小值的点。输入n行n列的矩阵，求出鞍点。"></a>13、鞍点(Saddle point)在微分方程中，沿着某一方向是稳定的，另一条方向是不稳定的奇点，叫做鞍点。在泛函中，既不是极大值点也不是极小值点的临界点，叫做鞍点。在矩阵中，一个数在所在行中是最大值，在所在列中是最小值，则被称为鞍点。在物理上要广泛一些，指在一个方向是极大值，另一个方向是极小值的点。输入n行n列的矩阵，求出鞍点。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, n = <span class="number">0</span>, m = <span class="number">0</span>, x = <span class="number">0</span>, y = <span class="number">0</span>, min = <span class="number">0</span>, max = <span class="number">0</span>, flag = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入矩阵的行数m和列数n：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;m, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>** a;</span><br><span class="line">	a = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * m);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		a[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n); <span class="comment">//为m行n列的二维数组动态开辟空间</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入矩阵各个元素的值(以空格分隔):\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= m - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			max = a[i][<span class="number">0</span>];</span><br><span class="line">			<span class="keyword">for</span> (y = <span class="number">0</span>; y &lt;= n - <span class="number">2</span>; y++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a[i][y] &lt; a[i][y + <span class="number">1</span>])</span><br><span class="line">					max = a[i][y + <span class="number">1</span>];</span><br><span class="line">			&#125;</span><br><span class="line">			min = a[<span class="number">0</span>][j];</span><br><span class="line">			<span class="keyword">for</span> (x = <span class="number">0</span>; x &lt;= m - <span class="number">2</span>; x++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (a[x][j] &gt; a[x + <span class="number">1</span>][j])</span><br><span class="line">					min = a[x + <span class="number">1</span>][j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (max == a[i][j] &amp;&amp; min == a[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;YES,鞍点值为%d,坐标为第%d行第%d列\n&quot;</span>, a[i][j], i, j);</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">		<span class="built_in">free</span>(a[i]);</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="14、任意输入一段英文，统计其中英文字符a的个数，不区分大小写。"><a href="#14、任意输入一段英文，统计其中英文字符a的个数，不区分大小写。" class="headerlink" title="14、任意输入一段英文，统计其中英文字符a的个数，不区分大小写。"></a>14、任意输入一段英文，统计其中英文字符a的个数，不区分大小写。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> E[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(E);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (E[i] == <span class="string">&#x27;A&#x27;</span> || E[i] == <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">			sum++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;英文字符a（不区分大小写）的个数是%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="15、任意输入一段英文，分别统计出其中26个英文字母各自的个数，不区分大小写。"><a href="#15、任意输入一段英文，分别统计出其中26个英文字母各自的个数，不区分大小写。" class="headerlink" title="15、任意输入一段英文，分别统计出其中26个英文字母各自的个数，不区分大小写。"></a>15、任意输入一段英文，分别统计出其中26个英文字母各自的个数，不区分大小写。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> E[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(E);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">65</span>; j &lt;= <span class="number">90</span>; j++) <span class="comment">//这里是A到Z在ASCII码表中的范围</span></span><br><span class="line">	&#123;</span><br><span class="line">		sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (E[i] == j || E[i] == j + <span class="number">32</span>) <span class="comment">//对数组E中每个位置上的字符进行依次判断属于A 或者 a</span></span><br><span class="line">				sum++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;英文字符%c的个数是%d\n&quot;</span>, j, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="16、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。"><a href="#16、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。" class="headerlink" title="16、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。"></a>16、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> E[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(E);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (E[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; E[i] &lt;= <span class="string">&#x27;Z&#x27;</span> || E[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; E[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">			a++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (E[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; E[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">			b++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (E[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">			c++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			d++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;英文字符个数是%d\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数字字符个数是%d\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;空格字符个数是%d\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他字符个数是%d\n&quot;</span>, d);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="17、任意输入一段英文，统计其中英文单词的个数。"><a href="#17、任意输入一段英文，统计其中英文单词的个数。" class="headerlink" title="17、任意输入一段英文，统计其中英文单词的个数。"></a>17、任意输入一段英文，统计其中英文单词的个数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> E[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(E);</span><br><span class="line">	sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (E[i] &gt;= <span class="number">65</span> &amp;&amp; E[i] &lt;= <span class="number">90</span> || E[i] &gt;= <span class="number">97</span> &amp;&amp; E[i] &lt;= <span class="number">122</span>) <span class="comment">//左边是英文字母</span></span><br><span class="line">			<span class="keyword">if</span> (!(E[i + <span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; E[i + <span class="number">1</span>] &lt;= <span class="number">90</span> || E[i + <span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; E[i + <span class="number">1</span>] &lt;= <span class="number">122</span>)) <span class="comment">//右边不是英文字母</span></span><br><span class="line">				<span class="keyword">if</span> (E[i + <span class="number">1</span>] != <span class="string">&#x27;-&#x27;</span>) <span class="comment">//右边也不是符号&quot;-&quot;</span></span><br><span class="line">					sum++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;单词个数是%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="18、任意输入一段英文，将其中所有的数字字符删除-再输出结果（删除功能采用的是后面往前覆盖的思路设计）。"><a href="#18、任意输入一段英文，将其中所有的数字字符删除-再输出结果（删除功能采用的是后面往前覆盖的思路设计）。" class="headerlink" title="18、任意输入一段英文，将其中所有的数字字符删除,再输出结果（删除功能采用的是后面往前覆盖的思路设计）。"></a>18、任意输入一段英文，将其中所有的数字字符删除,再输出结果（删除功能采用的是后面往前覆盖的思路设计）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_zf</span><span class="params">(<span class="keyword">char</span> zfc[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	n = <span class="built_in">strlen</span>(zfc); <span class="comment">//计算字符串长度</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (zfc[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; zfc[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">			&#123;</span><br><span class="line">				zfc[j - <span class="number">1</span>] = zfc[j];	<span class="comment">//从i+1位置开始到n位置的字符整体往前覆盖</span></span><br><span class="line">			&#125;</span><br><span class="line">			i--; <span class="comment">//删除之后i不能变，因为它这个位置放的是后面覆盖过来的且没有判断过的字符</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> zfc[<span class="number">1000</span>], del;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(zfc);</span><br><span class="line">	delete_zf(zfc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输出删除数字字符之后的英文:&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(zfc);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="19、从键盘上任意输入一个字符串，将该字符串中的字符按照ASCII码的顺序从小到大的顺序排序后输出。"><a href="#19、从键盘上任意输入一个字符串，将该字符串中的字符按照ASCII码的顺序从小到大的顺序排序后输出。" class="headerlink" title="19、从键盘上任意输入一个字符串，将该字符串中的字符按照ASCII码的顺序从小到大的顺序排序后输出。"></a>19、从键盘上任意输入一个字符串，将该字符串中的字符按照ASCII码的顺序从小到大的顺序排序后输出。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个字符串:\n&quot;</span>);</span><br><span class="line">	gets(a);</span><br><span class="line">	n = <span class="built_in">strlen</span>(a);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= n - <span class="number">2</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">2</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] &gt; a[i + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				t = a[i];</span><br><span class="line">				a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">				a[i + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;该字符串按照ASCII码的顺序从小到大的顺序排序为:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(a);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="20、编程实现输入一行字符，将其中重复出现的字符全部删除。例如：若输入字符串：abcdabghakdmncdgkp，则删除重复字符后应输出：abcdghkmnp。"><a href="#20、编程实现输入一行字符，将其中重复出现的字符全部删除。例如：若输入字符串：abcdabghakdmncdgkp，则删除重复字符后应输出：abcdghkmnp。" class="headerlink" title="20、编程实现输入一行字符，将其中重复出现的字符全部删除。例如：若输入字符串：abcdabghakdmncdgkp，则删除重复字符后应输出：abcdghkmnp。"></a>20、编程实现输入一行字符，将其中重复出现的字符全部删除。例如：若输入字符串：abcdabghakdmncdgkp，则删除重复字符后应输出：abcdghkmnp。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个字符串:\n&quot;</span>);</span><br><span class="line">	gets(a);</span><br><span class="line">	n = <span class="built_in">strlen</span>(a);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[i] == a[j])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">for</span> (k = i + <span class="number">1</span>; k &lt;= n - <span class="number">1</span>; k++)</span><br><span class="line">				&#123;</span><br><span class="line">					a[k - <span class="number">1</span>] = a[k];</span><br><span class="line">				&#125;</span><br><span class="line">				n--; <span class="comment">//删除某个重复字母后，更新当前的字符数组长度</span></span><br><span class="line">				i--; <span class="comment">//防止遇到连续相同字符时漏删</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;该字符串删除重复元素后为:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt;= n - <span class="number">1</span>; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, a[k]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="三、自定义函数"><a href="#三、自定义函数" class="headerlink" title="三、自定义函数"></a>三、自定义函数</h3><h5 id="1、任意输入一个整数，编写一个函数isPrimeNumber用来判断输入的整数是否是素数。"><a href="#1、任意输入一个整数，编写一个函数isPrimeNumber用来判断输入的整数是否是素数。" class="headerlink" title="1、任意输入一个整数，编写一个函数isPrimeNumber用来判断输入的整数是否是素数。"></a>1、任意输入一个整数，编写一个函数isPrimeNumber用来判断输入的整数是否是素数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrimeNumber</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (s &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= s; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">if</span> (isPrimeNumber(n)) <span class="built_in">printf</span>(<span class="string">&quot;这个数是素数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;这个数不是素数\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、编写函数求Fibonacci数列的第n项的值，然后在主函数中调用该函数输出第n项的值。"><a href="#2、编写函数求Fibonacci数列的第n项的值，然后在主函数中调用该函数输出第n项的值。" class="headerlink" title="2、编写函数求Fibonacci数列的第n项的值，然后在主函数中调用该函数输出第n项的值。"></a>2、编写函数求Fibonacci数列的第n项的值，然后在主函数中调用该函数输出第n项的值。</h5><h6 id="（1）递归法，效率低："><a href="#（1）递归法，效率低：" class="headerlink" title="（1）递归法，效率低："></a>（1）递归法，效率低：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) ? <span class="number">1</span> : fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;斐波那契数列第%d项为:%.0lf\n&quot;</span>, n, fib(n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="（2）迭代法，效率高："><a href="#（2）迭代法，效率高：" class="headerlink" title="（2）迭代法，效率高："></a>（2）迭代法，效率高：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> f1 = <span class="number">0</span>, f2 = <span class="number">1</span>, fn = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		fn = f1 + f2;</span><br><span class="line">		f1 = f2, f2 = fn;</span><br><span class="line">	&#125; <span class="comment">//迭代法求斐波那契数列第n项</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%.0lf&quot;</span>, f1);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、编写排序的函数sort，实现调用该函数对任意一组数据进行从小到大的顺序排序。"><a href="#3、编写排序的函数sort，实现调用该函数对任意一组数据进行从小到大的顺序排序。" class="headerlink" title="3、编写排序的函数sort，实现调用该函数对任意一组数据进行从小到大的顺序排序。"></a>3、编写排序的函数sort，实现调用该函数对任意一组数据进行从小到大的顺序排序。</h5><h6 id="（1）冒泡排序法："><a href="#（1）冒泡排序法：" class="headerlink" title="（1）冒泡排序法："></a>（1）冒泡排序法：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="keyword">int</span>* q, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; r - l; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; r - l - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (q[j] &gt; q[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = q[j];</span><br><span class="line">				q[j] = q[j + <span class="number">1</span>];</span><br><span class="line">				q[j + <span class="number">1</span>] = temp;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="keyword">return</span>; <span class="comment">//对冒泡排序的优化</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入元素个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入各元素：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line">	bubble_sort(p, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;排序后：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="（2）快速排序法："><a href="#（2）快速排序法：" class="headerlink" title="（2）快速排序法："></a>（2）快速排序法：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>* q, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">int</span> x = q[l + (r - l) / <span class="number">2</span>], i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (q[++i] &lt; x);</span><br><span class="line">		<span class="keyword">while</span> (q[--j] &gt; x);</span><br><span class="line">		<span class="keyword">if</span> (i &lt; j)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> temp = q[i];</span><br><span class="line">			q[i] = q[j];</span><br><span class="line">			q[j] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	quick_sort(q, l, j);</span><br><span class="line">	quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入元素个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>* p = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入各元素：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class="line">	quick_sort(p, <span class="number">0</span>, n - <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;排序后：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、任意输入一个正整数给n，求n！（例如5！-1-2-3-4-5），要求将求n！的过程写成自定义函数。"><a href="#4、任意输入一个正整数给n，求n！（例如5！-1-2-3-4-5），要求将求n！的过程写成自定义函数。" class="headerlink" title="4、任意输入一个正整数给n，求n！（例如5！=1 *2 *3 *4 *5），要求将求n！的过程写成自定义函数。"></a>4、任意输入一个正整数给n，求n！（例如5！=1 *2 *3 *4 *5），要求将求n！的过程写成自定义函数。</h5><h6 id="（1）利用for循环求解："><a href="#（1）利用for循环求解：" class="headerlink" title="（1）利用for循环求解："></a>（1）利用for循环求解：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span>  s = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (n--) s *= (n + <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d的阶乘为:%.0lf\n&quot;</span>, n, fact(n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span>  s = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (; n &gt;= <span class="number">1</span>; n--)</span><br><span class="line">		s *= n;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d的阶乘为:%.0lf\n&quot;</span>, n, fact(n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="（2）利用递归求解："><a href="#（2）利用递归求解：" class="headerlink" title="（2）利用递归求解："></a>（2）利用递归求解：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">0</span> || n == <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n &gt; <span class="number">1</span>)</span><br><span class="line">		<span class="keyword">return</span> n * fact(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d的阶乘为:%.0lf\n&quot;</span>, n, fact(n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fact</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (n == <span class="number">0</span> || n == <span class="number">1</span>) ? <span class="number">1</span> : (n * <span class="built_in">fact</span>(n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	cout &lt;&lt; fixed &lt;&lt; <span class="built_in">setprecision</span>(<span class="number">0</span>) &lt;&lt; <span class="built_in">fact</span>(n) &lt;&lt; endl; <span class="comment">//不以科学记数法输出，保留0位小数</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="5、汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，每次移动一个圆盘，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘，柱子可以编号为A-B-C，编程输出n个圆盘从A柱子移动到C柱子的步骤。"><a href="#5、汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，每次移动一个圆盘，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘，柱子可以编号为A-B-C，编程输出n个圆盘从A柱子移动到C柱子的步骤。" class="headerlink" title="5、汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，每次移动一个圆盘，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘，柱子可以编号为A B C，编程输出n个圆盘从A柱子移动到C柱子的步骤。"></a>5、汉诺塔（又称河内塔）问题是源于印度一个古老传说的益智玩具。大梵天创造世界的时候做了三根金刚石柱子，在一根柱子上从下往上按照大小顺序摞着64片黄金圆盘。大梵天命令婆罗门把圆盘从下面开始按大小顺序重新摆放在另一根柱子上。并且规定，每次移动一个圆盘，在小圆盘上不能放大圆盘，在三根柱子之间一次只能移动一个圆盘，柱子可以编号为A B C，编程输出n个圆盘从A柱子移动到C柱子的步骤。</h5><p><img data-src="./C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/a.png"></p>
<p>解题思路：<br>（1）把A柱子上的前N-1个盘子借助C柱子，全部移动到B柱子上（过程暂不考虑），再把第N个盘子由A柱子移动到C柱子上，那么剩下要移动的盘子在B柱子上了。<br>（2）把B柱子上的前N-2个盘子借助C柱子，全部移动到A柱子上（过程暂不考虑），再把第N-1个盘子由B柱子移动到C柱子上。<br>（3）重复上面的两个步骤即可把A柱子上的盘子全部移动到C柱子上。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loveyou</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> start, <span class="keyword">char</span> help, <span class="keyword">char</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &gt;= <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		loveyou(n - <span class="number">1</span>, start, end, help);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c------&gt;%c\n&quot;</span>, start, end);</span><br><span class="line">		loveyou(n - <span class="number">1</span>, help, start, end);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c------&gt;%c\n&quot;</span>, start, end);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入圆盘的数量:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	loveyou(n, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。要求将统计四大类字符个数的过程书写为自定义函数，输入、调用函数、输出结果放在主函数中完成。"><a href="#6、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。要求将统计四大类字符个数的过程书写为自定义函数，输入、调用函数、输出结果放在主函数中完成。" class="headerlink" title="6、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。要求将统计四大类字符个数的过程书写为自定义函数，输入、调用函数、输出结果放在主函数中完成。"></a>6、任意输入一段英文，分别统计出英文字符、数字字符、空格字符和其他字符等四大类字符各自的个数。要求将统计四大类字符个数的过程书写为自定义函数，输入、调用函数、输出结果放在主函数中完成。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tjzf</span><span class="params">(<span class="keyword">char</span> E[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (E[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; E[i] &lt;= <span class="string">&#x27;Z&#x27;</span> || E[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; E[i] &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">			a++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (E[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; E[i] &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">			b++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (E[i] == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">			c++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			d++;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> F[<span class="number">1000</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(F);</span><br><span class="line">	tjzf(F);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;英文字符个数是%d\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数字字符个数是%d\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;空格字符个数是%d\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他字符个数是%d\n&quot;</span>, d);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7、一个班级有n位同学（n为正整数，由自己输入），输入他们的程序设计技术期末考试成绩，要求将求所有人的平均分功能、求最高分功能、最低分功能分别写成3个自定义函数。"><a href="#7、一个班级有n位同学（n为正整数，由自己输入），输入他们的程序设计技术期末考试成绩，要求将求所有人的平均分功能、求最高分功能、最低分功能分别写成3个自定义函数。" class="headerlink" title="7、一个班级有n位同学（n为正整数，由自己输入），输入他们的程序设计技术期末考试成绩，要求将求所有人的平均分功能、求最高分功能、最低分功能分别写成3个自定义函数。"></a>7、一个班级有n位同学（n为正整数，由自己输入），输入他们的程序设计技术期末考试成绩，要求将求所有人的平均分功能、求最高分功能、最低分功能分别写成3个自定义函数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getmax</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> max = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (max &lt; a[i])</span><br><span class="line">			max = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getmin</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> min = a[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (min &gt; a[i])</span><br><span class="line">			min = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getave</span><span class="params">(<span class="keyword">double</span> a[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> sum = <span class="number">0</span>, ave = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		sum += a[i];</span><br><span class="line">	ave = sum / n;</span><br><span class="line">	<span class="keyword">return</span> ave;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入班级人数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">double</span>* a = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="number">8</span> * n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入所有同学的成绩:\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;最高分为%.2lf,最低分为%.2lf,平均分为%.2lf\n&quot;</span>, getmax(a, n), getmin(a, n), getave(a, n));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8、输入2个正整数给x和y，求得这2个数值的最大公约数和最小公倍数，（要求求最大公约数和求最小公倍数的功能必须分别用自定义函数来完成）。"><a href="#8、输入2个正整数给x和y，求得这2个数值的最大公约数和最小公倍数，（要求求最大公约数和求最小公倍数的功能必须分别用自定义函数来完成）。" class="headerlink" title="8、输入2个正整数给x和y，求得这2个数值的最大公约数和最小公倍数，（要求求最大公约数和求最小公倍数的功能必须分别用自定义函数来完成）。"></a>8、输入2个正整数给x和y，求得这2个数值的最大公约数和最小公倍数，（要求求最大公约数和求最小公倍数的功能必须分别用自定义函数来完成）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gys</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = x; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (x % i == <span class="number">0</span> &amp;&amp; y % i == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gbs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = x; i &lt;= x * y; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % x == <span class="number">0</span> &amp;&amp; i % y == <span class="number">0</span>)</span><br><span class="line">			<span class="keyword">return</span> i;;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入两个正整数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;它们的最大公约数为%d，最小公倍数为%d\n&quot;</span>, gys(a, b), gbs(a, b));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="9、验证歌德巴赫猜想：输入一个任何一个不小于6的偶数，它可以表示为两个素数之和，也就是两个质数之和（要求判断某个数是否是素数的过程用自定义函数来实现）。"><a href="#9、验证歌德巴赫猜想：输入一个任何一个不小于6的偶数，它可以表示为两个素数之和，也就是两个质数之和（要求判断某个数是否是素数的过程用自定义函数来实现）。" class="headerlink" title="9、验证歌德巴赫猜想：输入一个任何一个不小于6的偶数，它可以表示为两个素数之和，也就是两个质数之和（要求判断某个数是否是素数的过程用自定义函数来实现）。"></a>9、验证歌德巴赫猜想：输入一个任何一个不小于6的偶数，它可以表示为两个素数之和，也就是两个质数之和（要求判断某个数是否是素数的过程用自定义函数来实现）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPrimeNumber</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (s &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i * i &lt;= s; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个不小于4的偶数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">	<span class="keyword">while</span> (k % <span class="number">2</span> != <span class="number">0</span> || k &lt; <span class="number">4</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入错误,请重新输入:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">2</span>; i &lt;= k - <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (isPrimeNumber(i) == <span class="number">1</span> &amp;&amp; isPrimeNumber(k - i) == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d+%d=%d\n&quot;</span>, i, k - i, k);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="10、小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级-站在台阶前，他突然又想着一个问题：如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？请编写程序计算并输出结果。"><a href="#10、小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级-站在台阶前，他突然又想着一个问题：如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？请编写程序计算并输出结果。" class="headerlink" title="10、小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级!站在台阶前，他突然又想着一个问题：如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？请编写程序计算并输出结果。"></a>10、小明刚刚看完电影《第39级台阶》，离开电影院的时候，他数了数礼堂前的台阶数，恰好是39级!站在台阶前，他突然又想着一个问题：如果我每一步只能迈上1个或2个台阶。先迈左脚，然后左右交替，最后一步是迈右脚，也就是说一共要走偶数步。那么，上完39级台阶，有多少种不同的上法呢？请编写程序计算并输出结果。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> sf = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> step)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (n &gt; <span class="number">39</span>) <span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">39</span> &amp;&amp; step % <span class="number">2</span> == <span class="number">0</span>) sf++;</span><br><span class="line">	f(n + <span class="number">1</span>, step + <span class="number">1</span>);</span><br><span class="line">	f(n + <span class="number">2</span>, step + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;共有%d种上法\n&quot;</span>, sf);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="11、角谷定理。输入一个自然数，若为偶数，则把它除以2，若为奇数，则把它乘以3加1。经过如此有限次运算后，总可以得到自然数值1。求经过多少次可得到自然数1（要求此题用函数的递归调用方法实现）。"><a href="#11、角谷定理。输入一个自然数，若为偶数，则把它除以2，若为奇数，则把它乘以3加1。经过如此有限次运算后，总可以得到自然数值1。求经过多少次可得到自然数1（要求此题用函数的递归调用方法实现）。" class="headerlink" title="11、角谷定理。输入一个自然数，若为偶数，则把它除以2，若为奇数，则把它乘以3加1。经过如此有限次运算后，总可以得到自然数值1。求经过多少次可得到自然数1（要求此题用函数的递归调用方法实现）。"></a>11、角谷定理。输入一个自然数，若为偶数，则把它除以2，若为奇数，则把它乘以3加1。经过如此有限次运算后，总可以得到自然数值1。求经过多少次可得到自然数1（要求此题用函数的递归调用方法实现）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pd</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> sum)</span> <span class="comment">//sum表示次数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (s == <span class="number">1</span>) <span class="keyword">return</span> sum;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (s &gt; <span class="number">1</span> &amp;&amp; s % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		pd(s / <span class="number">2</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (s &gt; <span class="number">1</span> &amp;&amp; s % <span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		sum++;</span><br><span class="line">		pd(<span class="number">3</span> * s + <span class="number">1</span>, sum);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一个自然数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;至少需经过%d次运算可以得到自然数1\n&quot;</span>, pd(a, <span class="number">0</span>));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="四、指针"><a href="#四、指针" class="headerlink" title="四、指针"></a>四、指针</h3><h5 id="1、从键盘输入一个字符串，要求找出大写字母、小写字母、空格、数字和其他字符各自的数量（必须用指针来完成）。"><a href="#1、从键盘输入一个字符串，要求找出大写字母、小写字母、空格、数字和其他字符各自的数量（必须用指针来完成）。" class="headerlink" title="1、从键盘输入一个字符串，要求找出大写字母、小写字母、空格、数字和其他字符各自的数量（必须用指针来完成）。"></a>1、从键盘输入一个字符串，要求找出大写字母、小写字母、空格、数字和其他字符各自的数量（必须用指针来完成）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>, c = <span class="number">0</span>, d = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span>* E = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="number">5000</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段英文:&quot;</span>);</span><br><span class="line">	gets(E);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*(E + i) &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; *(E + i) &lt;= <span class="string">&#x27;Z&#x27;</span> || *(E + i) &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; *(E + i) &lt;= <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">			a++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*(E + i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *(E + i) &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">			b++;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*(E + i) == <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">			c++;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			d++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;英文字符个数是%d\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;数字字符个数是%d\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;空格字符个数是%d\n&quot;</span>, c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他字符个数是%d\n&quot;</span>, d);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、输入n个整数（n由自己输入），要求输出最大值和最小值（必须用指针来完成）。"><a href="#2、输入n个整数（n由自己输入），要求输出最大值和最小值（必须用指针来完成）。" class="headerlink" title="2、输入n个整数（n由自己输入），要求输出最大值和最小值（必须用指针来完成）。"></a>2、输入n个整数（n由自己输入），要求输出最大值和最小值（必须用指针来完成）。</h5><h6 id="（1）普通版："><a href="#（1）普通版：" class="headerlink" title="（1）普通版："></a>（1）普通版：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入数据个数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">double</span>* p = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="number">8</span> * n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入这%d个数据:&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, p + i);</span><br><span class="line">	<span class="keyword">for</span> (j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*(p + i) &lt; *(p + i + <span class="number">1</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				t = *(p + i);</span><br><span class="line">				*(p + i) = *(p + i + <span class="number">1</span>);</span><br><span class="line">				*(p + i + <span class="number">1</span>) = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;从高到低排序后输出：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lf\t&quot;</span>, *(p + i));</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）自定义函数版："><a href="#（2）自定义函数版：" class="headerlink" title="（2）自定义函数版："></a>（2）自定义函数版：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">(<span class="keyword">double</span>* p, <span class="keyword">int</span> n)</span> <span class="comment">//输入函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入%d个数据:&quot;</span>, n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, p + i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">(<span class="keyword">double</span>* p, <span class="keyword">int</span> n)</span> <span class="comment">//输出函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按从高到低排序并输出：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lf\n&quot;</span>, *(p + i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">double</span>* p, <span class="keyword">int</span> n)</span> <span class="comment">//排序函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (j = n - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (*(p + i) &lt; *(p + i + <span class="number">1</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				t = *(p + i);</span><br><span class="line">				*(p + i) = *(p + i + <span class="number">1</span>);</span><br><span class="line">				*(p + i + <span class="number">1</span>) = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> <span class="comment">//主函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入数据的个数：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">double</span>* p = (<span class="keyword">double</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">double</span>) * n);</span><br><span class="line">	input(p, n);</span><br><span class="line">	sort(p, n);</span><br><span class="line">	output(p, n);</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、输入10个整数，存入一维数组a中。要求设计一个函数move，实现如下功能：使数组a中前面各个元素顺序向后移动m个位置，最后m个数变成最前面的m个数（要求此题必须用自定义函数外加指针来实现数据的移动）。"><a href="#3、输入10个整数，存入一维数组a中。要求设计一个函数move，实现如下功能：使数组a中前面各个元素顺序向后移动m个位置，最后m个数变成最前面的m个数（要求此题必须用自定义函数外加指针来实现数据的移动）。" class="headerlink" title="3、输入10个整数，存入一维数组a中。要求设计一个函数move，实现如下功能：使数组a中前面各个元素顺序向后移动m个位置，最后m个数变成最前面的m个数（要求此题必须用自定义函数外加指针来实现数据的移动）。"></a>3、输入10个整数，存入一维数组a中。要求设计一个函数move，实现如下功能：使数组a中前面各个元素顺序向后移动m个位置，最后m个数变成最前面的m个数（要求此题必须用自定义函数外加指针来实现数据的移动）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">10</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入10个整数:&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入需要移动的数据个数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		t = *(a + <span class="number">9</span>);</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">8</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			*(a + i + <span class="number">1</span>) = *(a + i);</span><br><span class="line">		&#125;</span><br><span class="line">		*(a + <span class="number">0</span>) = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *(a + i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、自定义一个函数，将一个十进制正整数转换为对应的二进制数（必须用指针来完成）。"><a href="#4、自定义一个函数，将一个十进制正整数转换为对应的二进制数（必须用指针来完成）。" class="headerlink" title="4、自定义一个函数，将一个十进制正整数转换为对应的二进制数（必须用指针来完成）。"></a>4、自定义一个函数，将一个十进制正整数转换为对应的二进制数（必须用指针来完成）。</h5><h6 id="（1）数组版（转换为补码）："><a href="#（1）数组版（转换为补码）：" class="headerlink" title="（1）数组版（转换为补码）："></a>（1）数组版（转换为补码）：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DecToBin</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//正负数都可以转换,这里转换成对应的二进制补码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) a[<span class="number">31</span>] = <span class="number">1</span>;	</span><br><span class="line">	y = x &gt; <span class="number">0</span> ? x : -x; <span class="comment">//将x的绝对值赋值给y</span></span><br><span class="line">	<span class="keyword">while</span> (y &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = y % <span class="number">2</span>;</span><br><span class="line">		i++;</span><br><span class="line">		y = y / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="comment">//对于负数，这里计算的是负数的二进制补码</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = !a[i]; <span class="comment">//除开符号位以外其余各位按位求反 1-&gt;0 0-&gt;1</span></span><br><span class="line">		&#125;</span><br><span class="line">		a[<span class="number">0</span>]++;		    <span class="comment">//末位+1</span></span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) <span class="comment">//处理进位</span></span><br><span class="line">		&#123;</span><br><span class="line">			a[i] += a[i - <span class="number">1</span>] / <span class="number">2</span>;</span><br><span class="line">			a[i - <span class="number">1</span>] = a[i - <span class="number">1</span>] % <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		a[<span class="number">30</span>] = a[<span class="number">30</span>] % <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, a[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Input decimal number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k); <span class="comment">//带符号的32位二进制数转换为十进制的范围为[-2147483647,2147483647]</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Output binary number:&quot;</span>);</span><br><span class="line">	DecToBin(k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）指针版（转换为原码）："><a href="#（2）指针版（转换为原码）：" class="headerlink" title="（2）指针版（转换为原码）："></a>（2）指针版（转换为原码）：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DecToBin</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//正负数都可以转换,这里转换成对应的二进制原码</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span>* a = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * <span class="number">32</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">31</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		*(a + i) = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">		*(a + <span class="number">31</span>) = <span class="number">1</span>; <span class="comment">//为负数定义符号位</span></span><br><span class="line">	y = x &gt; <span class="number">0</span> ? x : -x; <span class="comment">//y取x的绝对值</span></span><br><span class="line">	i = <span class="number">0</span>; <span class="comment">//给i重新赋值为0</span></span><br><span class="line">	<span class="keyword">while</span> (y &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		*(a + i) = y % <span class="number">2</span>;</span><br><span class="line">		i++;</span><br><span class="line">		y = y / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">31</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, *(a + i));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Input decimal number:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Output binary number:&quot;</span>);</span><br><span class="line">	DecToBin(k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5、自定义一个函数，删除一个字符串中从第n个字符开始的连续m个字符（必须用指针来完成）。"><a href="#5、自定义一个函数，删除一个字符串中从第n个字符开始的连续m个字符（必须用指针来完成）。" class="headerlink" title="5、自定义一个函数，删除一个字符串中从第n个字符开始的连续m个字符（必须用指针来完成）。"></a>5、自定义一个函数，删除一个字符串中从第n个字符开始的连续m个字符（必须用指针来完成）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_zf</span><span class="params">(<span class="keyword">char</span>* zf, <span class="keyword">int</span> n, <span class="keyword">int</span> m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, c;</span><br><span class="line">	c = <span class="built_in">strlen</span>(zf);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= c - n - m; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		*(zf + n + i) = *(zf + n + i + m);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> zfc[<span class="number">1000</span>];</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入一段字符串:&quot;</span>);</span><br><span class="line">	gets(zfc);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;从第多少个字符开始删除:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;删除多少个字符:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">	delete_zf(zfc, n - <span class="number">1</span>, m);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输出结果:&quot;</span>);</span><br><span class="line">	<span class="built_in">puts</span>(zfc);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6、n个学生围成圈（n由自己输入），从第1个同学开始报数，（报数的方式是1，2，3），其中报到3的同学出列，重复之，直到最后只剩下一个同学为止。编程求得这个同学的原本的是第几个同学？（必须用指针来实现）。"><a href="#6、n个学生围成圈（n由自己输入），从第1个同学开始报数，（报数的方式是1，2，3），其中报到3的同学出列，重复之，直到最后只剩下一个同学为止。编程求得这个同学的原本的是第几个同学？（必须用指针来实现）。" class="headerlink" title="6、n个学生围成圈（n由自己输入），从第1个同学开始报数，（报数的方式是1，2，3），其中报到3的同学出列，重复之，直到最后只剩下一个同学为止。编程求得这个同学的原本的是第几个同学？（必须用指针来实现）。"></a>6、n个学生围成圈（n由自己输入），从第1个同学开始报数，（报数的方式是1，2，3），其中报到3的同学出列，重复之，直到最后只剩下一个同学为止。编程求得这个同学的原本的是第几个同学？（必须用指针来实现）。</h5><h6 id="（1）数组版（跳出数字默认为3）："><a href="#（1）数组版（跳出数字默认为3）：" class="headerlink" title="（1）数组版（跳出数字默认为3）："></a>（1）数组版（跳出数字默认为3）：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, i = <span class="number">0</span>, k = <span class="number">3</span>, t = <span class="number">0</span>, num = <span class="number">0</span>; <span class="comment">//总人数n,跳出数字k</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入总人数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>* ar = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++) <span class="comment">//给n个人编号</span></span><br><span class="line">	&#123;</span><br><span class="line">		ar[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	num = n; <span class="comment">//num用来临时存放总人数</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>;; i++) <span class="comment">//终止条件置空实现无限循环</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; n) <span class="comment">//回溯，转完一圈了</span></span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ar[i - <span class="number">1</span>] != <span class="number">0</span>) <span class="comment">//不为跳出数字k的同学跳过</span></span><br><span class="line">		&#123;</span><br><span class="line">			t++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t == k)</span><br><span class="line">		&#123;</span><br><span class="line">			ar[i - <span class="number">1</span>] = <span class="number">0</span>; <span class="comment">//出列的同学赋值为0</span></span><br><span class="line">			num--; <span class="comment">//同时当前总人数减1</span></span><br><span class="line">			t = <span class="number">0</span>; <span class="comment">//又重新开始计数</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">1</span>)	<span class="comment">//只剩一人时跳出循环</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//打印目标值，最后编号不为0的同学就是剩下的那个</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ar[i] != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;这个同学原本是第%d个同学\n&quot;</span>, ar[i]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（2）指针版（跳出数字默认为3）："><a href="#（2）指针版（跳出数字默认为3）：" class="headerlink" title="（2）指针版（跳出数字默认为3）："></a>（2）指针版（跳出数字默认为3）：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k = <span class="number">3</span>, i = <span class="number">0</span>, t = <span class="number">0</span>, num = <span class="number">0</span>; <span class="comment">//总人数n,跳出数字k</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入总人数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">int</span>* ar = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//给n个人编号</span></span><br><span class="line">	&#123;</span><br><span class="line">		*(ar + i) = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	num = n; <span class="comment">//num用来临时存放总人数</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>;; i++) <span class="comment">//终止条件置空实现无限循环</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; n)	<span class="comment">//回溯，转完一圈了</span></span><br><span class="line">			i = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (*(ar + i - <span class="number">1</span>) != <span class="number">0</span>) <span class="comment">//不为跳出数字k的同学跳过</span></span><br><span class="line">			t++;</span><br><span class="line">		<span class="keyword">if</span> (t == k)</span><br><span class="line">		&#123;</span><br><span class="line">			*(ar + i - <span class="number">1</span>) = <span class="number">0</span>; <span class="comment">//出列的同学赋值为0</span></span><br><span class="line">			num--; <span class="comment">//同时当前总人数减1</span></span><br><span class="line">			t = <span class="number">0</span>; <span class="comment">//又重新开始计数</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">1</span>)	<span class="comment">//只剩一人时跳出循环</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//打印目标值，最后编号不为0的同学就是剩下的那个</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*(ar + i) != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;这个同学原本是第%d个同学\n&quot;</span>, ar[i]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="（3）拓展（跳出数字由自己输入）："><a href="#（3）拓展（跳出数字由自己输入）：" class="headerlink" title="（3）拓展（跳出数字由自己输入）："></a>（3）拓展（跳出数字由自己输入）：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, k, i = <span class="number">0</span>, t = <span class="number">0</span>, num = <span class="number">0</span>; <span class="comment">//总人数n,跳出数字k</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入总人数和跳出数字:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class="line">	<span class="keyword">int</span>* ar = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * n);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= n - <span class="number">1</span>; i++) <span class="comment">//给n个人编号</span></span><br><span class="line">	&#123;</span><br><span class="line">		ar[i] = i + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	num = n; <span class="comment">//num用来临时存放总人数</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">1</span>;; i++) <span class="comment">//终止条件置空实现无限循环</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i &gt; n) <span class="comment">//回溯，转完一圈了</span></span><br><span class="line">		&#123;</span><br><span class="line">			i = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ar[i - <span class="number">1</span>] != <span class="number">0</span>) <span class="comment">//不为跳出数字k的同学跳过</span></span><br><span class="line">		&#123;</span><br><span class="line">			t++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (t == k) <span class="comment">//出列的同学赋值为0</span></span><br><span class="line">		&#123;</span><br><span class="line">			ar[i - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">			num--; <span class="comment">//同时总人数减1</span></span><br><span class="line">			t = <span class="number">0</span>; <span class="comment">//又重新开始计数</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">1</span>)	<span class="comment">//只剩一人时跳出循环</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) <span class="comment">//打印目标值，最后编号不为0的同学就是剩下的那个</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ar[i] != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;这个同学原本是第%d个同学\n&quot;</span>, ar[i]);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="五、结构体"><a href="#五、结构体" class="headerlink" title="五、结构体"></a>五、结构体</h3><h5 id="1、声明4个结构体类型来描述学生，其成员包括：学号、姓名、性别、C语言课程成绩。再定义一个结构体变量，从键盘输入各成员具体的数据，然后输出。"><a href="#1、声明4个结构体类型来描述学生，其成员包括：学号、姓名、性别、C语言课程成绩。再定义一个结构体变量，从键盘输入各成员具体的数据，然后输出。" class="headerlink" title="1、声明4个结构体类型来描述学生，其成员包括：学号、姓名、性别、C语言课程成绩。再定义一个结构体变量，从键盘输入各成员具体的数据，然后输出。"></a>1、声明4个结构体类型来描述学生，其成员包括：学号、姓名、性别、C语言课程成绩。再定义一个结构体变量，从键盘输入各成员具体的数据，然后输出。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">		<span class="keyword">int</span> number;</span><br><span class="line">		<span class="keyword">char</span> name[<span class="number">11</span>];</span><br><span class="line">		<span class="keyword">char</span> gender[<span class="number">5</span>];</span><br><span class="line">		<span class="keyword">double</span> cscore;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入学号:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stu.number);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入姓名:&quot;</span>);</span><br><span class="line">	gets(stu.name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入性别:&quot;</span>);</span><br><span class="line">	gets(stu.gender);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入C语言成绩:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;stu.cscore);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;性别&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;C语言成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11d&quot;</span>, stu.number);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu.name);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu.gender);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu.cscore);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、声明一个结构体类型来表示日期，其成员包括：年、月、曰，编写一个函数用于计算某日是本年中的第几天？"><a href="#2、声明一个结构体类型来表示日期，其成员包括：年、月、曰，编写一个函数用于计算某日是本年中的第几天？" class="headerlink" title="2、声明一个结构体类型来表示日期，其成员包括：年、月、曰，编写一个函数用于计算某日是本年中的第几天？"></a>2、声明一个结构体类型来表示日期，其成员包括：年、月、曰，编写一个函数用于计算某日是本年中的第几天？</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">date_num</span><span class="params">(<span class="keyword">int</span> y, <span class="keyword">int</span> m, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> s = <span class="number">0</span>, i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;= m - <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">1</span> || i == <span class="number">3</span> || i == <span class="number">5</span> || i == <span class="number">7</span> || i == <span class="number">8</span> || i == <span class="number">10</span>)</span><br><span class="line">			s = s + <span class="number">31</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">4</span> || i == <span class="number">6</span> || i == <span class="number">9</span> || i == <span class="number">11</span>)</span><br><span class="line">			s = s + <span class="number">30</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">			s = s + <span class="number">28</span>;</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	s = s + d;</span><br><span class="line">	<span class="keyword">if</span> ((y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span> || y % <span class="number">400</span> == <span class="number">0</span>) &amp;&amp; m &gt;= <span class="number">3</span>)</span><br><span class="line">		s++;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">		<span class="keyword">int</span> year;</span><br><span class="line">		<span class="keyword">int</span> month;</span><br><span class="line">		<span class="keyword">int</span> day;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Date</span> <span class="title">date1</span>;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入年份:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;date1.year);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入月份:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;date1.month);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;输入日期:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;date1.day); <span class="comment">//日期没做纠错功能，输入时请输入合法日期</span></span><br><span class="line">	num = date_num(date1.year, date1.month, date1.day);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;这一天是该年的第%d天\n&quot;</span>, num);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、某班有7名学生，均选修了C语言课程，要求统计该班C语言课程成绩不及格的学生人数，并输出不及格学生的信息（包括学号、姓名、性别、C语言课程成绩）。"><a href="#3、某班有7名学生，均选修了C语言课程，要求统计该班C语言课程成绩不及格的学生人数，并输出不及格学生的信息（包括学号、姓名、性别、C语言课程成绩）。" class="headerlink" title="3、某班有7名学生，均选修了C语言课程，要求统计该班C语言课程成绩不及格的学生人数，并输出不及格学生的信息（包括学号、姓名、性别、C语言课程成绩）。"></a>3、某班有7名学生，均选修了C语言课程，要求统计该班C语言课程成绩不及格的学生人数，并输出不及格学生的信息（包括学号、姓名、性别、C语言课程成绩）。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> H 200</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> number;</span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">char</span> gender[<span class="number">5</span>];</span><br><span class="line">	<span class="keyword">double</span> cscore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[<span class="title">H</span>];</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_information</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, sel = <span class="number">0</span>;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">tem_stu</span>;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|———————————————————————————|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|                欢迎来到信息录入功能                  |\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|———————————————————————————|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (stu[i].number == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t接下来请继续选择您的操作:\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|------------------------|\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|   1 录入学生信息       |\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|------------------------|\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|   2 返回主菜单         |\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|------------------------|\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t请输入您的选择【1-2】：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">			<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t输入错误，请重新输入您的选择【1-2】:&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t输入学号:&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;tem_stu.number);</span><br><span class="line">				getchar();</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t输入姓名:&quot;</span>);</span><br><span class="line">				gets(tem_stu.name);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t输入性别:&quot;</span>);</span><br><span class="line">				gets(tem_stu.gender);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t输入C语言成绩:&quot;</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;tem_stu.cscore);</span><br><span class="line">				<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (tem_stu.number == stu[i].number)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t该学号已存在！信息添加失败！！！\n&quot;</span>);</span><br><span class="line">						flag = <span class="number">1</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H; i++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (stu[i].number == <span class="number">0</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							stu[i] = tem_stu;</span><br><span class="line">							<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t信息添加成功！！！\n\n&quot;</span>);</span><br><span class="line">							<span class="keyword">break</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">2</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_information</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|———————————————————————————|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|                欢迎来到信息显示功能                  |\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|———————————————————————————|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t全部名单：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|-------------------------------------------|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t| %-12s&quot;</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;性别&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s|&quot;</span>, <span class="string">&quot;C语言成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|-------------------------------------------|\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (stu[i].number != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t| %-12d&quot;</span>, stu[i].number);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, stu[i].name);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, stu[i].gender);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-10.2lf|&quot;</span>, stu[i].cscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|-------------------------------------------|\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t\t不及格名单：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|-------------------------------------------|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t| %-12s&quot;</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, <span class="string">&quot;性别&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-10s|&quot;</span>, <span class="string">&quot;C语言成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|-------------------------------------------|\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; H; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (stu[i].number != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (stu[i].cscore &lt; <span class="number">60</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t| %-12d&quot;</span>, stu[i].number);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, stu[i].name);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%-10s&quot;</span>, stu[i].gender);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%-10.2lf|&quot;</span>, stu[i].cscore);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|-------------------------------------------|\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t&quot;</span>);</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sel = <span class="number">0</span>;</span><br><span class="line">	system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t****************** 欢迎您！尊贵的Sniper ****************\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t请选择您的操作:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|———————————————————————————|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|                1   信息录入                          |\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|------------------------------------------------------|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|                2   信息显示                          |\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|------------------------------------------------------|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|                0   退出                              |\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t|———————————————————————————|\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t请输入您的选择【0-2】：&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">while</span> (sel &lt; <span class="number">0</span> || sel&gt;<span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t\t输入错误,请重新输入你的选择【0-2】：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">switch</span> (sel)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		add_information();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		show_information();</span><br><span class="line">		menu();</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	system(<span class="string">&quot;color 70&quot;</span>);</span><br><span class="line">	menu();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、己知一个班有5名学生，本学期学习了三门课程，分别为C语言、高数和英语。"><a href="#4、己知一个班有5名学生，本学期学习了三门课程，分别为C语言、高数和英语。" class="headerlink" title="4、己知一个班有5名学生，本学期学习了三门课程，分别为C语言、高数和英语。"></a>4、己知一个班有5名学生，本学期学习了三门课程，分别为C语言、高数和英语。</h5><h6 id="（1）输出每一门课程的平均成绩；"><a href="#（1）输出每一门课程的平均成绩；" class="headerlink" title="（1）输出每一门课程的平均成绩；"></a>（1）输出每一门课程的平均成绩；</h6><h6 id="（2）输出总成绩最高的学生的信息（包括学号、姓名、性别、3门课程的成绩以及总成绩）；"><a href="#（2）输出总成绩最高的学生的信息（包括学号、姓名、性别、3门课程的成绩以及总成绩）；" class="headerlink" title="（2）输出总成绩最高的学生的信息（包括学号、姓名、性别、3门课程的成绩以及总成绩）；"></a>（2）输出总成绩最高的学生的信息（包括学号、姓名、性别、3门课程的成绩以及总成绩）；</h6><h6 id="（3）按C语言课程的成绩从高到低对全班学生进行排序，并输出排序后的结果。"><a href="#（3）按C语言课程的成绩从高到低对全班学生进行排序，并输出排序后的结果。" class="headerlink" title="（3）按C语言课程的成绩从高到低对全班学生进行排序，并输出排序后的结果。"></a>（3）按C语言课程的成绩从高到低对全班学生进行排序，并输出排序后的结果。</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> xh;</span><br><span class="line">	<span class="keyword">char</span> xm[<span class="number">11</span>];</span><br><span class="line">	<span class="keyword">char</span> xb[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">double</span> cscore;</span><br><span class="line">	<span class="keyword">double</span> gscore;</span><br><span class="line">	<span class="keyword">double</span> yscore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>[5], <span class="title">jh</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (stu[i].xh == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;输入第%d名学生的信息\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;学号:&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;stu[i].xh);</span><br><span class="line">			getchar();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;姓名:&quot;</span>);</span><br><span class="line">			gets(stu[i].xm);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;性别:&quot;</span>);</span><br><span class="line">			gets(stu[i].xb);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;C语言成绩:&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;stu[i].cscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;高数成绩:&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;stu[i].gscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;英语成绩:&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;stu[i].yscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;所有学生信息:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;性别&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;C语言成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;高数成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;英语成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11d&quot;</span>, stu[i].xh);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu[i].xm);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu[i].xb);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].cscore);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].gscore);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].yscore);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">double</span> sum_c = <span class="number">0</span>, sum_g = <span class="number">0</span>, sum_y = <span class="number">0</span>, ave_c, ave_g, ave_y;	<span class="comment">/*六个量分别表示C程.高数.英语的全班总分及平均分*/</span></span><br><span class="line">	<span class="keyword">double</span> zf[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;, t = <span class="number">0</span>;		<span class="comment">/*数组zf存储每个人的总分*/</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		zf[i] = stu[i].cscore + stu[i].gscore + stu[i].yscore;</span><br><span class="line">		sum_c += stu[i].cscore;</span><br><span class="line">		sum_g += stu[i].gscore;</span><br><span class="line">		sum_y += stu[i].yscore;</span><br><span class="line">	&#125;</span><br><span class="line">	ave_c = sum_c / <span class="number">5</span>;</span><br><span class="line">	ave_g = sum_g / <span class="number">5</span>;</span><br><span class="line">	ave_y = sum_y / <span class="number">5</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;C语言平均成绩为:%.2lf\n&quot;</span>, ave_c);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;高数平均成绩为:%.2lf\n&quot;</span>, ave_g);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;英语平均成绩为:%.2lf\n&quot;</span>, ave_y);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">3</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (zf[i] &gt; zf[i + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				t = zf[i];</span><br><span class="line">				zf[i] = zf[i + <span class="number">1</span>];</span><br><span class="line">				zf[i + <span class="number">1</span>] = t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;总成绩分最高的学生信息:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;性别&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;C语言成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;高数成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;英语成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;总成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (stu[i].cscore + stu[i].gscore + stu[i].yscore == zf[<span class="number">4</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11d&quot;</span>, stu[i].xh);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu[i].xm);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu[i].xb);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].cscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].gscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].yscore);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, zf[<span class="number">4</span>]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= <span class="number">3</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">3</span> - j; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (stu[i].cscore &lt; stu[i + <span class="number">1</span>].cscore)</span><br><span class="line">			&#123;</span><br><span class="line">				jh = stu[i];</span><br><span class="line">				stu[i] = stu[i + <span class="number">1</span>];</span><br><span class="line">				stu[i + <span class="number">1</span>] = jh;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;按C语言成绩进行由高到低排序:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;学号&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;姓名&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;性别&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;C语言成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;高数成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, <span class="string">&quot;英语成绩&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11d&quot;</span>, stu[i].xh);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu[i].xm);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11s&quot;</span>, stu[i].xb);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].cscore);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].gscore);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%-11.2lf&quot;</span>, stu[i].yscore);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="六、数据读取和数据存储"><a href="#六、数据读取和数据存储" class="headerlink" title="六、数据读取和数据存储"></a>六、数据读取和数据存储</h3><h5 id="1、编程统计文本文件”data-txt”中字符’-’出现的次数，并将统计的次数结果写入文本文件”res-txt”中。"><a href="#1、编程统计文本文件”data-txt”中字符’-’出现的次数，并将统计的次数结果写入文本文件”res-txt”中。" class="headerlink" title="1、编程统计文本文件”data.txt”中字符’$’出现的次数，并将统计的次数结果写入文本文件”res.txt”中。"></a>1、编程统计文本文件”data.txt”中字符’$’出现的次数，并将统计的次数结果写入文本文件”res.txt”中。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	FILE* fq;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	fp = fopen(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">//需要提前创建源程序当前目录下的data.txt文件,否则会文件打开失败</span></span><br><span class="line">	fq = fopen(<span class="string">&quot;res.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件data.txt打开失败，请在源程序目录下手动创建该文件！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!feof(fp)) <span class="comment">//feof()函数的功能是检测流上的文件结束符，如果文件结束，则返回非0值;如果文件未结束，则返回0值</span></span><br><span class="line">	&#123;</span><br><span class="line">		ch = fgetc(fp);</span><br><span class="line">		<span class="keyword">if</span> (ch == <span class="string">&#x27;$&#x27;</span>)</span><br><span class="line">			n++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fprintf</span>(fq, <span class="string">&quot;%d&quot;</span>, n); <span class="comment">//将n的结果写入到res.txt文档中</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n); <span class="comment">//将n的结果显示到屏幕中</span></span><br><span class="line">	fclose(fp);</span><br><span class="line">	fclose(fq);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、从源程序当前目录下名为“xhar2-txt”的文本文件中读取前10个字符，依次显示在屏幕上，如果文本文件中不足10个字符，则有多少个字符读取多少个字符，并显示在屏幕上。"><a href="#2、从源程序当前目录下名为“xhar2-txt”的文本文件中读取前10个字符，依次显示在屏幕上，如果文本文件中不足10个字符，则有多少个字符读取多少个字符，并显示在屏幕上。" class="headerlink" title="2、从源程序当前目录下名为“xhar2.txt”的文本文件中读取前10个字符，依次显示在屏幕上，如果文本文件中不足10个字符，则有多少个字符读取多少个字符，并显示在屏幕上。"></a>2、从源程序当前目录下名为“xhar2.txt”的文本文件中读取前10个字符，依次显示在屏幕上，如果文本文件中不足10个字符，则有多少个字符读取多少个字符，并显示在屏幕上。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	fp = fopen(<span class="string">&quot;xhar2.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">//需要提前创建源程序当前目录下的data.txt文件,否则会文件打开失败</span></span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件xhar2.txt打开失败，请在源程序目录下手动创建该文件！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (!feof(fp))</span><br><span class="line">	&#123;</span><br><span class="line">		n++;</span><br><span class="line">		ch = fgetc(fp);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, ch);</span><br><span class="line">		<span class="keyword">if</span> (n == <span class="number">10</span>)</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、有2个磁盘文件a-txt和b-txt，要求产生一个新的文件c-txt，将b-txt中的数据追加到a-txt后面，再一并存入到c-txt中。"><a href="#3、有2个磁盘文件a-txt和b-txt，要求产生一个新的文件c-txt，将b-txt中的数据追加到a-txt后面，再一并存入到c-txt中。" class="headerlink" title="3、有2个磁盘文件a.txt和b.txt，要求产生一个新的文件c.txt，将b.txt中的数据追加到a.txt后面，再一并存入到c.txt中。"></a>3、有2个磁盘文件a.txt和b.txt，要求产生一个新的文件c.txt，将b.txt中的数据追加到a.txt后面，再一并存入到c.txt中。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fa;</span><br><span class="line">	FILE* fb;</span><br><span class="line">	FILE* fc;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch, ck;</span><br><span class="line">	fa = fopen(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line">	fb = fopen(<span class="string">&quot;b.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);	<span class="comment">//&quot;b.txt&quot;文档需要提前手动创建</span></span><br><span class="line">	<span class="keyword">if</span> (fb == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件b.txt打开失败，请在源程序目录下手动创建该文件！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> ((ch = fgetc(fb)) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		fputc(ch, fa);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fa); <span class="comment">//关闭以&quot;a&quot;文件操作方式打开的a.txt</span></span><br><span class="line">	fa = fopen(<span class="string">&quot;a.txt&quot;</span>, <span class="string">&quot;r&quot;</span>); <span class="comment">//再以&quot;r&quot;文件操作方式重新打开a.txt</span></span><br><span class="line">	fc = fopen(<span class="string">&quot;c.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> ((ck = fgetc(fa)) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		fputc(ck, fc);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fc);</span><br><span class="line">	fclose(fa);</span><br><span class="line">	fclose(fb);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;运行成功,打开文件查看吧!\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、编写程序将全班同学的姓名、地址和电话号码写入到一个文件class-txt中。"><a href="#4、编写程序将全班同学的姓名、地址和电话号码写入到一个文件class-txt中。" class="headerlink" title="4、编写程序将全班同学的姓名、地址和电话号码写入到一个文件class.txt中。"></a>4、编写程序将全班同学的姓名、地址和电话号码写入到一个文件class.txt中。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 200</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">char</span> name[<span class="number">15</span>];</span><br><span class="line">	<span class="keyword">char</span> address[<span class="number">30</span>];</span><br><span class="line">	<span class="keyword">char</span> phone_number[<span class="number">15</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>[<span class="title">N</span>];</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">0</span>, sel = <span class="number">0</span>, M = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入第%d个学生的信息：\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;姓名：&quot;</span>);</span><br><span class="line">		gets(stu[i].name);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;地址：&quot;</span>);</span><br><span class="line">		gets(stu[i].address);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;联系方式：&quot;</span>);</span><br><span class="line">		gets(stu[i].phone_number);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---------------------\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;是否继续输入？\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;1 是  2 否\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;输入你的选择：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="keyword">while</span> (sel &lt; <span class="number">1</span> || sel&gt;<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;输入错误，请重新输入：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;sel);</span><br><span class="line">			getchar();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;---------------------\n&quot;</span>);</span><br><span class="line">		<span class="keyword">if</span> (sel == <span class="number">1</span>)</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (sel == <span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			M = i + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	fp = fopen(<span class="string">&quot;class.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件打开失败！&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%-9s%-28s%-15s\n&quot;</span>, <span class="string">&quot;姓名&quot;</span>, <span class="string">&quot;地址&quot;</span>, <span class="string">&quot;联系方式&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; M; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%-9s%-28s%-15s\n&quot;</span>, stu[i].name, stu[i].address, stu[i].phone_number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//如果需要从文件中读取信息可以先利用rewind(fp)重置文件指针，再通过fscanf()函数读取，用法与fprintf()类似</span></span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;信息保存成功！请打开文件class.txt查看！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5、从文件data-txt中读取2个正整数，计算这2个正整数之间所有正整数的和（包括本身），最后将结束写入到文件he-txt中。"><a href="#5、从文件data-txt中读取2个正整数，计算这2个正整数之间所有正整数的和（包括本身），最后将结束写入到文件he-txt中。" class="headerlink" title="5、从文件data.txt中读取2个正整数，计算这2个正整数之间所有正整数的和（包括本身），最后将结束写入到文件he.txt中。"></a>5、从文件data.txt中读取2个正整数，计算这2个正整数之间所有正整数的和（包括本身），最后将结束写入到文件he.txt中。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp, * fq;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>, i = <span class="number">0</span>, a = <span class="number">0</span>, b = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">	fp = fopen(<span class="string">&quot;data.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fq = fopen(<span class="string">&quot;result.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span> || fq == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件data.txt打开失败，请在源程序目录下手动创建该文件！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;a);</span><br><span class="line">	<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line">	<span class="keyword">if</span> (a &gt; b)<span class="comment">//a与b的值交换，必须保证计算中a小b大</span></span><br><span class="line">	&#123;</span><br><span class="line">		t = a;</span><br><span class="line">		a = b;</span><br><span class="line">		b = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = a; i &lt;= b; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum += i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fprintf</span>(fq, <span class="string">&quot;%d\n&quot;</span>, sum);<span class="comment">//输出到文件中</span></span><br><span class="line">	fclose(fp);</span><br><span class="line">	fclose(fq);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;信息保存成功！请打开文件he.txt查看！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6、从键盘上读取3个字符串，依次写入名为“string-txt”的文本文件。"><a href="#6、从键盘上读取3个字符串，依次写入名为“string-txt”的文本文件。" class="headerlink" title="6、从键盘上读取3个字符串，依次写入名为“string.txt”的文本文件。"></a>6、从键盘上读取3个字符串，依次写入名为“string.txt”的文本文件。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">100</span>], c[<span class="number">100</span>], t[<span class="number">100</span>];</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="keyword">if</span> ((fp = fopen(<span class="string">&quot;string.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件string.txt打开失败，请在源程序目录下手动创建该文件！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fscanf</span>(<span class="built_in">stdin</span>, <span class="string">&quot;%s%s%s&quot;</span>, s, c, t); <span class="comment">//空格和回车一样都被作为一个字符串结束的标志</span></span><br><span class="line">	<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%s %s %s&quot;</span>, s, c, t);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;信息保存成功！请打开文件class.txt查看！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="7、从English-txt文件中读取一段英文，统计单词个数，然后将结果存入result-txt中。"><a href="#7、从English-txt文件中读取一段英文，统计单词个数，然后将结果存入result-txt中。" class="headerlink" title="7、从English.txt文件中读取一段英文，统计单词个数，然后将结果存入result.txt中。"></a>7、从English.txt文件中读取一段英文，统计单词个数，然后将结果存入result.txt中。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE* fp, * fq;</span><br><span class="line">	<span class="keyword">char</span> E[<span class="number">5000</span>];</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	fp = fopen(<span class="string">&quot;English.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	fq = fopen(<span class="string">&quot;result.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (fp == <span class="literal">NULL</span> || fq == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;文件English.txt打开失败，请在源程序目录下手动创建该文件！\n&quot;</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	fgets(E, <span class="number">5000</span>, fp);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= <span class="built_in">strlen</span>(E) - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (E[i] &gt;= <span class="number">65</span> &amp;&amp; E[i] &lt;= <span class="number">90</span> || E[i] &gt;= <span class="number">97</span> &amp;&amp; E[i] &lt;= <span class="number">122</span>)</span><br><span class="line">			<span class="keyword">if</span> (!(E[i + <span class="number">1</span>] &gt;= <span class="number">65</span> &amp;&amp; E[i + <span class="number">1</span>] &lt;= <span class="number">90</span> || E[i + <span class="number">1</span>] &gt;= <span class="number">97</span> &amp;&amp; E[i + <span class="number">1</span>] &lt;= <span class="number">122</span>))</span><br><span class="line">				<span class="keyword">if</span> (E[i + <span class="number">1</span>] != <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">					sum++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fprintf</span>(fq, <span class="string">&quot;单词个数是%d\n&quot;</span>, sum);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	fclose(fq);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;信息保存成功！请打开文件result.txt查看！\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<h3 id="七、基础算法题"><a href="#七、基础算法题" class="headerlink" title="七、基础算法题"></a>七、基础算法题</h3><h5 id="1、利用欧几里得算法（又称为辗转相除法）快速计算2个整数的最大公约数。"><a href="#1、利用欧几里得算法（又称为辗转相除法）快速计算2个整数的最大公约数。" class="headerlink" title="1、利用欧几里得算法（又称为辗转相除法）快速计算2个整数的最大公约数。"></a>1、利用欧几里得算法（又称为辗转相除法）快速计算2个整数的最大公约数。</h5><h6 id="参考公式："><a href="#参考公式：" class="headerlink" title="参考公式："></a>参考公式：</h6><p>$$<br>\begin{flalign}<br>&amp;{gcd(a,b)}={gcd(b,a \bmod b)}&amp;<br>\end{flalign}<br>$$</p>
<h6 id="示例代码："><a href="#示例代码：" class="headerlink" title="示例代码："></a>示例代码：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> gcd(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Input two positive integers:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Output their greatest common divisor:%d&quot;</span>, gcd(x, y));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="2、大数相加：计算两个非负整数A、B的和。不过这一次有些特殊，A、B可能会很大。"><a href="#2、大数相加：计算两个非负整数A、B的和。不过这一次有些特殊，A、B可能会很大。" class="headerlink" title="2、大数相加：计算两个非负整数A、B的和。不过这一次有些特殊，A、B可能会很大。"></a>2、大数相加：计算两个非负整数A、B的和。不过这一次有些特殊，A、B可能会很大。</h5><h6 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h6><p>第一行输入一个非负整数A。<br>第二行输入一个非负整数B。<br>A、B的长度不大于1000。</p>
<h6 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h6><p>输出A+B的值。不要有多余的前导零。</p>
<h6 id="样例输入："><a href="#样例输入：" class="headerlink" title="样例输入："></a>样例输入：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1234567891011121314151617181920123456789</span></span><br><span class="line"><span class="number">5974994545148254725545124662176431426461421426416</span></span><br></pre></td></tr></table></figure>

<h6 id="样例输出："><a href="#样例输出：" class="headerlink" title="样例输出："></a>样例输出：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">num1:   <span class="number">1234567891011121314151617181920123456789</span></span><br><span class="line">num2:   <span class="number">5974994545148254725545124662176431426461421426416</span></span><br><span class="line">num1Len:<span class="number">40</span></span><br><span class="line">num2Len:<span class="number">49</span></span><br><span class="line"> sum:   <span class="number">5974994546382822616556245976328048608381544883205</span></span><br></pre></td></tr></table></figure>

<h6 id="示例代码：-1"><a href="#示例代码：-1" class="headerlink" title="示例代码："></a>示例代码：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A = <span class="number">0</span>, B = <span class="number">0</span>, max = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> a[N];</span><br><span class="line">	<span class="keyword">char</span> b[N];</span><br><span class="line">	<span class="comment">//以字符串形式输入加数和被加数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please input two non-negative integers(less than 1000 digits):\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b);</span><br><span class="line">	A = <span class="built_in">strlen</span>(a);</span><br><span class="line">	B = <span class="built_in">strlen</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num1:\t%s\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num2:\t%s\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num1Len:%d\n&quot;</span>, A);      <span class="comment">//输出非负整数num1的长度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num2Len:%d\n&quot;</span>, B);  	<span class="comment">//输出非负整数num2的长度</span></span><br><span class="line">	max = A &gt; B ? A : B;            <span class="comment">//取num1和num2较大一个数的位数为max</span></span><br><span class="line">	<span class="keyword">char</span>* c = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * max);</span><br><span class="line">	<span class="keyword">char</span>* d = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * max);</span><br><span class="line">	<span class="keyword">int</span>* s = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (max + <span class="number">1</span>)); <span class="comment">//数组s存放答案</span></span><br><span class="line">	<span class="keyword">for</span> (i = max; i &gt;= <span class="number">0</span>; i--) s[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= max - A - <span class="number">1</span>; i++) c[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = max - A; i &lt; max ; i++) c[i] = a[i - max + A];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= max - B - <span class="number">1</span>; i++) d[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = max - B; i &lt; max ; i++) d[i] = b[i - max + B];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//按照竖式相加算法对数据进行运算</span></span><br><span class="line">	<span class="keyword">for</span> (i = max - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;   <span class="comment">//逐位相加并赋值给数组s的各个元素，暂时不处理进位</span></span><br><span class="line">		s[max - <span class="number">1</span> - i] = (c[i] - <span class="number">48</span>) + (d[i] - <span class="number">48</span>); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = max - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (s[max - <span class="number">1</span> - i] &gt;= <span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			s[max - <span class="number">1</span> - i] = s[max - <span class="number">1</span> - i] % <span class="number">10</span>; <span class="comment">//处理进位</span></span><br><span class="line">			s[max - i]++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//对结果进行输出</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot; sum:\t&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (s[max] != <span class="number">0</span>)            </span><br><span class="line">	&#123;   <span class="comment">//如果数组s最后一个元素有来自低位的进位 ，则输出 </span></span><br><span class="line">		<span class="keyword">for</span> (i = max; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (s[max] == <span class="number">0</span>)      </span><br><span class="line">	&#123;   <span class="comment">//如果数组s最后一个元素没有来自低位的进位 ，则不输出</span></span><br><span class="line">		<span class="keyword">for</span> (i = max - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, s[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3、大数相乘：计算两个非负整数A、B的乘积。A、B可能会很大。"><a href="#3、大数相乘：计算两个非负整数A、B的乘积。A、B可能会很大。" class="headerlink" title="3、大数相乘：计算两个非负整数A、B的乘积。A、B可能会很大。"></a>3、大数相乘：计算两个非负整数A、B的乘积。A、B可能会很大。</h5><h6 id="输入格式：-1"><a href="#输入格式：-1" class="headerlink" title="输入格式："></a>输入格式：</h6><p>第一行输入一个非负整数A。<br>第二行输入一个非负整数B。<br>A、B的长度不大于1000。</p>
<h6 id="输出格式：-1"><a href="#输出格式：-1" class="headerlink" title="输出格式："></a>输出格式：</h6><p>输出A×B的值。不要有多余的前导零。</p>
<h6 id="样例输入：-1"><a href="#样例输入：-1" class="headerlink" title="样例输入："></a>样例输入：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">9876543210123456789103</span></span><br><span class="line"><span class="number">15656489879654321156632157</span>    </span><br></pre></td></tr></table></figure>

<h6 id="样例输出：-1"><a href="#样例输出：-1" class="headerlink" title="样例输出："></a>样例输出：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">num1:    <span class="number">9876543210123456789103</span></span><br><span class="line">num2:    <span class="number">15656489879654321156632157</span></span><br><span class="line">num1Len:<span class="number">22</span></span><br><span class="line">num2Len:<span class="number">26</span></span><br><span class="line">product: <span class="number">154631998815266502735860414063580937236496985171</span></span><br></pre></td></tr></table></figure>

<h6 id="示例代码：-2"><a href="#示例代码：-2" class="headerlink" title="示例代码："></a>示例代码：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100010</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> A = <span class="number">0</span>, B = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> a[N];</span><br><span class="line">	<span class="keyword">char</span> b[N];</span><br><span class="line">	<span class="comment">//以字符串形式输入乘数和被乘数</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Please input two non-negative integers(less than 1000 digits):\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b);</span><br><span class="line">	A = <span class="built_in">strlen</span>(a);</span><br><span class="line">	B = <span class="built_in">strlen</span>(b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num1:\t %s\n&quot;</span>, a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num2:\t %s\n&quot;</span>, b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num1Len:%d\n&quot;</span>, A);           <span class="comment">//输出非负整数num1的长度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;num2Len:%d\n&quot;</span>, B);			 <span class="comment">//输出非负整数num2的长度</span></span><br><span class="line">	<span class="comment">//为数据准备存放位置</span></span><br><span class="line">	<span class="keyword">int</span>* e = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * A);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; A; i++) e[i] = a[i] - <span class="number">48</span>;</span><br><span class="line">	<span class="keyword">int</span>* f = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * B);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; B; i++) f[i] = b[i] - <span class="number">48</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span>* t = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span> * (A + B));  <span class="comment">//t存放结果</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= A + B - <span class="number">1</span>; i++) t[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//二维数组s为乘法竖式运算过程中的数据提供存放位置，s为B行A+B-1列的二维数组</span></span><br><span class="line">	<span class="keyword">int</span>** s = (<span class="keyword">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>*) * B);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; B; i++)</span><br><span class="line">		s[i] = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (A + B - <span class="number">1</span>));</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= B - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= A + B - <span class="number">2</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			s[i][j] = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//按照乘法竖式算法对数据进行运算</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= B - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = A + B - <span class="number">2</span> - i; j &gt;= B - <span class="number">1</span> - i; j--)</span><br><span class="line">		&#123;</span><br><span class="line">			s[i][j] = e[i + j - B + <span class="number">1</span>] * f[B - <span class="number">1</span> - i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= A + B - <span class="number">2</span>; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= B - <span class="number">1</span>; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			t[j + <span class="number">1</span>] = t[j + <span class="number">1</span>] + s[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (j = A + B - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (t[j] &gt;= <span class="number">10</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			t[j - <span class="number">1</span>] = t[j - <span class="number">1</span>] + t[j] / <span class="number">10</span>;  <span class="comment">//处理进位</span></span><br><span class="line">			t[j] = t[j] % <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输出结果</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;product: &quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;= A + B - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (t[i] == <span class="number">0</span> &amp;&amp; i != A + B - <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (t[i] == <span class="number">0</span> &amp;&amp; i == A + B - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (t[i] != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (; i &lt;= A + B - <span class="number">1</span>; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, t[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="4、话说大诗人李白，一生好饮。一天，他提着酒壶，从家里出来，酒壶中有酒2斗。他边走边唱：无事街上走，提壶去打酒。逢店加一倍，遇花喝一斗。这一路上，他一共遇到店5次，遇到花10次，已知最后一次遇到的是花，他正好把酒喝光了。-请你计算李白遇到店和花的次序，可以把遇店记为a，遇花记为b。则：babaabbabbabbbb-就是合理的次序。像这样的答案一共有多少呢？请你计算出所有可能方案的个数。"><a href="#4、话说大诗人李白，一生好饮。一天，他提着酒壶，从家里出来，酒壶中有酒2斗。他边走边唱：无事街上走，提壶去打酒。逢店加一倍，遇花喝一斗。这一路上，他一共遇到店5次，遇到花10次，已知最后一次遇到的是花，他正好把酒喝光了。-请你计算李白遇到店和花的次序，可以把遇店记为a，遇花记为b。则：babaabbabbabbbb-就是合理的次序。像这样的答案一共有多少呢？请你计算出所有可能方案的个数。" class="headerlink" title="4、话说大诗人李白，一生好饮。一天，他提着酒壶，从家里出来，酒壶中有酒2斗。他边走边唱：无事街上走，提壶去打酒。逢店加一倍，遇花喝一斗。这一路上，他一共遇到店5次，遇到花10次，已知最后一次遇到的是花，他正好把酒喝光了。 请你计算李白遇到店和花的次序，可以把遇店记为a，遇花记为b。则：babaabbabbabbbb 就是合理的次序。像这样的答案一共有多少呢？请你计算出所有可能方案的个数。"></a>4、话说大诗人李白，一生好饮。一天，他提着酒壶，从家里出来，酒壶中有酒2斗。他边走边唱：无事街上走，提壶去打酒。逢店加一倍，遇花喝一斗。这一路上，他一共遇到店5次，遇到花10次，已知最后一次遇到的是花，他正好把酒喝光了。 请你计算李白遇到店和花的次序，可以把遇店记为a，遇花记为b。则：babaabbabbabbbb 就是合理的次序。像这样的答案一共有多少呢？请你计算出所有可能方案的个数。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">//jiu表示酒的数量</span></span><br><span class="line"><span class="comment">//hua表示遇见花的次数</span></span><br><span class="line"><span class="comment">//dian表示遇见店的次数</span></span><br><span class="line"><span class="comment">//yujian每次遇见的是店或花  店记为0，遇花记为1</span></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;<span class="comment">//表示所有符合题意的组合数量，这里可以等价写为 int sum;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> jiu, <span class="keyword">int</span> hua, <span class="keyword">int</span> dian, <span class="keyword">int</span> yujian)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (hua + dian == <span class="number">15</span>)<span class="comment">//某种组合结束</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (jiu == <span class="number">0</span> &amp;&amp; hua == <span class="number">10</span> &amp;&amp; dian == <span class="number">5</span> &amp;&amp; yujian == <span class="number">1</span>)</span><br><span class="line">			sum++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		f(jiu - <span class="number">1</span>, hua + <span class="number">1</span>, dian + <span class="number">0</span>, <span class="number">1</span>); <span class="comment">//某次遇见花</span></span><br><span class="line">		f(jiu * <span class="number">2</span>, hua + <span class="number">0</span>, dian + <span class="number">1</span>, <span class="number">0</span>); <span class="comment">//某次遇见店</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f(<span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="comment">//最后一个实参表示遇见，因为没有出门，所以这个值不存在，那就随便写</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="5、某电视台举办了低碳生活大奖赛。题目的计分规则相当奇怪：每位选手需要回答10个问题（其编号为1到10），越后面越有难度。答对的，当前分数翻倍；答错了则扣掉与题号相同的分数（选手必须回答问题，不回答按错误处理）。每位选手都有一个起步的分数为10分。某获胜选手最终得分刚好是100分，如果不让你看比赛过程，你能推断出他（她）哪个题目答对了，哪个题目答错了吗？如果把答对的记为1，答错的记为0，则10个题目的回答情况可以用仅含有1和0的字符串来表示。例如：0010110011-就是可能的情况。你的任务是算出所有可能情况。每个答案占一行。"><a href="#5、某电视台举办了低碳生活大奖赛。题目的计分规则相当奇怪：每位选手需要回答10个问题（其编号为1到10），越后面越有难度。答对的，当前分数翻倍；答错了则扣掉与题号相同的分数（选手必须回答问题，不回答按错误处理）。每位选手都有一个起步的分数为10分。某获胜选手最终得分刚好是100分，如果不让你看比赛过程，你能推断出他（她）哪个题目答对了，哪个题目答错了吗？如果把答对的记为1，答错的记为0，则10个题目的回答情况可以用仅含有1和0的字符串来表示。例如：0010110011-就是可能的情况。你的任务是算出所有可能情况。每个答案占一行。" class="headerlink" title="5、某电视台举办了低碳生活大奖赛。题目的计分规则相当奇怪：每位选手需要回答10个问题（其编号为1到10），越后面越有难度。答对的，当前分数翻倍；答错了则扣掉与题号相同的分数（选手必须回答问题，不回答按错误处理）。每位选手都有一个起步的分数为10分。某获胜选手最终得分刚好是100分，如果不让你看比赛过程，你能推断出他（她）哪个题目答对了，哪个题目答错了吗？如果把答对的记为1，答错的记为0，则10个题目的回答情况可以用仅含有1和0的字符串来表示。例如：0010110011 就是可能的情况。你的任务是算出所有可能情况。每个答案占一行。"></a>5、某电视台举办了低碳生活大奖赛。题目的计分规则相当奇怪：每位选手需要回答10个问题（其编号为1到10），越后面越有难度。答对的，当前分数翻倍；答错了则扣掉与题号相同的分数（选手必须回答问题，不回答按错误处理）。每位选手都有一个起步的分数为10分。某获胜选手最终得分刚好是100分，如果不让你看比赛过程，你能推断出他（她）哪个题目答对了，哪个题目答错了吗？如果把答对的记为1，答错的记为0，则10个题目的回答情况可以用仅含有1和0的字符串来表示。例如：0010110011 就是可能的情况。你的任务是算出所有可能情况。每个答案占一行。</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> ti[<span class="number">11</span>] = &#123; <span class="number">0</span> &#125;; <span class="comment">//用来存储每道题的回答情况0或者1,0表示错误，1表示正确</span></span><br><span class="line"><span class="comment">//提醒：数组ti的编号实际用1-10</span></span><br><span class="line"><span class="comment">//score表示当前得分，num是当前第num道题目</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> score, <span class="keyword">int</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (num == <span class="number">11</span>)<span class="comment">//10道题目全部做完</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (score == <span class="number">100</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++)</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, ti[i]);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="comment">//10道题目没有做完</span></span><br><span class="line">	&#123;</span><br><span class="line">		ti[num] = <span class="number">1</span>; <span class="comment">//讨论第num道题目的正确情况</span></span><br><span class="line">		f(score * <span class="number">2</span>, num + <span class="number">1</span>);</span><br><span class="line">		ti[num] = <span class="number">0</span>; <span class="comment">//讨论第num道题目的错误情况</span></span><br><span class="line">		f(score - num, num + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	f(<span class="number">10</span>, <span class="number">1</span>);<span class="comment">//从基础分10分开始，从第1题开始</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="6、输入一个十进制数N，将它转换成R进制数输出。在10≤R≤16的情况下，用’A’表示10，用’B’表示11，用’C’表示12，用’D’表示13，用’E’表示14，用’F’表示15。"><a href="#6、输入一个十进制数N，将它转换成R进制数输出。在10≤R≤16的情况下，用’A’表示10，用’B’表示11，用’C’表示12，用’D’表示13，用’E’表示14，用’F’表示15。" class="headerlink" title="6、输入一个十进制数N，将它转换成R进制数输出。在10≤R≤16的情况下，用’A’表示10，用’B’表示11，用’C’表示12，用’D’表示13，用’E’表示14，用’F’表示15。"></a>6、输入一个十进制数N，将它转换成R进制数输出。在10≤R≤16的情况下，用’A’表示10，用’B’表示11，用’C’表示12，用’D’表示13，用’E’表示14，用’F’表示15。</h5><h6 id="输入格式：-2"><a href="#输入格式：-2" class="headerlink" title="输入格式："></a>输入格式：</h6><p>输入包含两个整数 N（N≤10000）和R（2≤R≤16）。<br>注意：N有可能是负整数。</p>
<h6 id="输出格式：-2"><a href="#输出格式：-2" class="headerlink" title="输出格式："></a>输出格式：</h6><p>输出一行，表示转换后的数。</p>
<h6 id="样例输入：-2"><a href="#样例输入：-2" class="headerlink" title="样例输入："></a>样例输入：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">742035030</span> <span class="number">16</span></span><br></pre></td></tr></table></figure>

<h6 id="样例输出：-2"><a href="#样例输出：-2" class="headerlink" title="样例输出："></a>样例输出：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span>C3A8E56</span><br></pre></td></tr></table></figure>

<h6 id="示例代码：-3"><a href="#示例代码：-3" class="headerlink" title="示例代码："></a>示例代码：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> t = <span class="number">0</span>, N = <span class="number">0</span>, R = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> s[<span class="number">1000</span>] = &#123; <span class="string">&#x27;\0&#x27;</span> &#125;;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;N, &amp;R);</span><br><span class="line">	<span class="keyword">if</span> (N == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (N != <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (N &lt; <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		N = N &gt; <span class="number">0</span> ? N : -N;</span><br><span class="line">		<span class="keyword">while</span> (N)</span><br><span class="line">		&#123;</span><br><span class="line">			t = N % R;</span><br><span class="line">			<span class="keyword">if</span> (t &gt;= <span class="number">0</span> &amp;&amp; t &lt;= <span class="number">9</span>)</span><br><span class="line">				s[i] = <span class="number">48</span> + t;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (t &gt;= <span class="number">10</span> &amp;&amp; t &lt;= <span class="number">15</span>)</span><br><span class="line">				s[i] = <span class="number">55</span> + t;</span><br><span class="line">			i++;</span><br><span class="line">			N = N / R;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, s[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="7、给你一个整数x-，如果x是一个回文整数，返回true；否则，返回false。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121是回文数，而123不是。"><a href="#7、给你一个整数x-，如果x是一个回文整数，返回true；否则，返回false。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121是回文数，而123不是。" class="headerlink" title="7、给你一个整数x ，如果x是一个回文整数，返回true；否则，返回false。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121是回文数，而123不是。"></a>7、给你一个整数x ，如果x是一个回文整数，返回true；否则，返回false。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121是回文数，而123不是。</h5><h6 id="示例-1："><a href="#示例-1：" class="headerlink" title="示例 1："></a>示例 1：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">121</span></span><br><span class="line">输出：<span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h6 id="示例-2："><a href="#示例-2：" class="headerlink" title="示例 2："></a>示例 2：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">-121</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：从左向右读, 为 <span class="number">-121</span> 。 从右向左读, 为 <span class="number">121</span>- 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<h6 id="示例-3："><a href="#示例-3：" class="headerlink" title="示例 3："></a>示例 3：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">输入：x = <span class="number">10</span></span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">解释：从右向左读, 为 <span class="number">01</span> 。因此它不是一个回文数。</span><br></pre></td></tr></table></figure>

<h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">while</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = x % <span class="number">10</span>;</span><br><span class="line">			i++;</span><br><span class="line">			x = x / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= (i - <span class="number">1</span>) / <span class="number">2</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j] != a[i - <span class="number">1</span> - j])</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Input x: &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, isPalindrome(x));</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="8、一个正整数，如果交换高低位以后和原数相等，那么称这个数为回文数。比如121，2332-都是回文数，13，4567不是回文数。任意一个正整数，如果其不是回文数，将该数交换高低位以后和原数相加得到一个新的数，如果新数不是回文数，重复这个变换，直到得到一个回文数为止。例如，57变换后得到132-57-75-，132得到363-132-231-，363是一个回文数。曾经有数学家猜想：对于任意正整数，经过有限次上述变换以后，一定能得出一个回文数。至今这个猜想还没有被证明是对的。现在请你通过程序来验证。"><a href="#8、一个正整数，如果交换高低位以后和原数相等，那么称这个数为回文数。比如121，2332-都是回文数，13，4567不是回文数。任意一个正整数，如果其不是回文数，将该数交换高低位以后和原数相加得到一个新的数，如果新数不是回文数，重复这个变换，直到得到一个回文数为止。例如，57变换后得到132-57-75-，132得到363-132-231-，363是一个回文数。曾经有数学家猜想：对于任意正整数，经过有限次上述变换以后，一定能得出一个回文数。至今这个猜想还没有被证明是对的。现在请你通过程序来验证。" class="headerlink" title="8、一个正整数，如果交换高低位以后和原数相等，那么称这个数为回文数。比如121，2332 都是回文数，13，4567不是回文数。任意一个正整数，如果其不是回文数，将该数交换高低位以后和原数相加得到一个新的数，如果新数不是回文数，重复这个变换，直到得到一个回文数为止。例如，57变换后得到132(57 + 75)，132得到363(132 + 231))，363是一个回文数。曾经有数学家猜想：对于任意正整数，经过有限次上述变换以后，一定能得出一个回文数。至今这个猜想还没有被证明是对的。现在请你通过程序来验证。"></a>8、一个正整数，如果交换高低位以后和原数相等，那么称这个数为回文数。比如121，2332 都是回文数，13，4567不是回文数。任意一个正整数，如果其不是回文数，将该数交换高低位以后和原数相加得到一个新的数，如果新数不是回文数，重复这个变换，直到得到一个回文数为止。例如，57变换后得到132(57 + 75)，132得到363(132 + 231))，363是一个回文数。曾经有数学家猜想：对于任意正整数，经过有限次上述变换以后，一定能得出一个回文数。至今这个猜想还没有被证明是对的。现在请你通过程序来验证。</h5><h6 id="输入格式：-3"><a href="#输入格式：-3" class="headerlink" title="输入格式："></a>输入格式：</h6><p>输入一行一个正整数n。</p>
<h6 id="输出格式：-3"><a href="#输出格式：-3" class="headerlink" title="输出格式："></a>输出格式：</h6><p>输出第一行一个正整数，表示得到一个回文数的最少变换次数。<br>接下来一行，输出变换过程，相邻的数之间用”—&gt;”连接。输出格式可以参见样例。<br>保证最后生成的数在int范围内。</p>
<h6 id="样例输入：-3"><a href="#样例输入：-3" class="headerlink" title="样例输入："></a>样例输入：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">349</span></span><br></pre></td></tr></table></figure>

<h6 id="样例输出：-3"><a href="#样例输出：-3" class="headerlink" title="样例输出："></a>样例输出：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">349</span>---&gt;<span class="number">1292</span>---&gt;<span class="number">4213</span>---&gt;<span class="number">7337</span></span><br></pre></td></tr></table></figure>

<h6 id="示例代码：-4"><a href="#示例代码：-4" class="headerlink" title="示例代码："></a>示例代码：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//如果传入的正整数是回文数则返回1，否则返回0</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;	</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">		<span class="keyword">while</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			a[i] = x % <span class="number">10</span>;</span><br><span class="line">			i++;</span><br><span class="line">			x = x / <span class="number">10</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= (i - <span class="number">1</span>) / <span class="number">2</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (a[j] != a[i - <span class="number">1</span> - j])</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fz</span><span class="params">(<span class="keyword">int</span> x)</span> <span class="comment">//返回翻转后的正整数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;, i = <span class="number">0</span>, y = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = x % <span class="number">10</span>;</span><br><span class="line">		i++;</span><br><span class="line">		x = x / <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	i--;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		y += a[j] * <span class="built_in">pow</span>(<span class="number">10</span>, i - j);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k = <span class="number">0</span>, i = <span class="number">0</span>, a[<span class="number">100</span>] = &#123; <span class="number">0</span> &#125;, j = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k);</span><br><span class="line">	<span class="keyword">while</span> (isPalindrome(k) == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i] = k;</span><br><span class="line">		k += fz(k);</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d---&gt;&quot;</span>, a[j]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, k);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="9、小华非常喜欢吃布丁。这一天她打算购买原味和抹茶味两种布丁，共n个，之后按照一定顺序将n个布丁全部吃完。然而如果小华连续吃到三个同口味的布丁，她会感到厌腻而无法继续吃。请你帮助小华规划吃布丁的每一种可行的口味顺序，使她能够全部吃完而不产生厌腻感。"><a href="#9、小华非常喜欢吃布丁。这一天她打算购买原味和抹茶味两种布丁，共n个，之后按照一定顺序将n个布丁全部吃完。然而如果小华连续吃到三个同口味的布丁，她会感到厌腻而无法继续吃。请你帮助小华规划吃布丁的每一种可行的口味顺序，使她能够全部吃完而不产生厌腻感。" class="headerlink" title="9、小华非常喜欢吃布丁。这一天她打算购买原味和抹茶味两种布丁，共n个，之后按照一定顺序将n个布丁全部吃完。然而如果小华连续吃到三个同口味的布丁，她会感到厌腻而无法继续吃。请你帮助小华规划吃布丁的每一种可行的口味顺序，使她能够全部吃完而不产生厌腻感。"></a>9、小华非常喜欢吃布丁。这一天她打算购买原味和抹茶味两种布丁，共n个，之后按照一定顺序将n个布丁全部吃完。然而如果小华连续吃到三个同口味的布丁，她会感到厌腻而无法继续吃。请你帮助小华规划吃布丁的每一种可行的口味顺序，使她能够全部吃完而不产生厌腻感。</h5><h6 id="输入格式：-4"><a href="#输入格式：-4" class="headerlink" title="输入格式："></a>输入格式：</h6><p>输入一个正整数n，表示布丁的数量。</p>
<h6 id="输出格式：-4"><a href="#输出格式：-4" class="headerlink" title="输出格式："></a>输出格式：</h6><p>每行输出一个由’0’和’1’组成的字符串，表示一种可行的吃布丁的顺序。其中0表示原味，1表示抹茶味。 请将可行的每种方案按字典序升序输入。</p>
<h6 id="样例输入：-4"><a href="#样例输入：-4" class="headerlink" title="样例输入："></a>样例输入：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h6 id="样例输出：-4"><a href="#样例输出：-4" class="headerlink" title="样例输出："></a>样例输出：</h6><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">001</span></span><br><span class="line"><span class="number">010</span></span><br><span class="line"><span class="number">011</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">110</span></span><br></pre></td></tr></table></figure>

<h6 id="数据范围："><a href="#数据范围：" class="headerlink" title="数据范围："></a>数据范围：</h6><p>对于100%的数据，保证1≤n≤20；</p>
<h6 id="示例代码：-5"><a href="#示例代码：-5" class="headerlink" title="示例代码："></a>示例代码：</h6><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> n, <span class="keyword">int</span>* a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (j == n) <span class="comment">//如果吃的布丁的个数达到了n个，这时就代表一种情况结束了</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n - <span class="number">3</span>; i++)</span><br><span class="line">		&#123;	<span class="comment">//遍历该情况，如果存在连续三个相同的布丁，则这种情况flag取值变为1，并且不输出这种情况</span></span><br><span class="line">			<span class="keyword">if</span> (a[i] == a[i + <span class="number">1</span>] &amp;&amp; a[i] == a[i + <span class="number">2</span>] &amp;&amp; a[i + <span class="number">1</span>] == a[i + <span class="number">2</span>])</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>) <span class="comment">//如果flag取值依然为0，就代表这种情况符合要求，可以输出</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				cout &lt;&lt; a[i];</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		a[j] = <span class="number">0</span>; <span class="comment">//讨论第j个布丁是原味的情况</span></span><br><span class="line">		<span class="built_in">f</span>(j + <span class="number">1</span>, n, a); <span class="comment">//先讨论0的情况，再讨论1的情况是为了按照字典序输出</span></span><br><span class="line">		a[j] = <span class="number">1</span>; <span class="comment">//讨论第j个布丁是抹茶味的情况</span></span><br><span class="line">		<span class="built_in">f</span>(j + <span class="number">1</span>, n, a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">	<span class="built_in">f</span>(<span class="number">0</span>, n, p); <span class="comment">//初始情况：吃了0个布丁，还有n个，数组p用来表示吃的情况</span></span><br><span class="line">	<span class="keyword">delete</span>[] p;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
